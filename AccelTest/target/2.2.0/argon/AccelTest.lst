
/Users/maximegordon/Desktop/ParticleMG/AccelTest/target/2.2.0/argon/AccelTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002b80  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6ba0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e4d4  000d6ba4  0001e4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002ac  2003e544  2003e544  0002e544  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6c14  000d6c14  00026c14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6c3c  000d6c3c  00026c3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010b08d  00000000  00000000  00026c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000121cd  00000000  00000000  00131ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00021667  00000000  00000000  00143e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002110  00000000  00000000  00165501  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006298  00000000  00000000  00167611  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000344bf  00000000  00000000  0016d8a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d5e3  00000000  00000000  001a1d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00104278  00000000  00000000  001cf34b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005b10  00000000  00000000  002d35c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fc01 	bl	d6838 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fc09 	bl	d6854 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e4d4 	.word	0x2003e4d4
   d404c:	000d6ba4 	.word	0x000d6ba4
   d4050:	2003e544 	.word	0x2003e544
   d4054:	2003e544 	.word	0x2003e544
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 fb33 	bl	d56cc <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d6b70 	.word	0x000d6b70
   d4080:	000d6b94 	.word	0x000d6b94

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bbcc 	b.w	d4820 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f815 	bl	d40b8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 bad3 	b.w	d563c <_post_loop>

000d4096 <_Znaj>:
   d4096:	f000 bdeb 	b.w	d4c70 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bdf1 	b.w	d4c80 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40ae:	6803      	ldr	r3, [r0, #0]
   d40b0:	b2c9      	uxtb	r1, r1
   d40b2:	689b      	ldr	r3, [r3, #8]
   d40b4:	4718      	bx	r3
	...

000d40b8 <loop>:
  //       Serial.print(".");
  //   }
  //   Serial.println("");
  //   Serial.println("WiFi connected");
}
void loop() {
   d40b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d40bc:	ed2d 8b02 	vpush	{d8}
  // === Read acceleromter data === //
  Wire.beginTransmission(MPUNIT);
   d40c0:	f001 fba4 	bl	d580c <_Z19__fetch_global_Wirev>
   d40c4:	2168      	movs	r1, #104	; 0x68
   d40c6:	f000 feae 	bl	d4e26 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x3B); // Start with register 0x3B (ACCEL_XOUT_H)
   d40ca:	f001 fb9f 	bl	d580c <_Z19__fetch_global_Wirev>
   d40ce:	213b      	movs	r1, #59	; 0x3b
   d40d0:	f7ff ffed 	bl	d40ae <_ZN7TwoWire5writeEi>
  Wire.endTransmission(false);
   d40d4:	f001 fb9a 	bl	d580c <_Z19__fetch_global_Wirev>
   d40d8:	2100      	movs	r1, #0
   d40da:	f000 fea7 	bl	d4e2c <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MPUNIT, 6, true); // Read 6 registers total, each axis value is stored in 2 registers
   d40de:	f001 fb95 	bl	d580c <_Z19__fetch_global_Wirev>
   d40e2:	2206      	movs	r2, #6
   d40e4:	2168      	movs	r1, #104	; 0x68
   d40e6:	2301      	movs	r3, #1
   d40e8:	f000 fe87 	bl	d4dfa <_ZN7TwoWire11requestFromEhjh>
  //For a range of +-2g, we need to divide the raw values by 16384, according to the datasheet
  AccX = (Wire.read() << 8 | Wire.read()) / 16384.0; // X-axis value
   d40ec:	f001 fb8e 	bl	d580c <_Z19__fetch_global_Wirev>
   d40f0:	6803      	ldr	r3, [r0, #0]
   d40f2:	f8df a3b0 	ldr.w	sl, [pc, #944]	; d44a4 <loop+0x3ec>
   d40f6:	695b      	ldr	r3, [r3, #20]
  AccY = (Wire.read() << 8 | Wire.read()) / 16384.0; // Y-axis value
   d40f8:	f8df b3ac 	ldr.w	fp, [pc, #940]	; d44a8 <loop+0x3f0>
  AccX = (Wire.read() << 8 | Wire.read()) / 16384.0; // X-axis value
   d40fc:	4798      	blx	r3
   d40fe:	4604      	mov	r4, r0
   d4100:	f001 fb84 	bl	d580c <_Z19__fetch_global_Wirev>
   d4104:	6803      	ldr	r3, [r0, #0]
   d4106:	695b      	ldr	r3, [r3, #20]
   d4108:	4798      	blx	r3
   d410a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d410e:	f001 ffdb 	bl	d60c8 <__aeabi_i2d>
   d4112:	2200      	movs	r2, #0
   d4114:	4bd6      	ldr	r3, [pc, #856]	; (d4470 <loop+0x3b8>)
   d4116:	f002 f841 	bl	d619c <__aeabi_dmul>
   d411a:	f002 fb37 	bl	d678c <__aeabi_d2f>
   d411e:	f8ca 0000 	str.w	r0, [sl]
  AccY = (Wire.read() << 8 | Wire.read()) / 16384.0; // Y-axis value
   d4122:	f001 fb73 	bl	d580c <_Z19__fetch_global_Wirev>
   d4126:	6803      	ldr	r3, [r0, #0]
   d4128:	695b      	ldr	r3, [r3, #20]
   d412a:	4798      	blx	r3
   d412c:	4604      	mov	r4, r0
   d412e:	f001 fb6d 	bl	d580c <_Z19__fetch_global_Wirev>
   d4132:	6803      	ldr	r3, [r0, #0]
   d4134:	695b      	ldr	r3, [r3, #20]
   d4136:	4798      	blx	r3
   d4138:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d413c:	f001 ffc4 	bl	d60c8 <__aeabi_i2d>
   d4140:	2200      	movs	r2, #0
   d4142:	4bcb      	ldr	r3, [pc, #812]	; (d4470 <loop+0x3b8>)
   d4144:	f002 f82a 	bl	d619c <__aeabi_dmul>
   d4148:	f002 fb20 	bl	d678c <__aeabi_d2f>
   d414c:	f8cb 0000 	str.w	r0, [fp]
  AccZ = (Wire.read() << 8 | Wire.read()) / 16384.0; // Z-axis value
   d4150:	f001 fb5c 	bl	d580c <_Z19__fetch_global_Wirev>
   d4154:	6803      	ldr	r3, [r0, #0]
   d4156:	695b      	ldr	r3, [r3, #20]
   d4158:	4798      	blx	r3
   d415a:	4604      	mov	r4, r0
   d415c:	f001 fb56 	bl	d580c <_Z19__fetch_global_Wirev>
   d4160:	6803      	ldr	r3, [r0, #0]
   d4162:	695b      	ldr	r3, [r3, #20]
   d4164:	4798      	blx	r3
   d4166:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d416a:	f001 ffad 	bl	d60c8 <__aeabi_i2d>
   d416e:	2200      	movs	r2, #0
   d4170:	4bbf      	ldr	r3, [pc, #764]	; (d4470 <loop+0x3b8>)
   d4172:	f002 f813 	bl	d619c <__aeabi_dmul>
   d4176:	f002 fb09 	bl	d678c <__aeabi_d2f>
   d417a:	4bbe      	ldr	r3, [pc, #760]	; (d4474 <loop+0x3bc>)
   d417c:	4606      	mov	r6, r0
   d417e:	6018      	str	r0, [r3, #0]
  // Calculating Roll and Pitch from the accelerometer data
  //PI is undefined
  //accAngleX = (atan(AccY / sqrt(pow(AccX, 2) + pow(AccZ, 2))) * 180 / PI) - 0.58; // AccErrorX ~(0.58) See the calculate_IMU_error()custom function for more details
  accAngleX = (atan(AccY / sqrt(pow(AccX, 2) + pow(AccZ, 2))) * 180 / PI) - 0.58; // AccErrorX ~(0.58) See the calculate_IMU_error()custom function for more details
   d4180:	f8db 0000 	ldr.w	r0, [fp]
   d4184:	f001 ffb2 	bl	d60ec <__aeabi_f2d>
   d4188:	4604      	mov	r4, r0
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d418a:	f8da 0000 	ldr.w	r0, [sl]
   d418e:	460d      	mov	r5, r1
   d4190:	f001 ffac 	bl	d60ec <__aeabi_f2d>
   d4194:	4680      	mov	r8, r0
   d4196:	4630      	mov	r0, r6
   d4198:	4689      	mov	r9, r1
   d419a:	f001 ffa7 	bl	d60ec <__aeabi_f2d>
   d419e:	4602      	mov	r2, r0
   d41a0:	460b      	mov	r3, r1
   d41a2:	f001 fffb 	bl	d619c <__aeabi_dmul>
   d41a6:	4642      	mov	r2, r8
   d41a8:	4606      	mov	r6, r0
   d41aa:	460f      	mov	r7, r1
   d41ac:	464b      	mov	r3, r9
   d41ae:	4640      	mov	r0, r8
   d41b0:	4649      	mov	r1, r9
   d41b2:	f001 fff3 	bl	d619c <__aeabi_dmul>
   d41b6:	4602      	mov	r2, r0
   d41b8:	460b      	mov	r3, r1
   d41ba:	4630      	mov	r0, r6
   d41bc:	4639      	mov	r1, r7
   d41be:	f001 fe37 	bl	d5e30 <__adddf3>
   d41c2:	ec41 0b10 	vmov	d0, r0, r1
   d41c6:	f001 fd09 	bl	d5bdc <sqrt>
   d41ca:	4620      	mov	r0, r4
   d41cc:	ec53 2b10 	vmov	r2, r3, d0
   d41d0:	4629      	mov	r1, r5
   d41d2:	f002 f90d 	bl	d63f0 <__aeabi_ddiv>
   d41d6:	ec41 0b10 	vmov	d0, r0, r1
   d41da:	f001 fb41 	bl	d5860 <atan>
   d41de:	4ba6      	ldr	r3, [pc, #664]	; (d4478 <loop+0x3c0>)
   d41e0:	ec51 0b10 	vmov	r0, r1, d0
   d41e4:	2200      	movs	r2, #0
   d41e6:	f001 ffd9 	bl	d619c <__aeabi_dmul>
   d41ea:	a391      	add	r3, pc, #580	; (adr r3, d4430 <loop+0x378>)
   d41ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41f0:	f002 f8fe 	bl	d63f0 <__aeabi_ddiv>
   d41f4:	a390      	add	r3, pc, #576	; (adr r3, d4438 <loop+0x380>)
   d41f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41fa:	f001 fe17 	bl	d5e2c <__aeabi_dsub>
   d41fe:	f002 fac5 	bl	d678c <__aeabi_d2f>
   d4202:	4a9e      	ldr	r2, [pc, #632]	; (d447c <loop+0x3c4>)
   d4204:	6010      	str	r0, [r2, #0]
  accAngleY = (atan(-1 * AccX / sqrt(pow(AccY, 2) + pow(AccZ, 2))) * 180 / PI) + 1.58; // AccErrorY ~(-1.58)
   d4206:	f8da 0000 	ldr.w	r0, [sl]
   d420a:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d420e:	f001 ff6d 	bl	d60ec <__aeabi_f2d>
   d4212:	4604      	mov	r4, r0
   d4214:	f8db 0000 	ldr.w	r0, [fp]
   d4218:	460d      	mov	r5, r1
   d421a:	f001 ff67 	bl	d60ec <__aeabi_f2d>
   d421e:	4b95      	ldr	r3, [pc, #596]	; (d4474 <loop+0x3bc>)
   d4220:	4680      	mov	r8, r0
   d4222:	6818      	ldr	r0, [r3, #0]
   d4224:	4689      	mov	r9, r1
   d4226:	f001 ff61 	bl	d60ec <__aeabi_f2d>
   d422a:	4602      	mov	r2, r0
   d422c:	460b      	mov	r3, r1
   d422e:	f001 ffb5 	bl	d619c <__aeabi_dmul>
   d4232:	4642      	mov	r2, r8
   d4234:	4606      	mov	r6, r0
   d4236:	460f      	mov	r7, r1
   d4238:	464b      	mov	r3, r9
   d423a:	4640      	mov	r0, r8
   d423c:	4649      	mov	r1, r9
   d423e:	f001 ffad 	bl	d619c <__aeabi_dmul>
   d4242:	4602      	mov	r2, r0
   d4244:	460b      	mov	r3, r1
   d4246:	4630      	mov	r0, r6
   d4248:	4639      	mov	r1, r7
   d424a:	f001 fdf1 	bl	d5e30 <__adddf3>
   d424e:	ec41 0b10 	vmov	d0, r0, r1
   d4252:	f001 fcc3 	bl	d5bdc <sqrt>
   d4256:	4620      	mov	r0, r4
   d4258:	ec53 2b10 	vmov	r2, r3, d0
   d425c:	4629      	mov	r1, r5
   d425e:	f002 f8c7 	bl	d63f0 <__aeabi_ddiv>
   d4262:	ec41 0b10 	vmov	d0, r0, r1
   d4266:	f001 fafb 	bl	d5860 <atan>
   d426a:	4b83      	ldr	r3, [pc, #524]	; (d4478 <loop+0x3c0>)
  // === Read gyroscope data === //
  previousTime = currentTime;        // Previous time is stored before the actual time read
   d426c:	4d84      	ldr	r5, [pc, #528]	; (d4480 <loop+0x3c8>)
  accAngleY = (atan(-1 * AccX / sqrt(pow(AccY, 2) + pow(AccZ, 2))) * 180 / PI) + 1.58; // AccErrorY ~(-1.58)
   d426e:	4e85      	ldr	r6, [pc, #532]	; (d4484 <loop+0x3cc>)
  previousTime = currentTime;        // Previous time is stored before the actual time read
   d4270:	4c85      	ldr	r4, [pc, #532]	; (d4488 <loop+0x3d0>)
  currentTime = millis();            // Current time actual time read
  elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
   d4272:	f8df 8238 	ldr.w	r8, [pc, #568]	; d44ac <loop+0x3f4>
  Wire.beginTransmission(MPUNIT);
  Wire.write(0x43); // Gyro data first register address 0x43
  Wire.endTransmission(false);
  Wire.requestFrom(MPUNIT, 6, true); // Read 4 registers total, each axis value is stored in 2 registers
  GyroX = (Wire.read() << 8 | Wire.read()) / 131.0; // For a 250deg/s range we have to divide first the raw value by 131.0, according to the datasheet
   d4276:	4f85      	ldr	r7, [pc, #532]	; (d448c <loop+0x3d4>)
  accAngleY = (atan(-1 * AccX / sqrt(pow(AccY, 2) + pow(AccZ, 2))) * 180 / PI) + 1.58; // AccErrorY ~(-1.58)
   d4278:	ec51 0b10 	vmov	r0, r1, d0
   d427c:	2200      	movs	r2, #0
   d427e:	f001 ff8d 	bl	d619c <__aeabi_dmul>
   d4282:	a36b      	add	r3, pc, #428	; (adr r3, d4430 <loop+0x378>)
   d4284:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4288:	f002 f8b2 	bl	d63f0 <__aeabi_ddiv>
   d428c:	a36c      	add	r3, pc, #432	; (adr r3, d4440 <loop+0x388>)
   d428e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4292:	f001 fdcd 	bl	d5e30 <__adddf3>
   d4296:	f002 fa79 	bl	d678c <__aeabi_d2f>
  previousTime = currentTime;        // Previous time is stored before the actual time read
   d429a:	682b      	ldr	r3, [r5, #0]
   d429c:	6023      	str	r3, [r4, #0]
  accAngleY = (atan(-1 * AccX / sqrt(pow(AccY, 2) + pow(AccZ, 2))) * 180 / PI) + 1.58; // AccErrorY ~(-1.58)
   d429e:	6030      	str	r0, [r6, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42a0:	f000 fb2a 	bl	d48f8 <HAL_Timer_Get_Milli_Seconds>
  currentTime = millis();            // Current time actual time read
   d42a4:	ee07 0a90 	vmov	s15, r0
  elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
   d42a8:	ed94 7a00 	vldr	s14, [r4]
   d42ac:	eddf 6a78 	vldr	s13, [pc, #480]	; d4490 <loop+0x3d8>
  currentTime = millis();            // Current time actual time read
   d42b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d42b4:	edc5 7a00 	vstr	s15, [r5]
  elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
   d42b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
  GyroY = (Wire.read() << 8 | Wire.read()) / 131.0;
   d42bc:	4d75      	ldr	r5, [pc, #468]	; (d4494 <loop+0x3dc>)
  elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
   d42be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d42c2:	ed88 7a00 	vstr	s14, [r8]
  Wire.beginTransmission(MPUNIT);
   d42c6:	f001 faa1 	bl	d580c <_Z19__fetch_global_Wirev>
   d42ca:	2168      	movs	r1, #104	; 0x68
   d42cc:	f000 fdab 	bl	d4e26 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x43); // Gyro data first register address 0x43
   d42d0:	f001 fa9c 	bl	d580c <_Z19__fetch_global_Wirev>
   d42d4:	2143      	movs	r1, #67	; 0x43
   d42d6:	f7ff feea 	bl	d40ae <_ZN7TwoWire5writeEi>
  Wire.endTransmission(false);
   d42da:	f001 fa97 	bl	d580c <_Z19__fetch_global_Wirev>
   d42de:	2100      	movs	r1, #0
   d42e0:	f000 fda4 	bl	d4e2c <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MPUNIT, 6, true); // Read 4 registers total, each axis value is stored in 2 registers
   d42e4:	f001 fa92 	bl	d580c <_Z19__fetch_global_Wirev>
   d42e8:	2206      	movs	r2, #6
   d42ea:	2168      	movs	r1, #104	; 0x68
   d42ec:	2301      	movs	r3, #1
   d42ee:	f000 fd84 	bl	d4dfa <_ZN7TwoWire11requestFromEhjh>
  GyroX = (Wire.read() << 8 | Wire.read()) / 131.0; // For a 250deg/s range we have to divide first the raw value by 131.0, according to the datasheet
   d42f2:	f001 fa8b 	bl	d580c <_Z19__fetch_global_Wirev>
   d42f6:	6803      	ldr	r3, [r0, #0]
   d42f8:	695b      	ldr	r3, [r3, #20]
   d42fa:	4798      	blx	r3
   d42fc:	4604      	mov	r4, r0
   d42fe:	f001 fa85 	bl	d580c <_Z19__fetch_global_Wirev>
   d4302:	6803      	ldr	r3, [r0, #0]
   d4304:	695b      	ldr	r3, [r3, #20]
   d4306:	4798      	blx	r3
   d4308:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d430c:	f001 fedc 	bl	d60c8 <__aeabi_i2d>
   d4310:	a34d      	add	r3, pc, #308	; (adr r3, d4448 <loop+0x390>)
   d4312:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4316:	f002 f86b 	bl	d63f0 <__aeabi_ddiv>
   d431a:	f002 fa37 	bl	d678c <__aeabi_d2f>
   d431e:	6038      	str	r0, [r7, #0]
  GyroY = (Wire.read() << 8 | Wire.read()) / 131.0;
   d4320:	f001 fa74 	bl	d580c <_Z19__fetch_global_Wirev>
   d4324:	6803      	ldr	r3, [r0, #0]
   d4326:	695b      	ldr	r3, [r3, #20]
   d4328:	4798      	blx	r3
   d432a:	4604      	mov	r4, r0
   d432c:	f001 fa6e 	bl	d580c <_Z19__fetch_global_Wirev>
   d4330:	6803      	ldr	r3, [r0, #0]
   d4332:	695b      	ldr	r3, [r3, #20]
   d4334:	4798      	blx	r3
   d4336:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d433a:	f001 fec5 	bl	d60c8 <__aeabi_i2d>
   d433e:	a342      	add	r3, pc, #264	; (adr r3, d4448 <loop+0x390>)
   d4340:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4344:	f002 f854 	bl	d63f0 <__aeabi_ddiv>
   d4348:	f002 fa20 	bl	d678c <__aeabi_d2f>
   d434c:	6028      	str	r0, [r5, #0]
  GyroZ = (Wire.read() << 8 | Wire.read()) / 131.0;
   d434e:	f001 fa5d 	bl	d580c <_Z19__fetch_global_Wirev>
   d4352:	6803      	ldr	r3, [r0, #0]
   d4354:	695b      	ldr	r3, [r3, #20]
   d4356:	4798      	blx	r3
   d4358:	4681      	mov	r9, r0
   d435a:	f001 fa57 	bl	d580c <_Z19__fetch_global_Wirev>
   d435e:	6803      	ldr	r3, [r0, #0]
   d4360:	695b      	ldr	r3, [r3, #20]
   d4362:	4798      	blx	r3
   d4364:	4604      	mov	r4, r0
  // Correct the outputs with the calculated error values
  GyroX = GyroX + 0.56; // GyroErrorX ~(-0.56)
   d4366:	6838      	ldr	r0, [r7, #0]
   d4368:	f001 fec0 	bl	d60ec <__aeabi_f2d>
   d436c:	a338      	add	r3, pc, #224	; (adr r3, d4450 <loop+0x398>)
   d436e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4372:	f001 fd5d 	bl	d5e30 <__adddf3>
   d4376:	f002 fa09 	bl	d678c <__aeabi_d2f>
  GyroY = GyroY - 2; // GyroErrorY ~(2)
   d437a:	edd5 7a00 	vldr	s15, [r5]
  GyroX = GyroX + 0.56; // GyroErrorX ~(-0.56)
   d437e:	6038      	str	r0, [r7, #0]
  GyroY = GyroY - 2; // GyroErrorY ~(2)
   d4380:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d4384:	ee77 7ac7 	vsub.f32	s15, s15, s14
  GyroZ = (Wire.read() << 8 | Wire.read()) / 131.0;
   d4388:	ea44 2009 	orr.w	r0, r4, r9, lsl #8
  GyroY = GyroY - 2; // GyroErrorY ~(2)
   d438c:	edc5 7a00 	vstr	s15, [r5]
  GyroZ = (Wire.read() << 8 | Wire.read()) / 131.0;
   d4390:	f001 fe9a 	bl	d60c8 <__aeabi_i2d>
   d4394:	a32c      	add	r3, pc, #176	; (adr r3, d4448 <loop+0x390>)
   d4396:	e9d3 2300 	ldrd	r2, r3, [r3]
   d439a:	f002 f829 	bl	d63f0 <__aeabi_ddiv>
   d439e:	f002 f9f5 	bl	d678c <__aeabi_d2f>
  GyroZ = GyroZ + 0.79; // GyroErrorZ ~ (-0.8)
   d43a2:	f001 fea3 	bl	d60ec <__aeabi_f2d>
   d43a6:	a32c      	add	r3, pc, #176	; (adr r3, d4458 <loop+0x3a0>)
   d43a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43ac:	f001 fd40 	bl	d5e30 <__adddf3>
   d43b0:	f002 f9ec 	bl	d678c <__aeabi_d2f>
  // Currently the raw values are in degrees per seconds, deg/s, so we need to multiply by sendonds (s) to get the angle in degrees
  //gyroAngleX = gyroAngleX + GyroX * elapsedTime; // deg/s * s = deg

gyroAngleX = 0.96 * gyroAngleX + 0.04 * accAngleX;
   d43b4:	4f38      	ldr	r7, [pc, #224]	; (d4498 <loop+0x3e0>)
  GyroZ = GyroZ + 0.79; // GyroErrorZ ~ (-0.8)
   d43b6:	4b39      	ldr	r3, [pc, #228]	; (d449c <loop+0x3e4>)
   d43b8:	ee08 0a10 	vmov	s16, r0
   d43bc:	6018      	str	r0, [r3, #0]
gyroAngleX = 0.96 * gyroAngleX + 0.04 * accAngleX;
   d43be:	6838      	ldr	r0, [r7, #0]
   d43c0:	f001 fe94 	bl	d60ec <__aeabi_f2d>
   d43c4:	a326      	add	r3, pc, #152	; (adr r3, d4460 <loop+0x3a8>)
   d43c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43ca:	f001 fee7 	bl	d619c <__aeabi_dmul>
   d43ce:	4a2b      	ldr	r2, [pc, #172]	; (d447c <loop+0x3c4>)
   d43d0:	4604      	mov	r4, r0
   d43d2:	6810      	ldr	r0, [r2, #0]
   d43d4:	460d      	mov	r5, r1
   d43d6:	f001 fe89 	bl	d60ec <__aeabi_f2d>
   d43da:	a323      	add	r3, pc, #140	; (adr r3, d4468 <loop+0x3b0>)
   d43dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43e0:	f001 fedc 	bl	d619c <__aeabi_dmul>
   d43e4:	4602      	mov	r2, r0
   d43e6:	460b      	mov	r3, r1
   d43e8:	4620      	mov	r0, r4
   d43ea:	4629      	mov	r1, r5
   d43ec:	f001 fd20 	bl	d5e30 <__adddf3>
   d43f0:	f002 f9cc 	bl	d678c <__aeabi_d2f>
   d43f4:	6038      	str	r0, [r7, #0]
gyroAngleY = 0.96 * gyroAngleY + 0.04 * accAngleY;
   d43f6:	4f2a      	ldr	r7, [pc, #168]	; (d44a0 <loop+0x3e8>)
gyroAngleX = 0.96 * gyroAngleX + 0.04 * accAngleX;
   d43f8:	4681      	mov	r9, r0
gyroAngleY = 0.96 * gyroAngleY + 0.04 * accAngleY;
   d43fa:	6838      	ldr	r0, [r7, #0]
   d43fc:	f001 fe76 	bl	d60ec <__aeabi_f2d>
   d4400:	a317      	add	r3, pc, #92	; (adr r3, d4460 <loop+0x3a8>)
   d4402:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4406:	f001 fec9 	bl	d619c <__aeabi_dmul>
   d440a:	4604      	mov	r4, r0
   d440c:	6830      	ldr	r0, [r6, #0]
   d440e:	460d      	mov	r5, r1
   d4410:	f001 fe6c 	bl	d60ec <__aeabi_f2d>
   d4414:	a314      	add	r3, pc, #80	; (adr r3, d4468 <loop+0x3b0>)
   d4416:	e9d3 2300 	ldrd	r2, r3, [r3]
   d441a:	f001 febf 	bl	d619c <__aeabi_dmul>
   d441e:	4602      	mov	r2, r0
   d4420:	460b      	mov	r3, r1
   d4422:	4620      	mov	r0, r4
   d4424:	4629      	mov	r1, r5
   d4426:	f001 fd03 	bl	d5e30 <__adddf3>
   d442a:	e041      	b.n	d44b0 <loop+0x3f8>
   d442c:	f3af 8000 	nop.w
   d4430:	54442d18 	.word	0x54442d18
   d4434:	400921fb 	.word	0x400921fb
   d4438:	28f5c28f 	.word	0x28f5c28f
   d443c:	3fe28f5c 	.word	0x3fe28f5c
   d4440:	147ae148 	.word	0x147ae148
   d4444:	3ff947ae 	.word	0x3ff947ae
   d4448:	00000000 	.word	0x00000000
   d444c:	40606000 	.word	0x40606000
   d4450:	1eb851ec 	.word	0x1eb851ec
   d4454:	3fe1eb85 	.word	0x3fe1eb85
   d4458:	147ae148 	.word	0x147ae148
   d445c:	3fe947ae 	.word	0x3fe947ae
   d4460:	eb851eb8 	.word	0xeb851eb8
   d4464:	3feeb851 	.word	0x3feeb851
   d4468:	47ae147b 	.word	0x47ae147b
   d446c:	3fa47ae1 	.word	0x3fa47ae1
   d4470:	3f100000 	.word	0x3f100000
   d4474:	2003e554 	.word	0x2003e554
   d4478:	40668000 	.word	0x40668000
   d447c:	2003e57c 	.word	0x2003e57c
   d4480:	2003e588 	.word	0x2003e588
   d4484:	2003e580 	.word	0x2003e580
   d4488:	2003e59c 	.word	0x2003e59c
   d448c:	2003e564 	.word	0x2003e564
   d4490:	447a0000 	.word	0x447a0000
   d4494:	2003e568 	.word	0x2003e568
   d4498:	2003e590 	.word	0x2003e590
   d449c:	2003e56c 	.word	0x2003e56c
   d44a0:	2003e594 	.word	0x2003e594
   d44a4:	2003e54c 	.word	0x2003e54c
   d44a8:	2003e550 	.word	0x2003e550
   d44ac:	2003e58c 	.word	0x2003e58c
   d44b0:	f002 f96c 	bl	d678c <__aeabi_d2f>

roll = gyroAngleX;
   d44b4:	4b28      	ldr	r3, [pc, #160]	; (d4558 <loop+0x4a0>)
pitch = gyroAngleY;
  
//gyroAngleY = gyroAngleY + GyroY * elapsedTime;
 yaw =  yaw + GyroZ * elapsedTime;
   d44b6:	ed98 7a00 	vldr	s14, [r8]
roll = gyroAngleX;
   d44ba:	f8c3 9000 	str.w	r9, [r3]
pitch = gyroAngleY;
   d44be:	4b27      	ldr	r3, [pc, #156]	; (d455c <loop+0x4a4>)
gyroAngleY = 0.96 * gyroAngleY + 0.04 * accAngleY;
   d44c0:	6038      	str	r0, [r7, #0]
pitch = gyroAngleY;
   d44c2:	6018      	str	r0, [r3, #0]
 yaw =  yaw + GyroZ * elapsedTime;
   d44c4:	4b26      	ldr	r3, [pc, #152]	; (d4560 <loop+0x4a8>)
   d44c6:	4d27      	ldr	r5, [pc, #156]	; (d4564 <loop+0x4ac>)
   d44c8:	edd3 7a00 	vldr	s15, [r3]
   d44cc:	eee8 7a07 	vfma.f32	s15, s16, s14
//  Serial.print(" ");
//    Serial.print(GyroY);
//  Serial.print(" ");
  //  Serial.print(GyroZ);
    // Serial.print(" ");
    int stretchValue = analogRead(A0);
   d44d0:	2013      	movs	r0, #19
 yaw =  yaw + GyroZ * elapsedTime;
   d44d2:	edc3 7a00 	vstr	s15, [r3]
    int stretchValue = analogRead(A0);
   d44d6:	f001 f969 	bl	d57ac <analogRead>
   d44da:	4604      	mov	r4, r0
  // print out the value you read:
//  Serial.print(heartValue);
  Serial.print(" ");
   d44dc:	f001 f828 	bl	d5530 <_Z16_fetch_usbserialv>
   d44e0:	4921      	ldr	r1, [pc, #132]	; (d4568 <loop+0x4b0>)
   d44e2:	f000 fdf9 	bl	d50d8 <_ZN5Print5printEPKc>
  Serial.println(stretchValue);
   d44e6:	f001 f823 	bl	d5530 <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d44ea:	2c00      	cmp	r4, #0
   d44ec:	4606      	mov	r6, r0
   d44ee:	da30      	bge.n	d4552 <loop+0x49a>
            t = print('-');
   d44f0:	212d      	movs	r1, #45	; 0x2d
   d44f2:	f000 fdf5 	bl	d50e0 <_ZN5Print5printEc>
            val = -n;
   d44f6:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d44f8:	220a      	movs	r2, #10
   d44fa:	4630      	mov	r0, r6
   d44fc:	f000 fdff 	bl	d50fe <_ZN5Print11printNumberEmh>
        n += println();
   d4500:	4630      	mov	r0, r6
   d4502:	f000 fdf0 	bl	d50e6 <_ZN5Print7printlnEv>
    Serial.print(AccX);
   d4506:	f001 f813 	bl	d5530 <_Z16_fetch_usbserialv>
   d450a:	ed9a 0a00 	vldr	s0, [sl]
   d450e:	2102      	movs	r1, #2
   d4510:	f000 fedc 	bl	d52cc <_ZN5Print5printEfi>
     Serial.print(" ");
   d4514:	f001 f80c 	bl	d5530 <_Z16_fetch_usbserialv>
   d4518:	4913      	ldr	r1, [pc, #76]	; (d4568 <loop+0x4b0>)
   d451a:	f000 fddd 	bl	d50d8 <_ZN5Print5printEPKc>
    Serial.print(AccY);
   d451e:	f001 f807 	bl	d5530 <_Z16_fetch_usbserialv>
   d4522:	ed9b 0a00 	vldr	s0, [fp]
   d4526:	2102      	movs	r1, #2
   d4528:	f000 fed0 	bl	d52cc <_ZN5Print5printEfi>
    Serial.print(" ");
   d452c:	f001 f800 	bl	d5530 <_Z16_fetch_usbserialv>
   d4530:	490d      	ldr	r1, [pc, #52]	; (d4568 <loop+0x4b0>)
   d4532:	f000 fdd1 	bl	d50d8 <_ZN5Print5printEPKc>
    Serial.println(AccZ);
   d4536:	f000 fffb 	bl	d5530 <_Z16_fetch_usbserialv>
   d453a:	ed95 0a00 	vldr	s0, [r5]
   d453e:	2102      	movs	r1, #2
   d4540:	f000 fede 	bl	d5300 <_ZN5Print7printlnEfi>
  //   OSCMessage outMessage("/test");
  //   outMessage.addFloat(AccX);
  //  outMessage.addFloat(AccY);
  //  outMessage.addFloat(AccZ);
  //   outMessage.send(udp,outIp,outPort);
}
   d4544:	ecbd 8b02 	vpop	{d8}
     delay(50);
   d4548:	2032      	movs	r0, #50	; 0x32
}
   d454a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     delay(50);
   d454e:	f000 bbaf 	b.w	d4cb0 <delay>
            val = n;
   d4552:	4621      	mov	r1, r4
   d4554:	e7d0      	b.n	d44f8 <loop+0x440>
   d4556:	bf00      	nop
   d4558:	2003e5a0 	.word	0x2003e5a0
   d455c:	2003e598 	.word	0x2003e598
   d4560:	2003e5a4 	.word	0x2003e5a4
   d4564:	2003e554 	.word	0x2003e554
   d4568:	000d699c 	.word	0x000d699c
   d456c:	00000000 	.word	0x00000000

000d4570 <_Z19calculate_IMU_errorv>:
void calculate_IMU_error() {
   d4570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // We can call this funtion in the setup section to calculate the accelerometer and gyro data error. From here we will get the error values used in the above equations printed on the Serial Monitor.
  // Note that we should place the IMU flat in order to get the proper values, so that we then can the correct values
  // Read accelerometer values 200 times
  while (c < 200) {
   d4574:	4c9c      	ldr	r4, [pc, #624]	; (d47e8 <_Z19calculate_IMU_errorv+0x278>)
    Wire.beginTransmission(MPUNIT);
    Wire.write(0x3B);
    Wire.endTransmission(false);
    Wire.requestFrom(MPUNIT, 6, true);
    AccX = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
   d4576:	4f9d      	ldr	r7, [pc, #628]	; (d47ec <_Z19calculate_IMU_errorv+0x27c>)
void calculate_IMU_error() {
   d4578:	ed2d 8b06 	vpush	{d8-d10}
   d457c:	4625      	mov	r5, r4
    AccX = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
   d457e:	2600      	movs	r6, #0
  while (c < 200) {
   d4580:	6823      	ldr	r3, [r4, #0]
   d4582:	2bc7      	cmp	r3, #199	; 0xc7
   d4584:	dc5e      	bgt.n	d4644 <_Z19calculate_IMU_errorv+0xd4>
    Wire.beginTransmission(MPUNIT);
   d4586:	f001 f941 	bl	d580c <_Z19__fetch_global_Wirev>
   d458a:	2168      	movs	r1, #104	; 0x68
   d458c:	f000 fc4b 	bl	d4e26 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(0x3B);
   d4590:	f001 f93c 	bl	d580c <_Z19__fetch_global_Wirev>
   d4594:	213b      	movs	r1, #59	; 0x3b
   d4596:	f7ff fd8a 	bl	d40ae <_ZN7TwoWire5writeEi>
    Wire.endTransmission(false);
   d459a:	f001 f937 	bl	d580c <_Z19__fetch_global_Wirev>
   d459e:	2100      	movs	r1, #0
   d45a0:	f000 fc44 	bl	d4e2c <_ZN7TwoWire15endTransmissionEh>
    Wire.requestFrom(MPUNIT, 6, true);
   d45a4:	f001 f932 	bl	d580c <_Z19__fetch_global_Wirev>
   d45a8:	2206      	movs	r2, #6
   d45aa:	2168      	movs	r1, #104	; 0x68
   d45ac:	2301      	movs	r3, #1
   d45ae:	f000 fc24 	bl	d4dfa <_ZN7TwoWire11requestFromEhjh>
    AccX = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
   d45b2:	f001 f92b 	bl	d580c <_Z19__fetch_global_Wirev>
   d45b6:	6803      	ldr	r3, [r0, #0]
   d45b8:	695b      	ldr	r3, [r3, #20]
   d45ba:	4798      	blx	r3
   d45bc:	4680      	mov	r8, r0
   d45be:	f001 f925 	bl	d580c <_Z19__fetch_global_Wirev>
   d45c2:	6803      	ldr	r3, [r0, #0]
   d45c4:	695b      	ldr	r3, [r3, #20]
   d45c6:	4798      	blx	r3
   d45c8:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
   d45cc:	f001 fd7c 	bl	d60c8 <__aeabi_i2d>
   d45d0:	4632      	mov	r2, r6
   d45d2:	463b      	mov	r3, r7
   d45d4:	f001 fde2 	bl	d619c <__aeabi_dmul>
   d45d8:	f002 f8d8 	bl	d678c <__aeabi_d2f>
   d45dc:	4b84      	ldr	r3, [pc, #528]	; (d47f0 <_Z19calculate_IMU_errorv+0x280>)
   d45de:	6018      	str	r0, [r3, #0]
    AccY = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
   d45e0:	f001 f914 	bl	d580c <_Z19__fetch_global_Wirev>
   d45e4:	6803      	ldr	r3, [r0, #0]
   d45e6:	695b      	ldr	r3, [r3, #20]
   d45e8:	4798      	blx	r3
   d45ea:	4680      	mov	r8, r0
   d45ec:	f001 f90e 	bl	d580c <_Z19__fetch_global_Wirev>
   d45f0:	6803      	ldr	r3, [r0, #0]
   d45f2:	695b      	ldr	r3, [r3, #20]
   d45f4:	4798      	blx	r3
   d45f6:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
   d45fa:	f001 fd65 	bl	d60c8 <__aeabi_i2d>
   d45fe:	4632      	mov	r2, r6
   d4600:	463b      	mov	r3, r7
   d4602:	f001 fdcb 	bl	d619c <__aeabi_dmul>
   d4606:	f002 f8c1 	bl	d678c <__aeabi_d2f>
   d460a:	4b7a      	ldr	r3, [pc, #488]	; (d47f4 <_Z19calculate_IMU_errorv+0x284>)
   d460c:	6018      	str	r0, [r3, #0]
    AccZ = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
   d460e:	f001 f8fd 	bl	d580c <_Z19__fetch_global_Wirev>
   d4612:	6803      	ldr	r3, [r0, #0]
   d4614:	695b      	ldr	r3, [r3, #20]
   d4616:	4798      	blx	r3
   d4618:	4680      	mov	r8, r0
   d461a:	f001 f8f7 	bl	d580c <_Z19__fetch_global_Wirev>
   d461e:	6803      	ldr	r3, [r0, #0]
   d4620:	695b      	ldr	r3, [r3, #20]
   d4622:	4798      	blx	r3
   d4624:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
   d4628:	f001 fd4e 	bl	d60c8 <__aeabi_i2d>
   d462c:	463b      	mov	r3, r7
   d462e:	4632      	mov	r2, r6
   d4630:	f001 fdb4 	bl	d619c <__aeabi_dmul>
   d4634:	f002 f8aa 	bl	d678c <__aeabi_d2f>
   d4638:	4b6f      	ldr	r3, [pc, #444]	; (d47f8 <_Z19calculate_IMU_errorv+0x288>)
   d463a:	6018      	str	r0, [r3, #0]
    // Sum all readings
    //AccErrorX = AccErrorX + ((atan((AccY) / sqrt(pow((AccX), 2) + pow((AccZ), 2))) * 180 / PI));
    //AccErrorY = AccErrorY + ((atan(-1 * (AccX) / sqrt(pow((AccY), 2) + pow((AccZ), 2))) * 180 / PI));
    c++;
   d463c:	6823      	ldr	r3, [r4, #0]
   d463e:	3301      	adds	r3, #1
   d4640:	6023      	str	r3, [r4, #0]
  while (c < 200) {
   d4642:	e79d      	b.n	d4580 <_Z19calculate_IMU_errorv+0x10>
  }
  //Divide the sum by 200 to get the error value
  AccErrorX = AccErrorX / 200;
   d4644:	4b6d      	ldr	r3, [pc, #436]	; (d47fc <_Z19calculate_IMU_errorv+0x28c>)
   d4646:	ed9f 8a6e 	vldr	s16, [pc, #440]	; d4800 <_Z19calculate_IMU_errorv+0x290>
   d464a:	ed93 7a00 	vldr	s14, [r3]
  while (c < 200) {
    Wire.beginTransmission(MPUNIT);
    Wire.write(0x43);
    Wire.endTransmission(false);
    Wire.requestFrom(MPUNIT, 6, true);
    GyroX = Wire.read() << 8 | Wire.read();
   d464e:	f8df 81c4 	ldr.w	r8, [pc, #452]	; d4814 <_Z19calculate_IMU_errorv+0x2a4>
  AccErrorX = AccErrorX / 200;
   d4652:	eec7 7a08 	vdiv.f32	s15, s14, s16
    GyroY = Wire.read() << 8 | Wire.read();
    GyroZ = Wire.read() << 8 | Wire.read();
    // Sum all readings
    GyroErrorX = GyroErrorX + (GyroX / 131.0);
   d4656:	f20f 1b88 	addw	fp, pc, #392	; 0x188
   d465a:	e9db ab00 	ldrd	sl, fp, [fp]
  AccErrorX = AccErrorX / 200;
   d465e:	edc3 7a00 	vstr	s15, [r3]
  AccErrorY = AccErrorY / 200;
   d4662:	4b68      	ldr	r3, [pc, #416]	; (d4804 <_Z19calculate_IMU_errorv+0x294>)
   d4664:	ed93 7a00 	vldr	s14, [r3]
   d4668:	eec7 7a08 	vdiv.f32	s15, s14, s16
   d466c:	edc3 7a00 	vstr	s15, [r3]
  c = 0;
   d4670:	2300      	movs	r3, #0
   d4672:	6023      	str	r3, [r4, #0]
    Wire.beginTransmission(MPUNIT);
   d4674:	f001 f8ca 	bl	d580c <_Z19__fetch_global_Wirev>
   d4678:	2168      	movs	r1, #104	; 0x68
   d467a:	f000 fbd4 	bl	d4e26 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(0x43);
   d467e:	f001 f8c5 	bl	d580c <_Z19__fetch_global_Wirev>
   d4682:	2143      	movs	r1, #67	; 0x43
   d4684:	f7ff fd13 	bl	d40ae <_ZN7TwoWire5writeEi>
    Wire.endTransmission(false);
   d4688:	f001 f8c0 	bl	d580c <_Z19__fetch_global_Wirev>
   d468c:	2100      	movs	r1, #0
   d468e:	f000 fbcd 	bl	d4e2c <_ZN7TwoWire15endTransmissionEh>
    Wire.requestFrom(MPUNIT, 6, true);
   d4692:	f001 f8bb 	bl	d580c <_Z19__fetch_global_Wirev>
   d4696:	2206      	movs	r2, #6
   d4698:	2168      	movs	r1, #104	; 0x68
   d469a:	2301      	movs	r3, #1
   d469c:	f000 fbad 	bl	d4dfa <_ZN7TwoWire11requestFromEhjh>
    GyroX = Wire.read() << 8 | Wire.read();
   d46a0:	f001 f8b4 	bl	d580c <_Z19__fetch_global_Wirev>
   d46a4:	6803      	ldr	r3, [r0, #0]
    GyroY = Wire.read() << 8 | Wire.read();
   d46a6:	f8df 9170 	ldr.w	r9, [pc, #368]	; d4818 <_Z19calculate_IMU_errorv+0x2a8>
    GyroX = Wire.read() << 8 | Wire.read();
   d46aa:	695b      	ldr	r3, [r3, #20]
   d46ac:	4798      	blx	r3
   d46ae:	4604      	mov	r4, r0
   d46b0:	f001 f8ac 	bl	d580c <_Z19__fetch_global_Wirev>
   d46b4:	6803      	ldr	r3, [r0, #0]
   d46b6:	695b      	ldr	r3, [r3, #20]
   d46b8:	4798      	blx	r3
   d46ba:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d46be:	ee07 0a90 	vmov	s15, r0
   d46c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d46c6:	edc8 7a00 	vstr	s15, [r8]
    GyroY = Wire.read() << 8 | Wire.read();
   d46ca:	f001 f89f 	bl	d580c <_Z19__fetch_global_Wirev>
   d46ce:	6803      	ldr	r3, [r0, #0]
   d46d0:	695b      	ldr	r3, [r3, #20]
   d46d2:	4798      	blx	r3
   d46d4:	4604      	mov	r4, r0
   d46d6:	f001 f899 	bl	d580c <_Z19__fetch_global_Wirev>
   d46da:	6803      	ldr	r3, [r0, #0]
   d46dc:	695b      	ldr	r3, [r3, #20]
   d46de:	4798      	blx	r3
   d46e0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d46e4:	ee07 0a90 	vmov	s15, r0
   d46e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d46ec:	edc9 7a00 	vstr	s15, [r9]
    GyroZ = Wire.read() << 8 | Wire.read();
   d46f0:	f001 f88c 	bl	d580c <_Z19__fetch_global_Wirev>
   d46f4:	6803      	ldr	r3, [r0, #0]
   d46f6:	695b      	ldr	r3, [r3, #20]
   d46f8:	4798      	blx	r3
   d46fa:	4604      	mov	r4, r0
   d46fc:	f001 f886 	bl	d580c <_Z19__fetch_global_Wirev>
   d4700:	6803      	ldr	r3, [r0, #0]
   d4702:	695b      	ldr	r3, [r3, #20]
   d4704:	4798      	blx	r3
   d4706:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d470a:	ee07 0a90 	vmov	s15, r0
   d470e:	4b3e      	ldr	r3, [pc, #248]	; (d4808 <_Z19calculate_IMU_errorv+0x298>)
    GyroErrorX = GyroErrorX + (GyroX / 131.0);
   d4710:	f8d8 0000 	ldr.w	r0, [r8]
   d4714:	4c3d      	ldr	r4, [pc, #244]	; (d480c <_Z19calculate_IMU_errorv+0x29c>)
    GyroZ = Wire.read() << 8 | Wire.read();
   d4716:	eef8 8ae7 	vcvt.f32.s32	s17, s15
   d471a:	edc3 8a00 	vstr	s17, [r3]
    GyroErrorX = GyroErrorX + (GyroX / 131.0);
   d471e:	f001 fce5 	bl	d60ec <__aeabi_f2d>
   d4722:	4652      	mov	r2, sl
   d4724:	465b      	mov	r3, fp
   d4726:	f001 fe63 	bl	d63f0 <__aeabi_ddiv>
   d472a:	4606      	mov	r6, r0
   d472c:	6820      	ldr	r0, [r4, #0]
   d472e:	460f      	mov	r7, r1
   d4730:	f001 fcdc 	bl	d60ec <__aeabi_f2d>
   d4734:	4602      	mov	r2, r0
   d4736:	460b      	mov	r3, r1
   d4738:	4630      	mov	r0, r6
   d473a:	4639      	mov	r1, r7
   d473c:	f001 fb78 	bl	d5e30 <__adddf3>
   d4740:	f002 f824 	bl	d678c <__aeabi_d2f>
   d4744:	6020      	str	r0, [r4, #0]
   d4746:	ee09 0a90 	vmov	s19, r0
    GyroErrorY = GyroErrorY + (GyroY / 131.0);
   d474a:	f8d9 0000 	ldr.w	r0, [r9]
   d474e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; d481c <_Z19calculate_IMU_errorv+0x2ac>
   d4752:	f001 fccb 	bl	d60ec <__aeabi_f2d>
   d4756:	4652      	mov	r2, sl
   d4758:	465b      	mov	r3, fp
   d475a:	f001 fe49 	bl	d63f0 <__aeabi_ddiv>
   d475e:	4606      	mov	r6, r0
   d4760:	f8d9 0000 	ldr.w	r0, [r9]
   d4764:	460f      	mov	r7, r1
   d4766:	f001 fcc1 	bl	d60ec <__aeabi_f2d>
   d476a:	4602      	mov	r2, r0
   d476c:	460b      	mov	r3, r1
   d476e:	4630      	mov	r0, r6
   d4770:	4639      	mov	r1, r7
   d4772:	f001 fb5d 	bl	d5e30 <__adddf3>
   d4776:	f002 f809 	bl	d678c <__aeabi_d2f>
    GyroErrorZ = GyroErrorZ + (GyroZ / 131.0);
   d477a:	4e25      	ldr	r6, [pc, #148]	; (d4810 <_Z19calculate_IMU_errorv+0x2a0>)
    GyroErrorY = GyroErrorY + (GyroY / 131.0);
   d477c:	f8c9 0000 	str.w	r0, [r9]
   d4780:	ee09 0a10 	vmov	s18, r0
    GyroErrorZ = GyroErrorZ + (GyroZ / 131.0);
   d4784:	6830      	ldr	r0, [r6, #0]
   d4786:	f001 fcb1 	bl	d60ec <__aeabi_f2d>
   d478a:	ec41 0b1a 	vmov	d10, r0, r1
   d478e:	ee18 0a90 	vmov	r0, s17
   d4792:	f001 fcab 	bl	d60ec <__aeabi_f2d>
   d4796:	4652      	mov	r2, sl
   d4798:	465b      	mov	r3, fp
   d479a:	f001 fe29 	bl	d63f0 <__aeabi_ddiv>
   d479e:	460b      	mov	r3, r1
   d47a0:	4602      	mov	r2, r0
   d47a2:	ec51 0b1a 	vmov	r0, r1, d10
   d47a6:	f001 fb43 	bl	d5e30 <__adddf3>
   d47aa:	f001 ffef 	bl	d678c <__aeabi_d2f>
    c++;
   d47ae:	682b      	ldr	r3, [r5, #0]
    GyroErrorZ = GyroErrorZ + (GyroZ / 131.0);
   d47b0:	6030      	str	r0, [r6, #0]
    c++;
   d47b2:	3301      	adds	r3, #1
  while (c < 200) {
   d47b4:	2bc7      	cmp	r3, #199	; 0xc7
    GyroErrorZ = GyroErrorZ + (GyroZ / 131.0);
   d47b6:	ee07 0a90 	vmov	s15, r0
    c++;
   d47ba:	602b      	str	r3, [r5, #0]
  while (c < 200) {
   d47bc:	f77f af5a 	ble.w	d4674 <_Z19calculate_IMU_errorv+0x104>
  }
  //Divide the sum by 200 to get the error value
  GyroErrorX = GyroErrorX / 200;
   d47c0:	ee89 7a88 	vdiv.f32	s14, s19, s16
   d47c4:	ed84 7a00 	vstr	s14, [r4]
  GyroErrorY = GyroErrorY / 200;
   d47c8:	ee89 7a08 	vdiv.f32	s14, s18, s16
   d47cc:	ed89 7a00 	vstr	s14, [r9]
  GyroErrorZ = GyroErrorZ / 200;
   d47d0:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d47d4:	ed86 7a00 	vstr	s14, [r6]
  // Serial.println(GyroErrorX);
  // Serial.print("GyroErrorY: ");
  // Serial.println(GyroErrorY);
  // Serial.print("GyroErrorZ: ");
  // Serial.println(GyroErrorZ);
}
   d47d8:	ecbd 8b06 	vpop	{d8-d10}
   d47dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d47e0:	00000000 	.word	0x00000000
   d47e4:	40606000 	.word	0x40606000
   d47e8:	2003e584 	.word	0x2003e584
   d47ec:	3f100000 	.word	0x3f100000
   d47f0:	2003e54c 	.word	0x2003e54c
   d47f4:	2003e550 	.word	0x2003e550
   d47f8:	2003e554 	.word	0x2003e554
   d47fc:	2003e544 	.word	0x2003e544
   d4800:	43480000 	.word	0x43480000
   d4804:	2003e548 	.word	0x2003e548
   d4808:	2003e56c 	.word	0x2003e56c
   d480c:	2003e558 	.word	0x2003e558
   d4810:	2003e560 	.word	0x2003e560
   d4814:	2003e564 	.word	0x2003e564
   d4818:	2003e568 	.word	0x2003e568
   d481c:	2003e55c 	.word	0x2003e55c

000d4820 <setup>:
void setup() {
   d4820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Serial.begin(19200);
   d4824:	f000 fe84 	bl	d5530 <_Z16_fetch_usbserialv>
   d4828:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
   d482c:	f000 fe70 	bl	d5510 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4830:	2000      	movs	r0, #0
   d4832:	f000 f869 	bl	d4908 <hal_timer_millis>
   d4836:	f04f 0900 	mov.w	r9, #0
   d483a:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d483c:	f241 3687 	movw	r6, #4999	; 0x1387
   d4840:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d4842:	2000      	movs	r0, #0
   d4844:	f000 f860 	bl	d4908 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4848:	ebb0 0408 	subs.w	r4, r0, r8
   d484c:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d4850:	42af      	cmp	r7, r5
   d4852:	bf08      	it	eq
   d4854:	42a6      	cmpeq	r6, r4
   d4856:	d307      	bcc.n	d4868 <setup+0x48>
  waitFor(Serial.isConnected, 5000);
   d4858:	f000 fe6a 	bl	d5530 <_Z16_fetch_usbserialv>
   d485c:	f000 fe5c 	bl	d5518 <_ZN9USBSerial11isConnectedEv>
   d4860:	b910      	cbnz	r0, d4868 <setup+0x48>
            spark_process();
   d4862:	f000 f995 	bl	d4b90 <spark_process>
        while (_while() && !_condition()) {
   d4866:	e7ec      	b.n	d4842 <setup+0x22>
   d4868:	f000 fe62 	bl	d5530 <_Z16_fetch_usbserialv>
   d486c:	f000 fe54 	bl	d5518 <_ZN9USBSerial11isConnectedEv>
  Wire.begin();                      // Initialize comunication
   d4870:	f000 ffcc 	bl	d580c <_Z19__fetch_global_Wirev>
   d4874:	f000 faa4 	bl	d4dc0 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(MPUNIT);       // Start communication with MPU6050 // MPU=0x68
   d4878:	f000 ffc8 	bl	d580c <_Z19__fetch_global_Wirev>
   d487c:	2168      	movs	r1, #104	; 0x68
   d487e:	f000 fad2 	bl	d4e26 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x6B);                  // Talk to the register 6B
   d4882:	f000 ffc3 	bl	d580c <_Z19__fetch_global_Wirev>
   d4886:	216b      	movs	r1, #107	; 0x6b
   d4888:	f7ff fc11 	bl	d40ae <_ZN7TwoWire5writeEi>
  Wire.write(0x00);                  // Make reset - place a 0 into the 6B register
   d488c:	f000 ffbe 	bl	d580c <_Z19__fetch_global_Wirev>
   d4890:	2100      	movs	r1, #0
   d4892:	f7ff fc0c 	bl	d40ae <_ZN7TwoWire5writeEi>
  Wire.endTransmission(true);        //end the transmission
   d4896:	f000 ffb9 	bl	d580c <_Z19__fetch_global_Wirev>
   d489a:	2101      	movs	r1, #1
   d489c:	f000 fac6 	bl	d4e2c <_ZN7TwoWire15endTransmissionEh>
  calculate_IMU_error();
   d48a0:	f7ff fe66 	bl	d4570 <_Z19calculate_IMU_errorv>
}
   d48a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  delay(20);
   d48a8:	2014      	movs	r0, #20
   d48aa:	f000 ba01 	b.w	d4cb0 <delay>
	...

000d48b0 <_GLOBAL__sub_I_SystemMode>:
}
   d48b0:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
   d48b2:	2001      	movs	r0, #1
   d48b4:	2100      	movs	r1, #0
   d48b6:	f000 f94f 	bl	d4b58 <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
   d48ba:	4b06      	ldr	r3, [pc, #24]	; (d48d4 <_GLOBAL__sub_I_SystemMode+0x24>)
   d48bc:	2200      	movs	r2, #0
   d48be:	601a      	str	r2, [r3, #0]
   d48c0:	809a      	strh	r2, [r3, #4]
    SleepResult() {}
   d48c2:	719a      	strb	r2, [r3, #6]
   d48c4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   d48c8:	609a      	str	r2, [r3, #8]
}
   d48ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_system_mode(mode);
   d48ce:	2003      	movs	r0, #3
   d48d0:	f000 b932 	b.w	d4b38 <set_system_mode>
   d48d4:	2003e570 	.word	0x2003e570

000d48d8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <os_mutex_recursive_create+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030248 	.word	0x00030248

000d48e8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <HAL_RNG_GetRandomNumber+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	685b      	ldr	r3, [r3, #4]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030218 	.word	0x00030218

000d48f8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	695b      	ldr	r3, [r3, #20]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030218 	.word	0x00030218

000d4908 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <hal_timer_millis+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030218 	.word	0x00030218

000d4918 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <HAL_Validate_Pin_Function+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	685b      	ldr	r3, [r3, #4]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	0003022c 	.word	0x0003022c

000d4928 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <hal_adc_read+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	0003022c 	.word	0x0003022c

000d4938 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <hal_i2c_begin+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	68db      	ldr	r3, [r3, #12]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030228 	.word	0x00030228

000d4948 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <hal_i2c_begin_transmission+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	699b      	ldr	r3, [r3, #24]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030228 	.word	0x00030228

000d4958 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <hal_i2c_end_transmission+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	69db      	ldr	r3, [r3, #28]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030228 	.word	0x00030228

000d4968 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <hal_i2c_write+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	6a1b      	ldr	r3, [r3, #32]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030228 	.word	0x00030228

000d4978 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <hal_i2c_available+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030228 	.word	0x00030228

000d4988 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <hal_i2c_read+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	00030228 	.word	0x00030228

000d4998 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <hal_i2c_peek+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	00030228 	.word	0x00030228

000d49a8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <hal_i2c_flush+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	00030228 	.word	0x00030228

000d49b8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <hal_i2c_is_enabled+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	00030228 	.word	0x00030228

000d49c8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <hal_i2c_init+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	00030228 	.word	0x00030228

000d49d8 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <hal_i2c_request_ex+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	00030228 	.word	0x00030228

000d49e8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <inet_inet_ntop+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	695b      	ldr	r3, [r3, #20]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	00030264 	.word	0x00030264

000d49f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <netdb_freeaddrinfo+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	689b      	ldr	r3, [r3, #8]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	00030268 	.word	0x00030268

000d4a08 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <netdb_getaddrinfo+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	68db      	ldr	r3, [r3, #12]
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	00030268 	.word	0x00030268

000d4a18 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <hal_spi_init+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	69db      	ldr	r3, [r3, #28]
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	00030230 	.word	0x00030230

000d4a28 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <hal_spi_is_enabled+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	6a1b      	ldr	r3, [r3, #32]
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	00030230 	.word	0x00030230

000d4a38 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <hal_usart_init+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	681b      	ldr	r3, [r3, #0]
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	0003023c 	.word	0x0003023c

000d4a48 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <hal_usart_write+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	68db      	ldr	r3, [r3, #12]
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	0003023c 	.word	0x0003023c

000d4a58 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <hal_usart_available+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	691b      	ldr	r3, [r3, #16]
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	0003023c 	.word	0x0003023c

000d4a68 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <hal_usart_read+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	695b      	ldr	r3, [r3, #20]
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	0003023c 	.word	0x0003023c

000d4a78 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <hal_usart_peek+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	699b      	ldr	r3, [r3, #24]
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	0003023c 	.word	0x0003023c

000d4a88 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <hal_usart_flush+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	69db      	ldr	r3, [r3, #28]
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	0003023c 	.word	0x0003023c

000d4a98 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <hal_usart_is_enabled+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	6a1b      	ldr	r3, [r3, #32]
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	0003023c 	.word	0x0003023c

000d4aa8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <hal_usart_available_data_for_write+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	0003023c 	.word	0x0003023c

000d4ab8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <HAL_USB_USART_Init+0xc>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	681b      	ldr	r3, [r3, #0]
   d4ac0:	9301      	str	r3, [sp, #4]
   d4ac2:	bd08      	pop	{r3, pc}
   d4ac4:	0003024c 	.word	0x0003024c

000d4ac8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <HAL_USB_USART_Begin+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	685b      	ldr	r3, [r3, #4]
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	0003024c 	.word	0x0003024c

000d4ad8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b02      	ldr	r3, [pc, #8]	; (d4ae4 <HAL_USB_USART_Available_Data+0xc>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	691b      	ldr	r3, [r3, #16]
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	0003024c 	.word	0x0003024c

000d4ae8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ae8:	b508      	push	{r3, lr}
   d4aea:	4b02      	ldr	r3, [pc, #8]	; (d4af4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	695b      	ldr	r3, [r3, #20]
   d4af0:	9301      	str	r3, [sp, #4]
   d4af2:	bd08      	pop	{r3, pc}
   d4af4:	0003024c 	.word	0x0003024c

000d4af8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4af8:	b508      	push	{r3, lr}
   d4afa:	4b02      	ldr	r3, [pc, #8]	; (d4b04 <HAL_USB_USART_Receive_Data+0xc>)
   d4afc:	681b      	ldr	r3, [r3, #0]
   d4afe:	699b      	ldr	r3, [r3, #24]
   d4b00:	9301      	str	r3, [sp, #4]
   d4b02:	bd08      	pop	{r3, pc}
   d4b04:	0003024c 	.word	0x0003024c

000d4b08 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b08:	b508      	push	{r3, lr}
   d4b0a:	4b02      	ldr	r3, [pc, #8]	; (d4b14 <HAL_USB_USART_Send_Data+0xc>)
   d4b0c:	681b      	ldr	r3, [r3, #0]
   d4b0e:	69db      	ldr	r3, [r3, #28]
   d4b10:	9301      	str	r3, [sp, #4]
   d4b12:	bd08      	pop	{r3, pc}
   d4b14:	0003024c 	.word	0x0003024c

000d4b18 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b18:	b508      	push	{r3, lr}
   d4b1a:	4b02      	ldr	r3, [pc, #8]	; (d4b24 <HAL_USB_USART_Flush_Data+0xc>)
   d4b1c:	681b      	ldr	r3, [r3, #0]
   d4b1e:	6a1b      	ldr	r3, [r3, #32]
   d4b20:	9301      	str	r3, [sp, #4]
   d4b22:	bd08      	pop	{r3, pc}
   d4b24:	0003024c 	.word	0x0003024c

000d4b28 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d4b28:	b508      	push	{r3, lr}
   d4b2a:	4b02      	ldr	r3, [pc, #8]	; (d4b34 <HAL_USB_USART_Is_Connected+0xc>)
   d4b2c:	681b      	ldr	r3, [r3, #0]
   d4b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b30:	9301      	str	r3, [sp, #4]
   d4b32:	bd08      	pop	{r3, pc}
   d4b34:	0003024c 	.word	0x0003024c

000d4b38 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b38:	b508      	push	{r3, lr}
   d4b3a:	4b02      	ldr	r3, [pc, #8]	; (d4b44 <set_system_mode+0xc>)
   d4b3c:	681b      	ldr	r3, [r3, #0]
   d4b3e:	685b      	ldr	r3, [r3, #4]
   d4b40:	9301      	str	r3, [sp, #4]
   d4b42:	bd08      	pop	{r3, pc}
   d4b44:	00030220 	.word	0x00030220

000d4b48 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b48:	b508      	push	{r3, lr}
   d4b4a:	4b02      	ldr	r3, [pc, #8]	; (d4b54 <system_delay_ms+0xc>)
   d4b4c:	681b      	ldr	r3, [r3, #0]
   d4b4e:	695b      	ldr	r3, [r3, #20]
   d4b50:	9301      	str	r3, [sp, #4]
   d4b52:	bd08      	pop	{r3, pc}
   d4b54:	00030220 	.word	0x00030220

000d4b58 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4b58:	b508      	push	{r3, lr}
   d4b5a:	4b02      	ldr	r3, [pc, #8]	; (d4b64 <system_thread_set_state+0xc>)
   d4b5c:	681b      	ldr	r3, [r3, #0]
   d4b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b60:	9301      	str	r3, [sp, #4]
   d4b62:	bd08      	pop	{r3, pc}
   d4b64:	00030220 	.word	0x00030220

000d4b68 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b68:	b508      	push	{r3, lr}
   d4b6a:	4b03      	ldr	r3, [pc, #12]	; (d4b78 <system_ctrl_set_app_request_handler+0x10>)
   d4b6c:	681b      	ldr	r3, [r3, #0]
   d4b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b72:	9301      	str	r3, [sp, #4]
   d4b74:	bd08      	pop	{r3, pc}
   d4b76:	0000      	.short	0x0000
   d4b78:	00030220 	.word	0x00030220

000d4b7c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b03      	ldr	r3, [pc, #12]	; (d4b8c <system_ctrl_set_result+0x10>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b86:	9301      	str	r3, [sp, #4]
   d4b88:	bd08      	pop	{r3, pc}
   d4b8a:	0000      	.short	0x0000
   d4b8c:	00030220 	.word	0x00030220

000d4b90 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <spark_process+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	689b      	ldr	r3, [r3, #8]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030244 	.word	0x00030244

000d4ba0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <spark_set_random_seed_from_cloud_handler+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	00030244 	.word	0x00030244

000d4bb0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <network_connect+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	685b      	ldr	r3, [r3, #4]
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	00030240 	.word	0x00030240

000d4bc0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <network_connecting+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	689b      	ldr	r3, [r3, #8]
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	00030240 	.word	0x00030240

000d4bd0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <network_disconnect+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	68db      	ldr	r3, [r3, #12]
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	00030240 	.word	0x00030240

000d4be0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <network_ready+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	691b      	ldr	r3, [r3, #16]
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	00030240 	.word	0x00030240

000d4bf0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <network_on+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	695b      	ldr	r3, [r3, #20]
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	00030240 	.word	0x00030240

000d4c00 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <network_off+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	699b      	ldr	r3, [r3, #24]
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	00030240 	.word	0x00030240

000d4c10 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <network_listen+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	69db      	ldr	r3, [r3, #28]
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	00030240 	.word	0x00030240

000d4c20 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4c20:	b508      	push	{r3, lr}
   d4c22:	4b02      	ldr	r3, [pc, #8]	; (d4c2c <network_listening+0xc>)
   d4c24:	681b      	ldr	r3, [r3, #0]
   d4c26:	6a1b      	ldr	r3, [r3, #32]
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	00030240 	.word	0x00030240

000d4c30 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c30:	b508      	push	{r3, lr}
   d4c32:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <network_set_listen_timeout+0xc>)
   d4c34:	681b      	ldr	r3, [r3, #0]
   d4c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c38:	9301      	str	r3, [sp, #4]
   d4c3a:	bd08      	pop	{r3, pc}
   d4c3c:	00030240 	.word	0x00030240

000d4c40 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c40:	b508      	push	{r3, lr}
   d4c42:	4b02      	ldr	r3, [pc, #8]	; (d4c4c <network_get_listen_timeout+0xc>)
   d4c44:	681b      	ldr	r3, [r3, #0]
   d4c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	bd08      	pop	{r3, pc}
   d4c4c:	00030240 	.word	0x00030240

000d4c50 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4c50:	b508      	push	{r3, lr}
   d4c52:	4b02      	ldr	r3, [pc, #8]	; (d4c5c <network_is_on+0xc>)
   d4c54:	681b      	ldr	r3, [r3, #0]
   d4c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c58:	9301      	str	r3, [sp, #4]
   d4c5a:	bd08      	pop	{r3, pc}
   d4c5c:	00030240 	.word	0x00030240

000d4c60 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4c60:	b508      	push	{r3, lr}
   d4c62:	4b02      	ldr	r3, [pc, #8]	; (d4c6c <network_is_off+0xc>)
   d4c64:	681b      	ldr	r3, [r3, #0]
   d4c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c68:	9301      	str	r3, [sp, #4]
   d4c6a:	bd08      	pop	{r3, pc}
   d4c6c:	00030240 	.word	0x00030240

000d4c70 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c70:	b508      	push	{r3, lr}
   d4c72:	4b02      	ldr	r3, [pc, #8]	; (d4c7c <malloc+0xc>)
   d4c74:	681b      	ldr	r3, [r3, #0]
   d4c76:	681b      	ldr	r3, [r3, #0]
   d4c78:	9301      	str	r3, [sp, #4]
   d4c7a:	bd08      	pop	{r3, pc}
   d4c7c:	0003021c 	.word	0x0003021c

000d4c80 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c80:	b508      	push	{r3, lr}
   d4c82:	4b02      	ldr	r3, [pc, #8]	; (d4c8c <free+0xc>)
   d4c84:	681b      	ldr	r3, [r3, #0]
   d4c86:	685b      	ldr	r3, [r3, #4]
   d4c88:	9301      	str	r3, [sp, #4]
   d4c8a:	bd08      	pop	{r3, pc}
   d4c8c:	0003021c 	.word	0x0003021c

000d4c90 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4c90:	b508      	push	{r3, lr}
   d4c92:	4b02      	ldr	r3, [pc, #8]	; (d4c9c <__errno+0xc>)
   d4c94:	681b      	ldr	r3, [r3, #0]
   d4c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c98:	9301      	str	r3, [sp, #4]
   d4c9a:	bd08      	pop	{r3, pc}
   d4c9c:	0003021c 	.word	0x0003021c

000d4ca0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b02      	ldr	r3, [pc, #8]	; (d4cac <newlib_impure_ptr_callback+0xc>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ca8:	9301      	str	r3, [sp, #4]
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	0003021c 	.word	0x0003021c

000d4cb0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4cb0:	2100      	movs	r1, #0
   d4cb2:	f7ff bf49 	b.w	d4b48 <system_delay_ms>
	...

000d4cb8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4cb8:	4802      	ldr	r0, [pc, #8]	; (d4cc4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4cba:	2300      	movs	r3, #0
   d4cbc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4cbe:	f7ff be0b 	b.w	d48d8 <os_mutex_recursive_create>
   d4cc2:	bf00      	nop
   d4cc4:	2003e5a8 	.word	0x2003e5a8

000d4cc8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4cc8:	2200      	movs	r2, #0
   d4cca:	6840      	ldr	r0, [r0, #4]
   d4ccc:	4611      	mov	r1, r2
   d4cce:	f7ff bfa7 	b.w	d4c20 <network_listening>

000d4cd2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4cd2:	2200      	movs	r2, #0
   d4cd4:	6840      	ldr	r0, [r0, #4]
   d4cd6:	4611      	mov	r1, r2
   d4cd8:	f7ff bfb2 	b.w	d4c40 <network_get_listen_timeout>

000d4cdc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4cdc:	6840      	ldr	r0, [r0, #4]
   d4cde:	2200      	movs	r2, #0
   d4ce0:	f7ff bfa6 	b.w	d4c30 <network_set_listen_timeout>

000d4ce4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ce4:	6840      	ldr	r0, [r0, #4]
   d4ce6:	2200      	movs	r2, #0
   d4ce8:	f081 0101 	eor.w	r1, r1, #1
   d4cec:	f7ff bf90 	b.w	d4c10 <network_listen>

000d4cf0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4cf0:	2300      	movs	r3, #0
   d4cf2:	6840      	ldr	r0, [r0, #4]
   d4cf4:	461a      	mov	r2, r3
   d4cf6:	4619      	mov	r1, r3
   d4cf8:	f7ff bf82 	b.w	d4c00 <network_off>

000d4cfc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4cfc:	2300      	movs	r3, #0
   d4cfe:	6840      	ldr	r0, [r0, #4]
   d4d00:	461a      	mov	r2, r3
   d4d02:	4619      	mov	r1, r3
   d4d04:	f7ff bf74 	b.w	d4bf0 <network_on>

000d4d08 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4d08:	2200      	movs	r2, #0
   d4d0a:	6840      	ldr	r0, [r0, #4]
   d4d0c:	4611      	mov	r1, r2
   d4d0e:	f7ff bf67 	b.w	d4be0 <network_ready>

000d4d12 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4d12:	2200      	movs	r2, #0
   d4d14:	6840      	ldr	r0, [r0, #4]
   d4d16:	4611      	mov	r1, r2
   d4d18:	f7ff bf52 	b.w	d4bc0 <network_connecting>

000d4d1c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d1c:	6840      	ldr	r0, [r0, #4]
   d4d1e:	2200      	movs	r2, #0
   d4d20:	2102      	movs	r1, #2
   d4d22:	f7ff bf55 	b.w	d4bd0 <network_disconnect>

000d4d26 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4d26:	2300      	movs	r3, #0
   d4d28:	6840      	ldr	r0, [r0, #4]
   d4d2a:	461a      	mov	r2, r3
   d4d2c:	f7ff bf40 	b.w	d4bb0 <network_connect>

000d4d30 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4d30:	4b02      	ldr	r3, [pc, #8]	; (d4d3c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4d32:	2203      	movs	r2, #3
   d4d34:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4d36:	4a02      	ldr	r2, [pc, #8]	; (d4d40 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4d38:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4d3a:	4770      	bx	lr
   d4d3c:	2003e5ac 	.word	0x2003e5ac
   d4d40:	000d69a8 	.word	0x000d69a8

000d4d44 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4d44:	4770      	bx	lr

000d4d46 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d48:	4606      	mov	r6, r0
   d4d4a:	4615      	mov	r5, r2
   d4d4c:	460c      	mov	r4, r1
   d4d4e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4d50:	42bc      	cmp	r4, r7
   d4d52:	d006      	beq.n	d4d62 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4d54:	6833      	ldr	r3, [r6, #0]
   d4d56:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4d5a:	689b      	ldr	r3, [r3, #8]
   d4d5c:	4630      	mov	r0, r6
   d4d5e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4d60:	e7f6      	b.n	d4d50 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4d62:	4628      	mov	r0, r5
   d4d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d66 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4d66:	7c00      	ldrb	r0, [r0, #16]
   d4d68:	2200      	movs	r2, #0
   d4d6a:	f7ff bdfd 	b.w	d4968 <hal_i2c_write>

000d4d6e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4d6e:	7c00      	ldrb	r0, [r0, #16]
   d4d70:	2100      	movs	r1, #0
   d4d72:	f7ff be01 	b.w	d4978 <hal_i2c_available>

000d4d76 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4d76:	7c00      	ldrb	r0, [r0, #16]
   d4d78:	2100      	movs	r1, #0
   d4d7a:	f7ff be05 	b.w	d4988 <hal_i2c_read>

000d4d7e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4d7e:	7c00      	ldrb	r0, [r0, #16]
   d4d80:	2100      	movs	r1, #0
   d4d82:	f7ff be09 	b.w	d4998 <hal_i2c_peek>

000d4d86 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4d86:	7c00      	ldrb	r0, [r0, #16]
   d4d88:	2100      	movs	r1, #0
   d4d8a:	f7ff be0d 	b.w	d49a8 <hal_i2c_flush>

000d4d8e <_ZN7TwoWireD0Ev>:
   d4d8e:	b510      	push	{r4, lr}
   d4d90:	2114      	movs	r1, #20
   d4d92:	4604      	mov	r4, r0
   d4d94:	f000 fd5e 	bl	d5854 <_ZdlPvj>
   d4d98:	4620      	mov	r0, r4
   d4d9a:	bd10      	pop	{r4, pc}

000d4d9c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4d9c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4da2:	4604      	mov	r4, r0
   d4da4:	4608      	mov	r0, r1
   d4da6:	2100      	movs	r1, #0
   d4da8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4dac:	4b03      	ldr	r3, [pc, #12]	; (d4dbc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4dae:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4db0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4db2:	4611      	mov	r1, r2
   d4db4:	f7ff fe08 	bl	d49c8 <hal_i2c_init>
}
   d4db8:	4620      	mov	r0, r4
   d4dba:	bd10      	pop	{r4, pc}
   d4dbc:	000d69e4 	.word	0x000d69e4

000d4dc0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4dc0:	2300      	movs	r3, #0
   d4dc2:	7c00      	ldrb	r0, [r0, #16]
   d4dc4:	461a      	mov	r2, r3
   d4dc6:	4619      	mov	r1, r3
   d4dc8:	f7ff bdb6 	b.w	d4938 <hal_i2c_begin>

000d4dcc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d4dcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d4dce:	2200      	movs	r2, #0
   d4dd0:	2314      	movs	r3, #20
   d4dd2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d4dd6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d4dda:	780b      	ldrb	r3, [r1, #0]
   d4ddc:	f88d 3008 	strb.w	r3, [sp, #8]
   d4de0:	684b      	ldr	r3, [r1, #4]
   d4de2:	9303      	str	r3, [sp, #12]
   d4de4:	68cb      	ldr	r3, [r1, #12]
   d4de6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d4de8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d4dea:	7a0b      	ldrb	r3, [r1, #8]
   d4dec:	9305      	str	r3, [sp, #20]
   d4dee:	a901      	add	r1, sp, #4
   d4df0:	f7ff fdf2 	bl	d49d8 <hal_i2c_request_ex>
}
   d4df4:	b007      	add	sp, #28
   d4df6:	f85d fb04 	ldr.w	pc, [sp], #4

000d4dfa <_ZN7TwoWire11requestFromEhjh>:
{
   d4dfa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d4dfc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d4dfe:	f88d 1000 	strb.w	r1, [sp]
   d4e02:	f04f 0164 	mov.w	r1, #100	; 0x64
   d4e06:	9103      	str	r1, [sp, #12]
   d4e08:	bf18      	it	ne
   d4e0a:	2301      	movne	r3, #1
   d4e0c:	4669      	mov	r1, sp
    size_ = size;
   d4e0e:	9201      	str	r2, [sp, #4]
   d4e10:	f88d 3008 	strb.w	r3, [sp, #8]
   d4e14:	f7ff ffda 	bl	d4dcc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d4e18:	b005      	add	sp, #20
   d4e1a:	f85d fb04 	ldr.w	pc, [sp], #4

000d4e1e <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d4e1e:	7c00      	ldrb	r0, [r0, #16]
   d4e20:	2200      	movs	r2, #0
   d4e22:	f7ff bd91 	b.w	d4948 <hal_i2c_begin_transmission>

000d4e26 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d4e26:	b2c9      	uxtb	r1, r1
   d4e28:	f7ff bff9 	b.w	d4e1e <_ZN7TwoWire17beginTransmissionEh>

000d4e2c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d4e2c:	7c00      	ldrb	r0, [r0, #16]
   d4e2e:	2200      	movs	r2, #0
   d4e30:	f7ff bd92 	b.w	d4958 <hal_i2c_end_transmission>

000d4e34 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4e34:	4770      	bx	lr

000d4e36 <_ZN9IPAddressD0Ev>:
   d4e36:	b510      	push	{r4, lr}
   d4e38:	2118      	movs	r1, #24
   d4e3a:	4604      	mov	r4, r0
   d4e3c:	f000 fd0a 	bl	d5854 <_ZdlPvj>
   d4e40:	4620      	mov	r0, r4
   d4e42:	bd10      	pop	{r4, pc}

000d4e44 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e44:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4e46:	7d03      	ldrb	r3, [r0, #20]
   d4e48:	2b06      	cmp	r3, #6
{
   d4e4a:	b08d      	sub	sp, #52	; 0x34
   d4e4c:	460e      	mov	r6, r1
   d4e4e:	f100 0704 	add.w	r7, r0, #4
   d4e52:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4e56:	d012      	beq.n	d4e7e <_ZNK9IPAddress7printToER5Print+0x3a>
   d4e58:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4e5c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4e60:	220a      	movs	r2, #10
   d4e62:	4630      	mov	r0, r6
   d4e64:	f000 f94b 	bl	d50fe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4e68:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4e6a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4e6c:	d019      	beq.n	d4ea2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4e6e:	2c00      	cmp	r4, #0
   d4e70:	d0f4      	beq.n	d4e5c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4e72:	212e      	movs	r1, #46	; 0x2e
   d4e74:	4630      	mov	r0, r6
   d4e76:	f000 f933 	bl	d50e0 <_ZN5Print5printEc>
   d4e7a:	4404      	add	r4, r0
   d4e7c:	e7ee      	b.n	d4e5c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e7e:	232f      	movs	r3, #47	; 0x2f
   d4e80:	466a      	mov	r2, sp
   d4e82:	4639      	mov	r1, r7
   d4e84:	200a      	movs	r0, #10
		buf[0] = 0;
   d4e86:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e8a:	f7ff fdad 	bl	d49e8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4e8e:	4668      	mov	r0, sp
   d4e90:	f001 fd0c 	bl	d68ac <strlen>
   d4e94:	6833      	ldr	r3, [r6, #0]
   d4e96:	4602      	mov	r2, r0
   d4e98:	68db      	ldr	r3, [r3, #12]
   d4e9a:	4669      	mov	r1, sp
   d4e9c:	4630      	mov	r0, r6
   d4e9e:	4798      	blx	r3
   d4ea0:	4604      	mov	r4, r0
    }
    return n;
}
   d4ea2:	4620      	mov	r0, r4
   d4ea4:	b00d      	add	sp, #52	; 0x34
   d4ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ea8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4ea8:	b510      	push	{r4, lr}
   d4eaa:	4b05      	ldr	r3, [pc, #20]	; (d4ec0 <_ZN9IPAddressC1Ev+0x18>)
   d4eac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4eae:	2211      	movs	r2, #17
   d4eb0:	f840 3b04 	str.w	r3, [r0], #4
   d4eb4:	2100      	movs	r1, #0
   d4eb6:	f001 fccd 	bl	d6854 <memset>
}
   d4eba:	4620      	mov	r0, r4
   d4ebc:	bd10      	pop	{r4, pc}
   d4ebe:	bf00      	nop
   d4ec0:	000d6a0c 	.word	0x000d6a0c

000d4ec4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4ec4:	4603      	mov	r3, r0
   d4ec6:	4a07      	ldr	r2, [pc, #28]	; (d4ee4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4ec8:	b510      	push	{r4, lr}
   d4eca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4ece:	f101 0210 	add.w	r2, r1, #16
   d4ed2:	f851 4b04 	ldr.w	r4, [r1], #4
   d4ed6:	f843 4b04 	str.w	r4, [r3], #4
   d4eda:	4291      	cmp	r1, r2
   d4edc:	d1f9      	bne.n	d4ed2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4ede:	780a      	ldrb	r2, [r1, #0]
   d4ee0:	701a      	strb	r2, [r3, #0]
}
   d4ee2:	bd10      	pop	{r4, pc}
   d4ee4:	000d6a0c 	.word	0x000d6a0c

000d4ee8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4ee8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4eea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4eee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4ef2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4ef6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4efa:	2304      	movs	r3, #4
   d4efc:	6041      	str	r1, [r0, #4]
   d4efe:	7503      	strb	r3, [r0, #20]
}
   d4f00:	bd10      	pop	{r4, pc}

000d4f02 <_ZN9IPAddressaSEPKh>:
{
   d4f02:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4f04:	78cb      	ldrb	r3, [r1, #3]
   d4f06:	9300      	str	r3, [sp, #0]
   d4f08:	788b      	ldrb	r3, [r1, #2]
   d4f0a:	784a      	ldrb	r2, [r1, #1]
   d4f0c:	7809      	ldrb	r1, [r1, #0]
   d4f0e:	f7ff ffeb 	bl	d4ee8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4f12:	b002      	add	sp, #8
   d4f14:	bd10      	pop	{r4, pc}
	...

000d4f18 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f18:	4b01      	ldr	r3, [pc, #4]	; (d4f20 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f1a:	4a02      	ldr	r2, [pc, #8]	; (d4f24 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f1c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4f1e:	4770      	bx	lr
   d4f20:	2003e5b4 	.word	0x2003e5b4
   d4f24:	000d6a18 	.word	0x000d6a18

000d4f28 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4f28:	2300      	movs	r3, #0
   d4f2a:	6840      	ldr	r0, [r0, #4]
   d4f2c:	461a      	mov	r2, r3
   d4f2e:	f7ff be3f 	b.w	d4bb0 <network_connect>

000d4f32 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4f32:	6840      	ldr	r0, [r0, #4]
   d4f34:	2200      	movs	r2, #0
   d4f36:	2102      	movs	r1, #2
   d4f38:	f7ff be4a 	b.w	d4bd0 <network_disconnect>

000d4f3c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4f3c:	2200      	movs	r2, #0
   d4f3e:	6840      	ldr	r0, [r0, #4]
   d4f40:	4611      	mov	r1, r2
   d4f42:	f7ff be3d 	b.w	d4bc0 <network_connecting>

000d4f46 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4f46:	2200      	movs	r2, #0
   d4f48:	6840      	ldr	r0, [r0, #4]
   d4f4a:	4611      	mov	r1, r2
   d4f4c:	f7ff be48 	b.w	d4be0 <network_ready>

000d4f50 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4f50:	2300      	movs	r3, #0
   d4f52:	6840      	ldr	r0, [r0, #4]
   d4f54:	461a      	mov	r2, r3
   d4f56:	4619      	mov	r1, r3
   d4f58:	f7ff be4a 	b.w	d4bf0 <network_on>

000d4f5c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4f5c:	2300      	movs	r3, #0
   d4f5e:	6840      	ldr	r0, [r0, #4]
   d4f60:	461a      	mov	r2, r3
   d4f62:	4619      	mov	r1, r3
   d4f64:	f7ff be4c 	b.w	d4c00 <network_off>

000d4f68 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4f68:	6840      	ldr	r0, [r0, #4]
   d4f6a:	2100      	movs	r1, #0
   d4f6c:	f7ff be70 	b.w	d4c50 <network_is_on>

000d4f70 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4f70:	6840      	ldr	r0, [r0, #4]
   d4f72:	2100      	movs	r1, #0
   d4f74:	f7ff be74 	b.w	d4c60 <network_is_off>

000d4f78 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4f78:	6840      	ldr	r0, [r0, #4]
   d4f7a:	2200      	movs	r2, #0
   d4f7c:	f081 0101 	eor.w	r1, r1, #1
   d4f80:	f7ff be46 	b.w	d4c10 <network_listen>

000d4f84 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4f84:	6840      	ldr	r0, [r0, #4]
   d4f86:	2200      	movs	r2, #0
   d4f88:	f7ff be52 	b.w	d4c30 <network_set_listen_timeout>

000d4f8c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4f8c:	2200      	movs	r2, #0
   d4f8e:	6840      	ldr	r0, [r0, #4]
   d4f90:	4611      	mov	r1, r2
   d4f92:	f7ff be55 	b.w	d4c40 <network_get_listen_timeout>

000d4f96 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4f96:	2200      	movs	r2, #0
   d4f98:	6840      	ldr	r0, [r0, #4]
   d4f9a:	4611      	mov	r1, r2
   d4f9c:	f7ff be40 	b.w	d4c20 <network_listening>

000d4fa0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4fa4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4fa6:	b095      	sub	sp, #84	; 0x54
   d4fa8:	4616      	mov	r6, r2
   d4faa:	460d      	mov	r5, r1
   d4fac:	4607      	mov	r7, r0
    IPAddress addr;
   d4fae:	f7ff ff7b 	bl	d4ea8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4fb2:	4621      	mov	r1, r4
   d4fb4:	2218      	movs	r2, #24
   d4fb6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4fb8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4fba:	f001 fc4b 	bl	d6854 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4fbe:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4fc0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4fc4:	4621      	mov	r1, r4
   d4fc6:	466b      	mov	r3, sp
   d4fc8:	aa0c      	add	r2, sp, #48	; 0x30
   d4fca:	4630      	mov	r0, r6
   d4fcc:	f7ff fd1c 	bl	d4a08 <netdb_getaddrinfo>
    if (!r) {
   d4fd0:	4604      	mov	r4, r0
   d4fd2:	2800      	cmp	r0, #0
   d4fd4:	d146      	bne.n	d5064 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4fd6:	4602      	mov	r2, r0
   d4fd8:	2101      	movs	r1, #1
   d4fda:	6868      	ldr	r0, [r5, #4]
   d4fdc:	f7ff fe00 	bl	d4be0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4fe0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4fe2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4fe4:	4622      	mov	r2, r4
   d4fe6:	6868      	ldr	r0, [r5, #4]
   d4fe8:	f7ff fdfa 	bl	d4be0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4fec:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4fee:	4681      	mov	r9, r0
        bool ok = false;
   d4ff0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4ff2:	2e00      	cmp	r6, #0
   d4ff4:	d036      	beq.n	d5064 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4ff6:	2900      	cmp	r1, #0
   d4ff8:	d134      	bne.n	d5064 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4ffa:	6873      	ldr	r3, [r6, #4]
   d4ffc:	2b02      	cmp	r3, #2
   d4ffe:	d003      	beq.n	d5008 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5000:	2b0a      	cmp	r3, #10
   d5002:	d00b      	beq.n	d501c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5004:	69f6      	ldr	r6, [r6, #28]
   d5006:	e7f4      	b.n	d4ff2 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5008:	f1b8 0f00 	cmp.w	r8, #0
   d500c:	d004      	beq.n	d5018 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d500e:	6971      	ldr	r1, [r6, #20]
   d5010:	4638      	mov	r0, r7
   d5012:	3104      	adds	r1, #4
   d5014:	f7ff ff75 	bl	d4f02 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5018:	4641      	mov	r1, r8
   d501a:	e7f3      	b.n	d5004 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d501c:	f1b9 0f00 	cmp.w	r9, #0
   d5020:	d101      	bne.n	d5026 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5022:	4649      	mov	r1, r9
   d5024:	e7ee      	b.n	d5004 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5026:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5028:	2210      	movs	r2, #16
   d502a:	a801      	add	r0, sp, #4
   d502c:	f001 fc12 	bl	d6854 <memset>
                    a.v = 6;
   d5030:	2306      	movs	r3, #6
   d5032:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5036:	ad01      	add	r5, sp, #4
   d5038:	f104 0308 	add.w	r3, r4, #8
   d503c:	3418      	adds	r4, #24
   d503e:	6818      	ldr	r0, [r3, #0]
   d5040:	6859      	ldr	r1, [r3, #4]
   d5042:	462a      	mov	r2, r5
   d5044:	c203      	stmia	r2!, {r0, r1}
   d5046:	3308      	adds	r3, #8
   d5048:	42a3      	cmp	r3, r4
   d504a:	4615      	mov	r5, r2
   d504c:	d1f7      	bne.n	d503e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d504e:	a901      	add	r1, sp, #4
   d5050:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5052:	ad07      	add	r5, sp, #28
   d5054:	f7ff ff36 	bl	d4ec4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d505a:	1d3c      	adds	r4, r7, #4
   d505c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d505e:	682b      	ldr	r3, [r5, #0]
   d5060:	7023      	strb	r3, [r4, #0]
   d5062:	e7de      	b.n	d5022 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5064:	9800      	ldr	r0, [sp, #0]
   d5066:	f7ff fcc7 	bl	d49f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d506a:	4638      	mov	r0, r7
   d506c:	b015      	add	sp, #84	; 0x54
   d506e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5074 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5074:	4b02      	ldr	r3, [pc, #8]	; (d5080 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5076:	4a03      	ldr	r2, [pc, #12]	; (d5084 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5078:	601a      	str	r2, [r3, #0]
   d507a:	2200      	movs	r2, #0
   d507c:	605a      	str	r2, [r3, #4]

} // spark
   d507e:	4770      	bx	lr
   d5080:	2003e5b8 	.word	0x2003e5b8
   d5084:	000d6a24 	.word	0x000d6a24

000d5088 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d508a:	4606      	mov	r6, r0
   d508c:	460d      	mov	r5, r1
  size_t n = 0;
   d508e:	188f      	adds	r7, r1, r2
   d5090:	2400      	movs	r4, #0
  while (size--) {
   d5092:	42bd      	cmp	r5, r7
   d5094:	d00c      	beq.n	d50b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5096:	6833      	ldr	r3, [r6, #0]
   d5098:	f815 1b01 	ldrb.w	r1, [r5], #1
   d509c:	689b      	ldr	r3, [r3, #8]
   d509e:	4630      	mov	r0, r6
   d50a0:	4798      	blx	r3
     if (chunk>=0)
   d50a2:	1e03      	subs	r3, r0, #0
   d50a4:	db01      	blt.n	d50aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d50a6:	441c      	add	r4, r3
  while (size--) {
   d50a8:	e7f3      	b.n	d5092 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d50aa:	2c00      	cmp	r4, #0
   d50ac:	bf08      	it	eq
   d50ae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d50b0:	4620      	mov	r0, r4
   d50b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d50b4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d50b4:	b513      	push	{r0, r1, r4, lr}
   d50b6:	4604      	mov	r4, r0
    }
   d50b8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d50ba:	b159      	cbz	r1, d50d4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d50bc:	9101      	str	r1, [sp, #4]
   d50be:	f001 fbf5 	bl	d68ac <strlen>
   d50c2:	6823      	ldr	r3, [r4, #0]
   d50c4:	9901      	ldr	r1, [sp, #4]
   d50c6:	68db      	ldr	r3, [r3, #12]
   d50c8:	4602      	mov	r2, r0
   d50ca:	4620      	mov	r0, r4
    }
   d50cc:	b002      	add	sp, #8
   d50ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d50d2:	4718      	bx	r3
    }
   d50d4:	b002      	add	sp, #8
   d50d6:	bd10      	pop	{r4, pc}

000d50d8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d50d8:	b508      	push	{r3, lr}
  return write(str);
   d50da:	f7ff ffeb 	bl	d50b4 <_ZN5Print5writeEPKc>
}
   d50de:	bd08      	pop	{r3, pc}

000d50e0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d50e0:	6803      	ldr	r3, [r0, #0]
   d50e2:	689b      	ldr	r3, [r3, #8]
   d50e4:	4718      	bx	r3

000d50e6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d50e6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d50e8:	210d      	movs	r1, #13
{
   d50ea:	4605      	mov	r5, r0
  size_t n = print('\r');
   d50ec:	f7ff fff8 	bl	d50e0 <_ZN5Print5printEc>
  n += print('\n');
   d50f0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d50f2:	4604      	mov	r4, r0
  n += print('\n');
   d50f4:	4628      	mov	r0, r5
   d50f6:	f7ff fff3 	bl	d50e0 <_ZN5Print5printEc>
  return n;
}
   d50fa:	4420      	add	r0, r4
   d50fc:	bd38      	pop	{r3, r4, r5, pc}

000d50fe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d50fe:	b530      	push	{r4, r5, lr}
   d5100:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5102:	2300      	movs	r3, #0
   d5104:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5108:	2a01      	cmp	r2, #1
   d510a:	bf98      	it	ls
   d510c:	220a      	movls	r2, #10
   d510e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5110:	460d      	mov	r5, r1
   d5112:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5116:	fb01 5312 	mls	r3, r1, r2, r5
   d511a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d511e:	2b09      	cmp	r3, #9
   d5120:	bf94      	ite	ls
   d5122:	3330      	addls	r3, #48	; 0x30
   d5124:	3337      	addhi	r3, #55	; 0x37
   d5126:	b2db      	uxtb	r3, r3
  } while(n);
   d5128:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d512a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d512e:	d9ef      	bls.n	d5110 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5130:	4621      	mov	r1, r4
   d5132:	f7ff ffbf 	bl	d50b4 <_ZN5Print5writeEPKc>
}
   d5136:	b00b      	add	sp, #44	; 0x2c
   d5138:	bd30      	pop	{r4, r5, pc}
	...

000d513c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d513c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5140:	ec55 4b10 	vmov	r4, r5, d0
   d5144:	4606      	mov	r6, r0
   d5146:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5148:	ee10 2a10 	vmov	r2, s0
   d514c:	ee10 0a10 	vmov	r0, s0
   d5150:	462b      	mov	r3, r5
   d5152:	4629      	mov	r1, r5
   d5154:	f001 fabc 	bl	d66d0 <__aeabi_dcmpun>
   d5158:	b140      	cbz	r0, d516c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d515a:	4953      	ldr	r1, [pc, #332]	; (d52a8 <_ZN5Print10printFloatEdh+0x16c>)
   d515c:	4630      	mov	r0, r6
   d515e:	f7ff ffa9 	bl	d50b4 <_ZN5Print5writeEPKc>
   d5162:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d5164:	4650      	mov	r0, sl
   d5166:	b003      	add	sp, #12
   d5168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d516c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d5170:	4b4e      	ldr	r3, [pc, #312]	; (d52ac <_ZN5Print10printFloatEdh+0x170>)
   d5172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5176:	4620      	mov	r0, r4
   d5178:	4649      	mov	r1, r9
   d517a:	f001 faa9 	bl	d66d0 <__aeabi_dcmpun>
   d517e:	b948      	cbnz	r0, d5194 <_ZN5Print10printFloatEdh+0x58>
   d5180:	4b4a      	ldr	r3, [pc, #296]	; (d52ac <_ZN5Print10printFloatEdh+0x170>)
   d5182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5186:	4620      	mov	r0, r4
   d5188:	4649      	mov	r1, r9
   d518a:	f001 fa83 	bl	d6694 <__aeabi_dcmple>
   d518e:	b908      	cbnz	r0, d5194 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d5190:	4947      	ldr	r1, [pc, #284]	; (d52b0 <_ZN5Print10printFloatEdh+0x174>)
   d5192:	e7e3      	b.n	d515c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5194:	4b47      	ldr	r3, [pc, #284]	; (d52b4 <_ZN5Print10printFloatEdh+0x178>)
   d5196:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d519a:	4620      	mov	r0, r4
   d519c:	4629      	mov	r1, r5
   d519e:	f001 fa8d 	bl	d66bc <__aeabi_dcmpgt>
   d51a2:	b108      	cbz	r0, d51a8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d51a4:	4944      	ldr	r1, [pc, #272]	; (d52b8 <_ZN5Print10printFloatEdh+0x17c>)
   d51a6:	e7d9      	b.n	d515c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d51a8:	4b44      	ldr	r3, [pc, #272]	; (d52bc <_ZN5Print10printFloatEdh+0x180>)
   d51aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d51ae:	4620      	mov	r0, r4
   d51b0:	4629      	mov	r1, r5
   d51b2:	f001 fa65 	bl	d6680 <__aeabi_dcmplt>
   d51b6:	2800      	cmp	r0, #0
   d51b8:	d1f4      	bne.n	d51a4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d51ba:	2200      	movs	r2, #0
   d51bc:	2300      	movs	r3, #0
   d51be:	4620      	mov	r0, r4
   d51c0:	4629      	mov	r1, r5
   d51c2:	f001 fa5d 	bl	d6680 <__aeabi_dcmplt>
   d51c6:	b1d0      	cbz	r0, d51fe <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d51c8:	212d      	movs	r1, #45	; 0x2d
   d51ca:	4630      	mov	r0, r6
   d51cc:	f7ff ff88 	bl	d50e0 <_ZN5Print5printEc>
     number = -number;
   d51d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d51d4:	4682      	mov	sl, r0
     number = -number;
   d51d6:	461d      	mov	r5, r3
  double rounding = 0.5;
   d51d8:	4939      	ldr	r1, [pc, #228]	; (d52c0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d51da:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d52c8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d51de:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d51e2:	2000      	movs	r0, #0
    rounding /= 10.0;
   d51e4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d51e8:	fa5f f38b 	uxtb.w	r3, fp
   d51ec:	429f      	cmp	r7, r3
   d51ee:	d908      	bls.n	d5202 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d51f0:	4642      	mov	r2, r8
   d51f2:	464b      	mov	r3, r9
   d51f4:	f001 f8fc 	bl	d63f0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d51f8:	f10b 0b01 	add.w	fp, fp, #1
   d51fc:	e7f4      	b.n	d51e8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d51fe:	4682      	mov	sl, r0
   d5200:	e7ea      	b.n	d51d8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d5202:	4622      	mov	r2, r4
   d5204:	462b      	mov	r3, r5
   d5206:	f000 fe13 	bl	d5e30 <__adddf3>
   d520a:	460d      	mov	r5, r1
   d520c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d520e:	f001 fa9d 	bl	d674c <__aeabi_d2uiz>
   d5212:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d5214:	f000 ff48 	bl	d60a8 <__aeabi_ui2d>
   d5218:	4602      	mov	r2, r0
   d521a:	460b      	mov	r3, r1
   d521c:	4620      	mov	r0, r4
   d521e:	4629      	mov	r1, r5
   d5220:	f000 fe04 	bl	d5e2c <__aeabi_dsub>
        return printNumber(val, base) + t;
   d5224:	220a      	movs	r2, #10
   d5226:	4604      	mov	r4, r0
   d5228:	460d      	mov	r5, r1
   d522a:	4630      	mov	r0, r6
   d522c:	4641      	mov	r1, r8
   d522e:	f7ff ff66 	bl	d50fe <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d5232:	4482      	add	sl, r0
  if (digits > 0) {
   d5234:	b127      	cbz	r7, d5240 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d5236:	4923      	ldr	r1, [pc, #140]	; (d52c4 <_ZN5Print10printFloatEdh+0x188>)
   d5238:	4630      	mov	r0, r6
   d523a:	f7ff ff3b 	bl	d50b4 <_ZN5Print5writeEPKc>
    n += print(".");
   d523e:	4482      	add	sl, r0
    remainder *= 10.0;
   d5240:	f8df 9084 	ldr.w	r9, [pc, #132]	; d52c8 <_ZN5Print10printFloatEdh+0x18c>
   d5244:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d5248:	3f01      	subs	r7, #1
   d524a:	b2ff      	uxtb	r7, r7
   d524c:	2fff      	cmp	r7, #255	; 0xff
   d524e:	d089      	beq.n	d5164 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d5250:	4642      	mov	r2, r8
   d5252:	464b      	mov	r3, r9
   d5254:	4620      	mov	r0, r4
   d5256:	4629      	mov	r1, r5
   d5258:	f000 ffa0 	bl	d619c <__aeabi_dmul>
   d525c:	4604      	mov	r4, r0
   d525e:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d5260:	f001 fa4c 	bl	d66fc <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d5264:	f1b0 0b00 	subs.w	fp, r0, #0
   d5268:	da1a      	bge.n	d52a0 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d526a:	212d      	movs	r1, #45	; 0x2d
   d526c:	4630      	mov	r0, r6
   d526e:	f7ff ff37 	bl	d50e0 <_ZN5Print5printEc>
            val = -n;
   d5272:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d5276:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d5278:	220a      	movs	r2, #10
   d527a:	4630      	mov	r0, r6
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	f7ff ff3e 	bl	d50fe <_ZN5Print11printNumberEmh>
   d5282:	9b01      	ldr	r3, [sp, #4]
   d5284:	4418      	add	r0, r3
    n += print(toPrint);
   d5286:	4482      	add	sl, r0
    remainder -= toPrint;
   d5288:	4658      	mov	r0, fp
   d528a:	f000 ff1d 	bl	d60c8 <__aeabi_i2d>
   d528e:	4602      	mov	r2, r0
   d5290:	460b      	mov	r3, r1
   d5292:	4620      	mov	r0, r4
   d5294:	4629      	mov	r1, r5
   d5296:	f000 fdc9 	bl	d5e2c <__aeabi_dsub>
   d529a:	4604      	mov	r4, r0
   d529c:	460d      	mov	r5, r1
  while (digits-- > 0)
   d529e:	e7d3      	b.n	d5248 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d52a0:	4659      	mov	r1, fp
        size_t t = 0;
   d52a2:	2300      	movs	r3, #0
   d52a4:	e7e8      	b.n	d5278 <_ZN5Print10printFloatEdh+0x13c>
   d52a6:	bf00      	nop
   d52a8:	000d6a58 	.word	0x000d6a58
   d52ac:	7fefffff 	.word	0x7fefffff
   d52b0:	000d6a5c 	.word	0x000d6a5c
   d52b4:	41efffff 	.word	0x41efffff
   d52b8:	000d6a60 	.word	0x000d6a60
   d52bc:	c1efffff 	.word	0xc1efffff
   d52c0:	3fe00000 	.word	0x3fe00000
   d52c4:	000d6a64 	.word	0x000d6a64
   d52c8:	40240000 	.word	0x40240000

000d52cc <_ZN5Print5printEfi>:
{
   d52cc:	b538      	push	{r3, r4, r5, lr}
   d52ce:	4604      	mov	r4, r0
   d52d0:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d52d4:	b2cd      	uxtb	r5, r1
   d52d6:	f000 ff09 	bl	d60ec <__aeabi_f2d>
   d52da:	ec41 0b10 	vmov	d0, r0, r1
   d52de:	4629      	mov	r1, r5
   d52e0:	4620      	mov	r0, r4
}
   d52e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d52e6:	f7ff bf29 	b.w	d513c <_ZN5Print10printFloatEdh>

000d52ea <_ZN5Print7printlnEdi>:
{
   d52ea:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d52ec:	b2c9      	uxtb	r1, r1
{
   d52ee:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d52f0:	f7ff ff24 	bl	d513c <_ZN5Print10printFloatEdh>
   d52f4:	4604      	mov	r4, r0
  n += println();
   d52f6:	4628      	mov	r0, r5
   d52f8:	f7ff fef5 	bl	d50e6 <_ZN5Print7printlnEv>
}
   d52fc:	4420      	add	r0, r4
   d52fe:	bd38      	pop	{r3, r4, r5, pc}

000d5300 <_ZN5Print7printlnEfi>:
{
   d5300:	b538      	push	{r3, r4, r5, lr}
   d5302:	4604      	mov	r4, r0
   d5304:	ee10 0a10 	vmov	r0, s0
   d5308:	460d      	mov	r5, r1
    return println((double)num, digits);
   d530a:	f000 feef 	bl	d60ec <__aeabi_f2d>
   d530e:	ec41 0b10 	vmov	d0, r0, r1
   d5312:	4629      	mov	r1, r5
   d5314:	4620      	mov	r0, r4
}
   d5316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d531a:	f7ff bfe6 	b.w	d52ea <_ZN5Print7printlnEdi>
	...

000d5320 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d5320:	4b01      	ldr	r3, [pc, #4]	; (d5328 <_GLOBAL__sub_I_RGB+0x8>)
   d5322:	2200      	movs	r2, #0
   d5324:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d5326:	4770      	bx	lr
   d5328:	2003e5c0 	.word	0x2003e5c0

000d532c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d532c:	b510      	push	{r4, lr}
   d532e:	4604      	mov	r4, r0
   d5330:	4608      	mov	r0, r1
{
    _spi = spi;
   d5332:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5334:	f7ff fb70 	bl	d4a18 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5338:	2300      	movs	r3, #0
   d533a:	6063      	str	r3, [r4, #4]
}
   d533c:	4620      	mov	r0, r4
   d533e:	bd10      	pop	{r4, pc}

000d5340 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5340:	4b05      	ldr	r3, [pc, #20]	; (d5358 <_GLOBAL__sub_I_System+0x18>)
   d5342:	2202      	movs	r2, #2
   d5344:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5346:	4b05      	ldr	r3, [pc, #20]	; (d535c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d5348:	4a05      	ldr	r2, [pc, #20]	; (d5360 <_GLOBAL__sub_I_System+0x20>)
   d534a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d534c:	2000      	movs	r0, #0
   d534e:	6018      	str	r0, [r3, #0]
   d5350:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d5352:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5354:	f7ff bbf0 	b.w	d4b38 <set_system_mode>
   d5358:	2003e5dc 	.word	0x2003e5dc
   d535c:	2003e5d0 	.word	0x2003e5d0
   d5360:	ffff0000 	.word	0xffff0000

000d5364 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5364:	4b02      	ldr	r3, [pc, #8]	; (d5370 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5366:	681a      	ldr	r2, [r3, #0]
   d5368:	4b02      	ldr	r3, [pc, #8]	; (d5374 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d536a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d536c:	4770      	bx	lr
   d536e:	bf00      	nop
   d5370:	2003e4d4 	.word	0x2003e4d4
   d5374:	2003e5e0 	.word	0x2003e5e0

000d5378 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5378:	4770      	bx	lr

000d537a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d537a:	7441      	strb	r1, [r0, #17]
}
   d537c:	4770      	bx	lr

000d537e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d537e:	4770      	bx	lr

000d5380 <_ZN11USARTSerial17availableForWriteEv>:
{
   d5380:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5382:	7c00      	ldrb	r0, [r0, #16]
   d5384:	f7ff fb90 	bl	d4aa8 <hal_usart_available_data_for_write>
}
   d5388:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d538c:	bd08      	pop	{r3, pc}

000d538e <_ZN11USARTSerial9availableEv>:
{
   d538e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5390:	7c00      	ldrb	r0, [r0, #16]
   d5392:	f7ff fb61 	bl	d4a58 <hal_usart_available>
}
   d5396:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d539a:	bd08      	pop	{r3, pc}

000d539c <_ZN11USARTSerial4peekEv>:
{
   d539c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d539e:	7c00      	ldrb	r0, [r0, #16]
   d53a0:	f7ff fb6a 	bl	d4a78 <hal_usart_peek>
}
   d53a4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d53a8:	bd08      	pop	{r3, pc}

000d53aa <_ZN11USARTSerial4readEv>:
{
   d53aa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d53ac:	7c00      	ldrb	r0, [r0, #16]
   d53ae:	f7ff fb5b 	bl	d4a68 <hal_usart_read>
}
   d53b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d53b6:	bd08      	pop	{r3, pc}

000d53b8 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d53b8:	7c00      	ldrb	r0, [r0, #16]
   d53ba:	f7ff bb65 	b.w	d4a88 <hal_usart_flush>

000d53be <_ZN11USARTSerial5writeEh>:
{
   d53be:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d53c0:	7c45      	ldrb	r5, [r0, #17]
{
   d53c2:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d53c4:	b12d      	cbz	r5, d53d2 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d53c6:	7c20      	ldrb	r0, [r4, #16]
}
   d53c8:	b003      	add	sp, #12
   d53ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d53ce:	f7ff bb3b 	b.w	d4a48 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d53d2:	7c00      	ldrb	r0, [r0, #16]
   d53d4:	9101      	str	r1, [sp, #4]
   d53d6:	f7ff fb67 	bl	d4aa8 <hal_usart_available_data_for_write>
   d53da:	2800      	cmp	r0, #0
   d53dc:	9901      	ldr	r1, [sp, #4]
   d53de:	dcf2      	bgt.n	d53c6 <_ZN11USARTSerial5writeEh+0x8>
}
   d53e0:	4628      	mov	r0, r5
   d53e2:	b003      	add	sp, #12
   d53e4:	bd30      	pop	{r4, r5, pc}

000d53e6 <_ZN11USARTSerialD0Ev>:
   d53e6:	b510      	push	{r4, lr}
   d53e8:	2114      	movs	r1, #20
   d53ea:	4604      	mov	r4, r0
   d53ec:	f000 fa32 	bl	d5854 <_ZdlPvj>
   d53f0:	4620      	mov	r0, r4
   d53f2:	bd10      	pop	{r4, pc}

000d53f4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d53f4:	b510      	push	{r4, lr}
   d53f6:	f04f 0c00 	mov.w	ip, #0
   d53fa:	4604      	mov	r4, r0
   d53fc:	4608      	mov	r0, r1
   d53fe:	4611      	mov	r1, r2
   d5400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5404:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5408:	4a04      	ldr	r2, [pc, #16]	; (d541c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d540a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d540c:	2201      	movs	r2, #1
  _serial = serial;
   d540e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5410:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5412:	461a      	mov	r2, r3
   d5414:	f7ff fb10 	bl	d4a38 <hal_usart_init>
}
   d5418:	4620      	mov	r0, r4
   d541a:	bd10      	pop	{r4, pc}
   d541c:	000d6a8c 	.word	0x000d6a8c

000d5420 <_Z22__fetch_global_Serial1v>:
{
   d5420:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5422:	4c0d      	ldr	r4, [pc, #52]	; (d5458 <_Z22__fetch_global_Serial1v+0x38>)
   d5424:	7821      	ldrb	r1, [r4, #0]
   d5426:	f3bf 8f5b 	dmb	ish
   d542a:	f011 0101 	ands.w	r1, r1, #1
   d542e:	d110      	bne.n	d5452 <_Z22__fetch_global_Serial1v+0x32>
   d5430:	4620      	mov	r0, r4
   d5432:	9101      	str	r1, [sp, #4]
   d5434:	f7fe fe33 	bl	d409e <__cxa_guard_acquire>
   d5438:	9901      	ldr	r1, [sp, #4]
   d543a:	b150      	cbz	r0, d5452 <_Z22__fetch_global_Serial1v+0x32>
   d543c:	4b07      	ldr	r3, [pc, #28]	; (d545c <_Z22__fetch_global_Serial1v+0x3c>)
   d543e:	4a08      	ldr	r2, [pc, #32]	; (d5460 <_Z22__fetch_global_Serial1v+0x40>)
   d5440:	4808      	ldr	r0, [pc, #32]	; (d5464 <_Z22__fetch_global_Serial1v+0x44>)
   d5442:	f7ff ffd7 	bl	d53f4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5446:	4620      	mov	r0, r4
   d5448:	f7fe fe2e 	bl	d40a8 <__cxa_guard_release>
   d544c:	4806      	ldr	r0, [pc, #24]	; (d5468 <_Z22__fetch_global_Serial1v+0x48>)
   d544e:	f001 f9ed 	bl	d682c <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5452:	4804      	ldr	r0, [pc, #16]	; (d5464 <_Z22__fetch_global_Serial1v+0x44>)
   d5454:	b002      	add	sp, #8
   d5456:	bd10      	pop	{r4, pc}
   d5458:	2003e5e4 	.word	0x2003e5e4
   d545c:	2003e66c 	.word	0x2003e66c
   d5460:	2003e5e8 	.word	0x2003e5e8
   d5464:	2003e6f0 	.word	0x2003e6f0
   d5468:	000d537f 	.word	0x000d537f

000d546c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d546c:	7441      	strb	r1, [r0, #17]
}
   d546e:	4770      	bx	lr

000d5470 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5470:	4770      	bx	lr

000d5472 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5472:	4770      	bx	lr

000d5474 <_ZN9USBSerial4readEv>:
{
   d5474:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5476:	2100      	movs	r1, #0
   d5478:	7c00      	ldrb	r0, [r0, #16]
   d547a:	f7ff fb3d 	bl	d4af8 <HAL_USB_USART_Receive_Data>
}
   d547e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5482:	bd08      	pop	{r3, pc}

000d5484 <_ZN9USBSerial4peekEv>:
{
   d5484:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5486:	2101      	movs	r1, #1
   d5488:	7c00      	ldrb	r0, [r0, #16]
   d548a:	f7ff fb35 	bl	d4af8 <HAL_USB_USART_Receive_Data>
}
   d548e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5492:	bd08      	pop	{r3, pc}

000d5494 <_ZN9USBSerial17availableForWriteEv>:
{
   d5494:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5496:	7c00      	ldrb	r0, [r0, #16]
   d5498:	f7ff fb26 	bl	d4ae8 <HAL_USB_USART_Available_Data_For_Write>
}
   d549c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d54a0:	bd08      	pop	{r3, pc}

000d54a2 <_ZN9USBSerial9availableEv>:
{
   d54a2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d54a4:	7c00      	ldrb	r0, [r0, #16]
   d54a6:	f7ff fb17 	bl	d4ad8 <HAL_USB_USART_Available_Data>
}
   d54aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d54ae:	bd08      	pop	{r3, pc}

000d54b0 <_ZN9USBSerial5writeEh>:
{
   d54b0:	b513      	push	{r0, r1, r4, lr}
   d54b2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d54b4:	7c00      	ldrb	r0, [r0, #16]
{
   d54b6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d54b8:	f7ff fb16 	bl	d4ae8 <HAL_USB_USART_Available_Data_For_Write>
   d54bc:	2800      	cmp	r0, #0
   d54be:	9901      	ldr	r1, [sp, #4]
   d54c0:	dc01      	bgt.n	d54c6 <_ZN9USBSerial5writeEh+0x16>
   d54c2:	7c60      	ldrb	r0, [r4, #17]
   d54c4:	b120      	cbz	r0, d54d0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d54c6:	7c20      	ldrb	r0, [r4, #16]
   d54c8:	f7ff fb1e 	bl	d4b08 <HAL_USB_USART_Send_Data>
   d54cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d54d0:	b002      	add	sp, #8
   d54d2:	bd10      	pop	{r4, pc}

000d54d4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d54d4:	7c00      	ldrb	r0, [r0, #16]
   d54d6:	f7ff bb1f 	b.w	d4b18 <HAL_USB_USART_Flush_Data>

000d54da <_ZN9USBSerialD0Ev>:
   d54da:	b510      	push	{r4, lr}
   d54dc:	2114      	movs	r1, #20
   d54de:	4604      	mov	r4, r0
   d54e0:	f000 f9b8 	bl	d5854 <_ZdlPvj>
   d54e4:	4620      	mov	r0, r4
   d54e6:	bd10      	pop	{r4, pc}

000d54e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d54e8:	b510      	push	{r4, lr}
   d54ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d54ee:	4604      	mov	r4, r0
   d54f0:	4608      	mov	r0, r1
   d54f2:	2100      	movs	r1, #0
   d54f4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d54f8:	4b04      	ldr	r3, [pc, #16]	; (d550c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d54fa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d54fc:	2301      	movs	r3, #1
  _serial = serial;
   d54fe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5500:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5502:	4611      	mov	r1, r2
   d5504:	f7ff fad8 	bl	d4ab8 <HAL_USB_USART_Init>
}
   d5508:	4620      	mov	r0, r4
   d550a:	bd10      	pop	{r4, pc}
   d550c:	000d6abc 	.word	0x000d6abc

000d5510 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5510:	7c00      	ldrb	r0, [r0, #16]
   d5512:	2200      	movs	r2, #0
   d5514:	f7ff bad8 	b.w	d4ac8 <HAL_USB_USART_Begin>

000d5518 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   d5518:	7c00      	ldrb	r0, [r0, #16]
   d551a:	f7ff bb05 	b.w	d4b28 <HAL_USB_USART_Is_Connected>

000d551e <_Z19acquireSerialBufferv>:
{
   d551e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5520:	2214      	movs	r2, #20
{
   d5522:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5524:	2100      	movs	r1, #0
   d5526:	f001 f995 	bl	d6854 <memset>
}
   d552a:	4620      	mov	r0, r4
   d552c:	bd10      	pop	{r4, pc}
	...

000d5530 <_Z16_fetch_usbserialv>:
{
   d5530:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5532:	4c0f      	ldr	r4, [pc, #60]	; (d5570 <_Z16_fetch_usbserialv+0x40>)
{
   d5534:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5536:	a803      	add	r0, sp, #12
   d5538:	f7ff fff1 	bl	d551e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d553c:	7821      	ldrb	r1, [r4, #0]
   d553e:	f3bf 8f5b 	dmb	ish
   d5542:	f011 0101 	ands.w	r1, r1, #1
   d5546:	d10f      	bne.n	d5568 <_Z16_fetch_usbserialv+0x38>
   d5548:	4620      	mov	r0, r4
   d554a:	9101      	str	r1, [sp, #4]
   d554c:	f7fe fda7 	bl	d409e <__cxa_guard_acquire>
   d5550:	9901      	ldr	r1, [sp, #4]
   d5552:	b148      	cbz	r0, d5568 <_Z16_fetch_usbserialv+0x38>
   d5554:	aa03      	add	r2, sp, #12
   d5556:	4807      	ldr	r0, [pc, #28]	; (d5574 <_Z16_fetch_usbserialv+0x44>)
   d5558:	f7ff ffc6 	bl	d54e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d555c:	4620      	mov	r0, r4
   d555e:	f7fe fda3 	bl	d40a8 <__cxa_guard_release>
   d5562:	4805      	ldr	r0, [pc, #20]	; (d5578 <_Z16_fetch_usbserialv+0x48>)
   d5564:	f001 f962 	bl	d682c <atexit>
	return _usbserial;
}
   d5568:	4802      	ldr	r0, [pc, #8]	; (d5574 <_Z16_fetch_usbserialv+0x44>)
   d556a:	b008      	add	sp, #32
   d556c:	bd10      	pop	{r4, pc}
   d556e:	bf00      	nop
   d5570:	2003e704 	.word	0x2003e704
   d5574:	2003e708 	.word	0x2003e708
   d5578:	000d5471 	.word	0x000d5471

000d557c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d557c:	2200      	movs	r2, #0
   d557e:	6840      	ldr	r0, [r0, #4]
   d5580:	4611      	mov	r1, r2
   d5582:	f7ff bb2d 	b.w	d4be0 <network_ready>

000d5586 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5586:	2200      	movs	r2, #0
   d5588:	6840      	ldr	r0, [r0, #4]
   d558a:	4611      	mov	r1, r2
   d558c:	f7ff bb48 	b.w	d4c20 <network_listening>

000d5590 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5590:	2200      	movs	r2, #0
   d5592:	6840      	ldr	r0, [r0, #4]
   d5594:	4611      	mov	r1, r2
   d5596:	f7ff bb53 	b.w	d4c40 <network_get_listen_timeout>

000d559a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d559a:	6840      	ldr	r0, [r0, #4]
   d559c:	2200      	movs	r2, #0
   d559e:	f7ff bb47 	b.w	d4c30 <network_set_listen_timeout>

000d55a2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d55a2:	6840      	ldr	r0, [r0, #4]
   d55a4:	2200      	movs	r2, #0
   d55a6:	f081 0101 	eor.w	r1, r1, #1
   d55aa:	f7ff bb31 	b.w	d4c10 <network_listen>

000d55ae <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d55ae:	2300      	movs	r3, #0
   d55b0:	6840      	ldr	r0, [r0, #4]
   d55b2:	461a      	mov	r2, r3
   d55b4:	4619      	mov	r1, r3
   d55b6:	f7ff bb23 	b.w	d4c00 <network_off>

000d55ba <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d55ba:	2300      	movs	r3, #0
   d55bc:	6840      	ldr	r0, [r0, #4]
   d55be:	461a      	mov	r2, r3
   d55c0:	4619      	mov	r1, r3
   d55c2:	f7ff bb15 	b.w	d4bf0 <network_on>

000d55c6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d55c6:	2200      	movs	r2, #0
   d55c8:	6840      	ldr	r0, [r0, #4]
   d55ca:	4611      	mov	r1, r2
   d55cc:	f7ff baf8 	b.w	d4bc0 <network_connecting>

000d55d0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d55d0:	6840      	ldr	r0, [r0, #4]
   d55d2:	2200      	movs	r2, #0
   d55d4:	2102      	movs	r1, #2
   d55d6:	f7ff bafb 	b.w	d4bd0 <network_disconnect>

000d55da <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d55da:	2300      	movs	r3, #0
   d55dc:	6840      	ldr	r0, [r0, #4]
   d55de:	461a      	mov	r2, r3
   d55e0:	f7ff bae6 	b.w	d4bb0 <network_connect>

000d55e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d55e4:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d55e6:	2204      	movs	r2, #4
   d55e8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d55ea:	4a02      	ldr	r2, [pc, #8]	; (d55f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d55ec:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d55ee:	4770      	bx	lr
   d55f0:	2003e71c 	.word	0x2003e71c
   d55f4:	000d6aec 	.word	0x000d6aec

000d55f8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d55f8:	4b01      	ldr	r3, [pc, #4]	; (d5600 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d55fa:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d55fc:	4770      	bx	lr
   d55fe:	bf00      	nop
   d5600:	2003e4dc 	.word	0x2003e4dc

000d5604 <serialEventRun>:
{
   d5604:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5606:	4b0b      	ldr	r3, [pc, #44]	; (d5634 <serialEventRun+0x30>)
   d5608:	b143      	cbz	r3, d561c <serialEventRun+0x18>
   d560a:	f7ff ff91 	bl	d5530 <_Z16_fetch_usbserialv>
   d560e:	6803      	ldr	r3, [r0, #0]
   d5610:	691b      	ldr	r3, [r3, #16]
   d5612:	4798      	blx	r3
   d5614:	2800      	cmp	r0, #0
   d5616:	dd01      	ble.n	d561c <serialEventRun+0x18>
        serialEvent();
   d5618:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d561c:	4b06      	ldr	r3, [pc, #24]	; (d5638 <serialEventRun+0x34>)
   d561e:	b143      	cbz	r3, d5632 <serialEventRun+0x2e>
   d5620:	f7ff fefe 	bl	d5420 <_Z22__fetch_global_Serial1v>
   d5624:	6803      	ldr	r3, [r0, #0]
   d5626:	691b      	ldr	r3, [r3, #16]
   d5628:	4798      	blx	r3
   d562a:	2800      	cmp	r0, #0
   d562c:	dd01      	ble.n	d5632 <serialEventRun+0x2e>
        serialEvent1();
   d562e:	f3af 8000 	nop.w
}
   d5632:	bd08      	pop	{r3, pc}
	...

000d563c <_post_loop>:
{
   d563c:	b508      	push	{r3, lr}
	serialEventRun();
   d563e:	f7ff ffe1 	bl	d5604 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5642:	f7ff f959 	bl	d48f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5646:	4b01      	ldr	r3, [pc, #4]	; (d564c <_post_loop+0x10>)
   d5648:	6018      	str	r0, [r3, #0]
}
   d564a:	bd08      	pop	{r3, pc}
   d564c:	2003e738 	.word	0x2003e738

000d5650 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5650:	4805      	ldr	r0, [pc, #20]	; (d5668 <_Z33system_initialize_user_backup_ramv+0x18>)
   d5652:	4a06      	ldr	r2, [pc, #24]	; (d566c <_Z33system_initialize_user_backup_ramv+0x1c>)
   d5654:	4906      	ldr	r1, [pc, #24]	; (d5670 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d5656:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5658:	1a12      	subs	r2, r2, r0
   d565a:	f001 f8ed 	bl	d6838 <memcpy>
    __backup_sram_signature = signature;
   d565e:	4b05      	ldr	r3, [pc, #20]	; (d5674 <_Z33system_initialize_user_backup_ramv+0x24>)
   d5660:	4a05      	ldr	r2, [pc, #20]	; (d5678 <_Z33system_initialize_user_backup_ramv+0x28>)
   d5662:	601a      	str	r2, [r3, #0]
}
   d5664:	bd08      	pop	{r3, pc}
   d5666:	bf00      	nop
   d5668:	2003f400 	.word	0x2003f400
   d566c:	2003f404 	.word	0x2003f404
   d5670:	000d6ba0 	.word	0x000d6ba0
   d5674:	2003f400 	.word	0x2003f400
   d5678:	9a271c1e 	.word	0x9a271c1e

000d567c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d567c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d567e:	2300      	movs	r3, #0
   d5680:	9300      	str	r3, [sp, #0]
   d5682:	461a      	mov	r2, r3
   d5684:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5688:	f7ff fa78 	bl	d4b7c <system_ctrl_set_result>
}
   d568c:	b003      	add	sp, #12
   d568e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5694 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5694:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5696:	8843      	ldrh	r3, [r0, #2]
   d5698:	2b0a      	cmp	r3, #10
   d569a:	d008      	beq.n	d56ae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d569c:	2b50      	cmp	r3, #80	; 0x50
   d569e:	d10b      	bne.n	d56b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d56a0:	4b09      	ldr	r3, [pc, #36]	; (d56c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d56a2:	681b      	ldr	r3, [r3, #0]
   d56a4:	b14b      	cbz	r3, d56ba <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d56a6:	b003      	add	sp, #12
   d56a8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d56ac:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d56ae:	f7ff ffe5 	bl	d567c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d56b2:	b003      	add	sp, #12
   d56b4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d56b8:	2300      	movs	r3, #0
   d56ba:	9300      	str	r3, [sp, #0]
   d56bc:	461a      	mov	r2, r3
   d56be:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d56c2:	f7ff fa5b 	bl	d4b7c <system_ctrl_set_result>
}
   d56c6:	e7f4      	b.n	d56b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d56c8:	2003e728 	.word	0x2003e728

000d56cc <module_user_init_hook>:
{
   d56cc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d56ce:	4812      	ldr	r0, [pc, #72]	; (d5718 <module_user_init_hook+0x4c>)
   d56d0:	2100      	movs	r1, #0
   d56d2:	f7ff fae5 	bl	d4ca0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d56d6:	4b11      	ldr	r3, [pc, #68]	; (d571c <module_user_init_hook+0x50>)
   d56d8:	681a      	ldr	r2, [r3, #0]
   d56da:	4b11      	ldr	r3, [pc, #68]	; (d5720 <module_user_init_hook+0x54>)
   d56dc:	429a      	cmp	r2, r3
   d56de:	4b11      	ldr	r3, [pc, #68]	; (d5724 <module_user_init_hook+0x58>)
   d56e0:	bf0c      	ite	eq
   d56e2:	2201      	moveq	r2, #1
   d56e4:	2200      	movne	r2, #0
   d56e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d56e8:	d001      	beq.n	d56ee <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d56ea:	f7ff ffb1 	bl	d5650 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d56ee:	f7ff f8fb 	bl	d48e8 <HAL_RNG_GetRandomNumber>
   d56f2:	4604      	mov	r4, r0
    srand(seed);
   d56f4:	f001 f8b6 	bl	d6864 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d56f8:	4b0b      	ldr	r3, [pc, #44]	; (d5728 <module_user_init_hook+0x5c>)
   d56fa:	b113      	cbz	r3, d5702 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d56fc:	4620      	mov	r0, r4
   d56fe:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5702:	2100      	movs	r1, #0
   d5704:	4808      	ldr	r0, [pc, #32]	; (d5728 <module_user_init_hook+0x5c>)
   d5706:	f7ff fa4b 	bl	d4ba0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d570a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d570e:	4807      	ldr	r0, [pc, #28]	; (d572c <module_user_init_hook+0x60>)
   d5710:	2100      	movs	r1, #0
   d5712:	f7ff ba29 	b.w	d4b68 <system_ctrl_set_app_request_handler>
   d5716:	bf00      	nop
   d5718:	000d55f9 	.word	0x000d55f9
   d571c:	2003f400 	.word	0x2003f400
   d5720:	9a271c1e 	.word	0x9a271c1e
   d5724:	2003e724 	.word	0x2003e724
   d5728:	00000000 	.word	0x00000000
   d572c:	000d5695 	.word	0x000d5695

000d5730 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5730:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5732:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5734:	d902      	bls.n	d573c <pinAvailable+0xc>
    return false;
   d5736:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5738:	b002      	add	sp, #8
   d573a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d573c:	f1a0 030b 	sub.w	r3, r0, #11
   d5740:	2b02      	cmp	r3, #2
   d5742:	d81a      	bhi.n	d577a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5744:	4c17      	ldr	r4, [pc, #92]	; (d57a4 <pinAvailable+0x74>)
   d5746:	7821      	ldrb	r1, [r4, #0]
   d5748:	f3bf 8f5b 	dmb	ish
   d574c:	f011 0101 	ands.w	r1, r1, #1
   d5750:	d10b      	bne.n	d576a <pinAvailable+0x3a>
   d5752:	4620      	mov	r0, r4
   d5754:	9101      	str	r1, [sp, #4]
   d5756:	f7fe fca2 	bl	d409e <__cxa_guard_acquire>
   d575a:	9901      	ldr	r1, [sp, #4]
   d575c:	b128      	cbz	r0, d576a <pinAvailable+0x3a>
   d575e:	4812      	ldr	r0, [pc, #72]	; (d57a8 <pinAvailable+0x78>)
   d5760:	f7ff fde4 	bl	d532c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5764:	4620      	mov	r0, r4
   d5766:	f7fe fc9f 	bl	d40a8 <__cxa_guard_release>
   d576a:	4b0f      	ldr	r3, [pc, #60]	; (d57a8 <pinAvailable+0x78>)
   d576c:	7818      	ldrb	r0, [r3, #0]
   d576e:	f7ff f95b 	bl	d4a28 <hal_spi_is_enabled>
   d5772:	2800      	cmp	r0, #0
   d5774:	d1df      	bne.n	d5736 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5776:	2001      	movs	r0, #1
   d5778:	e7de      	b.n	d5738 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d577a:	2801      	cmp	r0, #1
   d577c:	d809      	bhi.n	d5792 <pinAvailable+0x62>
   d577e:	f000 f845 	bl	d580c <_Z19__fetch_global_Wirev>
   d5782:	2100      	movs	r1, #0
   d5784:	7c00      	ldrb	r0, [r0, #16]
   d5786:	f7ff f917 	bl	d49b8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d578a:	f080 0001 	eor.w	r0, r0, #1
   d578e:	b2c0      	uxtb	r0, r0
   d5790:	e7d2      	b.n	d5738 <pinAvailable+0x8>
   d5792:	3809      	subs	r0, #9
   d5794:	2801      	cmp	r0, #1
   d5796:	d8ee      	bhi.n	d5776 <pinAvailable+0x46>
   d5798:	f7ff fe42 	bl	d5420 <_Z22__fetch_global_Serial1v>
   d579c:	7c00      	ldrb	r0, [r0, #16]
   d579e:	f7ff f97b 	bl	d4a98 <hal_usart_is_enabled>
   d57a2:	e7f2      	b.n	d578a <pinAvailable+0x5a>
   d57a4:	2003e72c 	.word	0x2003e72c
   d57a8:	2003e730 	.word	0x2003e730

000d57ac <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d57ac:	280d      	cmp	r0, #13
{
   d57ae:	b510      	push	{r4, lr}
   d57b0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d57b2:	bf9c      	itt	ls
   d57b4:	340e      	addls	r4, #14
   d57b6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d57b8:	4620      	mov	r0, r4
   d57ba:	f7ff ffb9 	bl	d5730 <pinAvailable>
   d57be:	b150      	cbz	r0, d57d6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d57c0:	2103      	movs	r1, #3
   d57c2:	4620      	mov	r0, r4
   d57c4:	f7ff f8a8 	bl	d4918 <HAL_Validate_Pin_Function>
   d57c8:	2803      	cmp	r0, #3
   d57ca:	d104      	bne.n	d57d6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d57cc:	4620      	mov	r0, r4
}
   d57ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d57d2:	f7ff b8a9 	b.w	d4928 <hal_adc_read>
}
   d57d6:	2000      	movs	r0, #0
   d57d8:	bd10      	pop	{r4, pc}

000d57da <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d57da:	4770      	bx	lr

000d57dc <_Z17acquireWireBufferv>:
{
   d57dc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d57de:	2300      	movs	r3, #0
   d57e0:	2520      	movs	r5, #32
   d57e2:	8043      	strh	r3, [r0, #2]
   d57e4:	2314      	movs	r3, #20
{
   d57e6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d57e8:	8003      	strh	r3, [r0, #0]
   d57ea:	6085      	str	r5, [r0, #8]
   d57ec:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d57ee:	4906      	ldr	r1, [pc, #24]	; (d5808 <_Z17acquireWireBufferv+0x2c>)
   d57f0:	4628      	mov	r0, r5
   d57f2:	f000 f831 	bl	d5858 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d57f6:	4904      	ldr	r1, [pc, #16]	; (d5808 <_Z17acquireWireBufferv+0x2c>)
	};
   d57f8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d57fa:	4628      	mov	r0, r5
   d57fc:	f000 f82c 	bl	d5858 <_ZnajRKSt9nothrow_t>
	};
   d5800:	60e0      	str	r0, [r4, #12]
}
   d5802:	4620      	mov	r0, r4
   d5804:	bd38      	pop	{r3, r4, r5, pc}
   d5806:	bf00      	nop
   d5808:	000d6b20 	.word	0x000d6b20

000d580c <_Z19__fetch_global_Wirev>:
{
   d580c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d580e:	4d0e      	ldr	r5, [pc, #56]	; (d5848 <_Z19__fetch_global_Wirev+0x3c>)
   d5810:	7829      	ldrb	r1, [r5, #0]
   d5812:	f3bf 8f5b 	dmb	ish
   d5816:	f011 0401 	ands.w	r4, r1, #1
{
   d581a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d581c:	d111      	bne.n	d5842 <_Z19__fetch_global_Wirev+0x36>
   d581e:	4628      	mov	r0, r5
   d5820:	f7fe fc3d 	bl	d409e <__cxa_guard_acquire>
   d5824:	b168      	cbz	r0, d5842 <_Z19__fetch_global_Wirev+0x36>
   d5826:	a801      	add	r0, sp, #4
   d5828:	f7ff ffd8 	bl	d57dc <_Z17acquireWireBufferv>
   d582c:	aa01      	add	r2, sp, #4
   d582e:	4621      	mov	r1, r4
   d5830:	4806      	ldr	r0, [pc, #24]	; (d584c <_Z19__fetch_global_Wirev+0x40>)
   d5832:	f7ff fab3 	bl	d4d9c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5836:	4628      	mov	r0, r5
   d5838:	f7fe fc36 	bl	d40a8 <__cxa_guard_release>
   d583c:	4804      	ldr	r0, [pc, #16]	; (d5850 <_Z19__fetch_global_Wirev+0x44>)
   d583e:	f000 fff5 	bl	d682c <atexit>
	return wire;
}
   d5842:	4802      	ldr	r0, [pc, #8]	; (d584c <_Z19__fetch_global_Wirev+0x40>)
   d5844:	b007      	add	sp, #28
   d5846:	bd30      	pop	{r4, r5, pc}
   d5848:	2003e73c 	.word	0x2003e73c
   d584c:	2003e740 	.word	0x2003e740
   d5850:	000d57db 	.word	0x000d57db

000d5854 <_ZdlPvj>:
   d5854:	f7fe bc21 	b.w	d409a <_ZdlPv>

000d5858 <_ZnajRKSt9nothrow_t>:
   d5858:	f7fe bc1d 	b.w	d4096 <_Znaj>
   d585c:	0000      	movs	r0, r0
	...

000d5860 <atan>:
   d5860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5864:	ec55 4b10 	vmov	r4, r5, d0
   d5868:	4bcd      	ldr	r3, [pc, #820]	; (d5ba0 <atan+0x340>)
   d586a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   d586e:	429e      	cmp	r6, r3
   d5870:	46aa      	mov	sl, r5
   d5872:	dd0d      	ble.n	d5890 <atan+0x30>
   d5874:	4bcb      	ldr	r3, [pc, #812]	; (d5ba4 <atan+0x344>)
   d5876:	429e      	cmp	r6, r3
   d5878:	f300 80b5 	bgt.w	d59e6 <atan+0x186>
   d587c:	f000 80b0 	beq.w	d59e0 <atan+0x180>
   d5880:	f1ba 0f00 	cmp.w	sl, #0
   d5884:	f340 80f6 	ble.w	d5a74 <atan+0x214>
   d5888:	ed9f 0ba9 	vldr	d0, [pc, #676]	; d5b30 <atan+0x2d0>
   d588c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5890:	4bc5      	ldr	r3, [pc, #788]	; (d5ba8 <atan+0x348>)
   d5892:	429e      	cmp	r6, r3
   d5894:	f300 80c3 	bgt.w	d5a1e <atan+0x1be>
   d5898:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   d589c:	429e      	cmp	r6, r3
   d589e:	f340 80ac 	ble.w	d59fa <atan+0x19a>
   d58a2:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   d58a6:	4622      	mov	r2, r4
   d58a8:	462b      	mov	r3, r5
   d58aa:	4620      	mov	r0, r4
   d58ac:	4629      	mov	r1, r5
   d58ae:	f000 fc75 	bl	d619c <__aeabi_dmul>
   d58b2:	4602      	mov	r2, r0
   d58b4:	460b      	mov	r3, r1
   d58b6:	4680      	mov	r8, r0
   d58b8:	4689      	mov	r9, r1
   d58ba:	f000 fc6f 	bl	d619c <__aeabi_dmul>
   d58be:	a39e      	add	r3, pc, #632	; (adr r3, d5b38 <atan+0x2d8>)
   d58c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d58c4:	4606      	mov	r6, r0
   d58c6:	460f      	mov	r7, r1
   d58c8:	f000 fc68 	bl	d619c <__aeabi_dmul>
   d58cc:	a39c      	add	r3, pc, #624	; (adr r3, d5b40 <atan+0x2e0>)
   d58ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d58d2:	f000 faad 	bl	d5e30 <__adddf3>
   d58d6:	4632      	mov	r2, r6
   d58d8:	463b      	mov	r3, r7
   d58da:	f000 fc5f 	bl	d619c <__aeabi_dmul>
   d58de:	a39a      	add	r3, pc, #616	; (adr r3, d5b48 <atan+0x2e8>)
   d58e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d58e4:	f000 faa4 	bl	d5e30 <__adddf3>
   d58e8:	4632      	mov	r2, r6
   d58ea:	463b      	mov	r3, r7
   d58ec:	f000 fc56 	bl	d619c <__aeabi_dmul>
   d58f0:	a397      	add	r3, pc, #604	; (adr r3, d5b50 <atan+0x2f0>)
   d58f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d58f6:	f000 fa9b 	bl	d5e30 <__adddf3>
   d58fa:	4632      	mov	r2, r6
   d58fc:	463b      	mov	r3, r7
   d58fe:	f000 fc4d 	bl	d619c <__aeabi_dmul>
   d5902:	a395      	add	r3, pc, #596	; (adr r3, d5b58 <atan+0x2f8>)
   d5904:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5908:	f000 fa92 	bl	d5e30 <__adddf3>
   d590c:	4632      	mov	r2, r6
   d590e:	463b      	mov	r3, r7
   d5910:	f000 fc44 	bl	d619c <__aeabi_dmul>
   d5914:	a392      	add	r3, pc, #584	; (adr r3, d5b60 <atan+0x300>)
   d5916:	e9d3 2300 	ldrd	r2, r3, [r3]
   d591a:	f000 fa89 	bl	d5e30 <__adddf3>
   d591e:	4642      	mov	r2, r8
   d5920:	464b      	mov	r3, r9
   d5922:	f000 fc3b 	bl	d619c <__aeabi_dmul>
   d5926:	a390      	add	r3, pc, #576	; (adr r3, d5b68 <atan+0x308>)
   d5928:	e9d3 2300 	ldrd	r2, r3, [r3]
   d592c:	4680      	mov	r8, r0
   d592e:	4689      	mov	r9, r1
   d5930:	4630      	mov	r0, r6
   d5932:	4639      	mov	r1, r7
   d5934:	f000 fc32 	bl	d619c <__aeabi_dmul>
   d5938:	a38d      	add	r3, pc, #564	; (adr r3, d5b70 <atan+0x310>)
   d593a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d593e:	f000 fa75 	bl	d5e2c <__aeabi_dsub>
   d5942:	4632      	mov	r2, r6
   d5944:	463b      	mov	r3, r7
   d5946:	f000 fc29 	bl	d619c <__aeabi_dmul>
   d594a:	a38b      	add	r3, pc, #556	; (adr r3, d5b78 <atan+0x318>)
   d594c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5950:	f000 fa6c 	bl	d5e2c <__aeabi_dsub>
   d5954:	4632      	mov	r2, r6
   d5956:	463b      	mov	r3, r7
   d5958:	f000 fc20 	bl	d619c <__aeabi_dmul>
   d595c:	a388      	add	r3, pc, #544	; (adr r3, d5b80 <atan+0x320>)
   d595e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5962:	f000 fa63 	bl	d5e2c <__aeabi_dsub>
   d5966:	4632      	mov	r2, r6
   d5968:	463b      	mov	r3, r7
   d596a:	f000 fc17 	bl	d619c <__aeabi_dmul>
   d596e:	a386      	add	r3, pc, #536	; (adr r3, d5b88 <atan+0x328>)
   d5970:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5974:	f000 fa5a 	bl	d5e2c <__aeabi_dsub>
   d5978:	4632      	mov	r2, r6
   d597a:	463b      	mov	r3, r7
   d597c:	f000 fc0e 	bl	d619c <__aeabi_dmul>
   d5980:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   d5984:	4602      	mov	r2, r0
   d5986:	460b      	mov	r3, r1
   d5988:	d078      	beq.n	d5a7c <atan+0x21c>
   d598a:	4640      	mov	r0, r8
   d598c:	4649      	mov	r1, r9
   d598e:	f000 fa4f 	bl	d5e30 <__adddf3>
   d5992:	4e86      	ldr	r6, [pc, #536]	; (d5bac <atan+0x34c>)
   d5994:	4622      	mov	r2, r4
   d5996:	462b      	mov	r3, r5
   d5998:	f000 fc00 	bl	d619c <__aeabi_dmul>
   d599c:	4b84      	ldr	r3, [pc, #528]	; (d5bb0 <atan+0x350>)
   d599e:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   d59a2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   d59a6:	449b      	add	fp, r3
   d59a8:	e9db 2300 	ldrd	r2, r3, [fp]
   d59ac:	f000 fa3e 	bl	d5e2c <__aeabi_dsub>
   d59b0:	4622      	mov	r2, r4
   d59b2:	462b      	mov	r3, r5
   d59b4:	f000 fa3a 	bl	d5e2c <__aeabi_dsub>
   d59b8:	4602      	mov	r2, r0
   d59ba:	460b      	mov	r3, r1
   d59bc:	e9d6 0100 	ldrd	r0, r1, [r6]
   d59c0:	f000 fa34 	bl	d5e2c <__aeabi_dsub>
   d59c4:	f1ba 0f00 	cmp.w	sl, #0
   d59c8:	ec41 0b10 	vmov	d0, r0, r1
   d59cc:	da13      	bge.n	d59f6 <atan+0x196>
   d59ce:	ee10 1a90 	vmov	r1, s1
   d59d2:	4602      	mov	r2, r0
   d59d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d59d8:	ec43 2b10 	vmov	d0, r2, r3
   d59dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d59e0:	2c00      	cmp	r4, #0
   d59e2:	f43f af4d 	beq.w	d5880 <atan+0x20>
   d59e6:	4622      	mov	r2, r4
   d59e8:	462b      	mov	r3, r5
   d59ea:	4620      	mov	r0, r4
   d59ec:	4629      	mov	r1, r5
   d59ee:	f000 fa1f 	bl	d5e30 <__adddf3>
   d59f2:	ec41 0b10 	vmov	d0, r0, r1
   d59f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d59fa:	a365      	add	r3, pc, #404	; (adr r3, d5b90 <atan+0x330>)
   d59fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5a00:	ee10 0a10 	vmov	r0, s0
   d5a04:	4629      	mov	r1, r5
   d5a06:	f000 fa13 	bl	d5e30 <__adddf3>
   d5a0a:	4b6a      	ldr	r3, [pc, #424]	; (d5bb4 <atan+0x354>)
   d5a0c:	2200      	movs	r2, #0
   d5a0e:	f000 fe55 	bl	d66bc <__aeabi_dcmpgt>
   d5a12:	2800      	cmp	r0, #0
   d5a14:	f43f af45 	beq.w	d58a2 <atan+0x42>
   d5a18:	ec45 4b10 	vmov	d0, r4, r5
   d5a1c:	e7eb      	b.n	d59f6 <atan+0x196>
   d5a1e:	f000 f8d3 	bl	d5bc8 <fabs>
   d5a22:	4b65      	ldr	r3, [pc, #404]	; (d5bb8 <atan+0x358>)
   d5a24:	429e      	cmp	r6, r3
   d5a26:	ec55 4b10 	vmov	r4, r5, d0
   d5a2a:	dc39      	bgt.n	d5aa0 <atan+0x240>
   d5a2c:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   d5a30:	429e      	cmp	r6, r3
   d5a32:	dc62      	bgt.n	d5afa <atan+0x29a>
   d5a34:	ee10 2a10 	vmov	r2, s0
   d5a38:	ee10 0a10 	vmov	r0, s0
   d5a3c:	462b      	mov	r3, r5
   d5a3e:	4629      	mov	r1, r5
   d5a40:	f000 f9f6 	bl	d5e30 <__adddf3>
   d5a44:	4b5b      	ldr	r3, [pc, #364]	; (d5bb4 <atan+0x354>)
   d5a46:	2200      	movs	r2, #0
   d5a48:	f000 f9f0 	bl	d5e2c <__aeabi_dsub>
   d5a4c:	2200      	movs	r2, #0
   d5a4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d5a52:	4606      	mov	r6, r0
   d5a54:	460f      	mov	r7, r1
   d5a56:	4620      	mov	r0, r4
   d5a58:	4629      	mov	r1, r5
   d5a5a:	f000 f9e9 	bl	d5e30 <__adddf3>
   d5a5e:	4602      	mov	r2, r0
   d5a60:	460b      	mov	r3, r1
   d5a62:	4630      	mov	r0, r6
   d5a64:	4639      	mov	r1, r7
   d5a66:	f000 fcc3 	bl	d63f0 <__aeabi_ddiv>
   d5a6a:	f04f 0b00 	mov.w	fp, #0
   d5a6e:	4604      	mov	r4, r0
   d5a70:	460d      	mov	r5, r1
   d5a72:	e718      	b.n	d58a6 <atan+0x46>
   d5a74:	ed9f 0b48 	vldr	d0, [pc, #288]	; d5b98 <atan+0x338>
   d5a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5a7c:	4640      	mov	r0, r8
   d5a7e:	4649      	mov	r1, r9
   d5a80:	f000 f9d6 	bl	d5e30 <__adddf3>
   d5a84:	4622      	mov	r2, r4
   d5a86:	462b      	mov	r3, r5
   d5a88:	f000 fb88 	bl	d619c <__aeabi_dmul>
   d5a8c:	4602      	mov	r2, r0
   d5a8e:	460b      	mov	r3, r1
   d5a90:	4620      	mov	r0, r4
   d5a92:	4629      	mov	r1, r5
   d5a94:	f000 f9ca 	bl	d5e2c <__aeabi_dsub>
   d5a98:	ec41 0b10 	vmov	d0, r0, r1
   d5a9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5aa0:	4b46      	ldr	r3, [pc, #280]	; (d5bbc <atan+0x35c>)
   d5aa2:	429e      	cmp	r6, r3
   d5aa4:	da1d      	bge.n	d5ae2 <atan+0x282>
   d5aa6:	ee10 0a10 	vmov	r0, s0
   d5aaa:	4b45      	ldr	r3, [pc, #276]	; (d5bc0 <atan+0x360>)
   d5aac:	2200      	movs	r2, #0
   d5aae:	4629      	mov	r1, r5
   d5ab0:	f000 f9bc 	bl	d5e2c <__aeabi_dsub>
   d5ab4:	4b42      	ldr	r3, [pc, #264]	; (d5bc0 <atan+0x360>)
   d5ab6:	4606      	mov	r6, r0
   d5ab8:	460f      	mov	r7, r1
   d5aba:	2200      	movs	r2, #0
   d5abc:	4620      	mov	r0, r4
   d5abe:	4629      	mov	r1, r5
   d5ac0:	f000 fb6c 	bl	d619c <__aeabi_dmul>
   d5ac4:	4b3b      	ldr	r3, [pc, #236]	; (d5bb4 <atan+0x354>)
   d5ac6:	2200      	movs	r2, #0
   d5ac8:	f000 f9b2 	bl	d5e30 <__adddf3>
   d5acc:	4602      	mov	r2, r0
   d5ace:	460b      	mov	r3, r1
   d5ad0:	4630      	mov	r0, r6
   d5ad2:	4639      	mov	r1, r7
   d5ad4:	f000 fc8c 	bl	d63f0 <__aeabi_ddiv>
   d5ad8:	f04f 0b02 	mov.w	fp, #2
   d5adc:	4604      	mov	r4, r0
   d5ade:	460d      	mov	r5, r1
   d5ae0:	e6e1      	b.n	d58a6 <atan+0x46>
   d5ae2:	462b      	mov	r3, r5
   d5ae4:	ee10 2a10 	vmov	r2, s0
   d5ae8:	4936      	ldr	r1, [pc, #216]	; (d5bc4 <atan+0x364>)
   d5aea:	2000      	movs	r0, #0
   d5aec:	f000 fc80 	bl	d63f0 <__aeabi_ddiv>
   d5af0:	f04f 0b03 	mov.w	fp, #3
   d5af4:	4604      	mov	r4, r0
   d5af6:	460d      	mov	r5, r1
   d5af8:	e6d5      	b.n	d58a6 <atan+0x46>
   d5afa:	ee10 0a10 	vmov	r0, s0
   d5afe:	4b2d      	ldr	r3, [pc, #180]	; (d5bb4 <atan+0x354>)
   d5b00:	2200      	movs	r2, #0
   d5b02:	4629      	mov	r1, r5
   d5b04:	f000 f992 	bl	d5e2c <__aeabi_dsub>
   d5b08:	4b2a      	ldr	r3, [pc, #168]	; (d5bb4 <atan+0x354>)
   d5b0a:	2200      	movs	r2, #0
   d5b0c:	4606      	mov	r6, r0
   d5b0e:	460f      	mov	r7, r1
   d5b10:	4620      	mov	r0, r4
   d5b12:	4629      	mov	r1, r5
   d5b14:	f000 f98c 	bl	d5e30 <__adddf3>
   d5b18:	4602      	mov	r2, r0
   d5b1a:	460b      	mov	r3, r1
   d5b1c:	4630      	mov	r0, r6
   d5b1e:	4639      	mov	r1, r7
   d5b20:	f000 fc66 	bl	d63f0 <__aeabi_ddiv>
   d5b24:	f04f 0b01 	mov.w	fp, #1
   d5b28:	4604      	mov	r4, r0
   d5b2a:	460d      	mov	r5, r1
   d5b2c:	e6bb      	b.n	d58a6 <atan+0x46>
   d5b2e:	bf00      	nop
   d5b30:	54442d18 	.word	0x54442d18
   d5b34:	3ff921fb 	.word	0x3ff921fb
   d5b38:	e322da11 	.word	0xe322da11
   d5b3c:	3f90ad3a 	.word	0x3f90ad3a
   d5b40:	24760deb 	.word	0x24760deb
   d5b44:	3fa97b4b 	.word	0x3fa97b4b
   d5b48:	a0d03d51 	.word	0xa0d03d51
   d5b4c:	3fb10d66 	.word	0x3fb10d66
   d5b50:	c54c206e 	.word	0xc54c206e
   d5b54:	3fb745cd 	.word	0x3fb745cd
   d5b58:	920083ff 	.word	0x920083ff
   d5b5c:	3fc24924 	.word	0x3fc24924
   d5b60:	5555550d 	.word	0x5555550d
   d5b64:	3fd55555 	.word	0x3fd55555
   d5b68:	2c6a6c2f 	.word	0x2c6a6c2f
   d5b6c:	bfa2b444 	.word	0xbfa2b444
   d5b70:	52defd9a 	.word	0x52defd9a
   d5b74:	3fadde2d 	.word	0x3fadde2d
   d5b78:	af749a6d 	.word	0xaf749a6d
   d5b7c:	3fb3b0f2 	.word	0x3fb3b0f2
   d5b80:	fe231671 	.word	0xfe231671
   d5b84:	3fbc71c6 	.word	0x3fbc71c6
   d5b88:	9998ebc4 	.word	0x9998ebc4
   d5b8c:	3fc99999 	.word	0x3fc99999
   d5b90:	8800759c 	.word	0x8800759c
   d5b94:	7e37e43c 	.word	0x7e37e43c
   d5b98:	54442d18 	.word	0x54442d18
   d5b9c:	bff921fb 	.word	0xbff921fb
   d5ba0:	440fffff 	.word	0x440fffff
   d5ba4:	7ff00000 	.word	0x7ff00000
   d5ba8:	3fdbffff 	.word	0x3fdbffff
   d5bac:	000d6b28 	.word	0x000d6b28
   d5bb0:	000d6b48 	.word	0x000d6b48
   d5bb4:	3ff00000 	.word	0x3ff00000
   d5bb8:	3ff2ffff 	.word	0x3ff2ffff
   d5bbc:	40038000 	.word	0x40038000
   d5bc0:	3ff80000 	.word	0x3ff80000
   d5bc4:	bff00000 	.word	0xbff00000

000d5bc8 <fabs>:
   d5bc8:	ec51 0b10 	vmov	r0, r1, d0
   d5bcc:	ee10 2a10 	vmov	r2, s0
   d5bd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d5bd4:	ec43 2b10 	vmov	d0, r2, r3
   d5bd8:	4770      	bx	lr
   d5bda:	bf00      	nop

000d5bdc <sqrt>:
   d5bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5be0:	ed2d 8b02 	vpush	{d8}
   d5be4:	b08b      	sub	sp, #44	; 0x2c
   d5be6:	ec55 4b10 	vmov	r4, r5, d0
   d5bea:	f000 f855 	bl	d5c98 <__ieee754_sqrt>
   d5bee:	4b28      	ldr	r3, [pc, #160]	; (d5c90 <sqrt+0xb4>)
   d5bf0:	eeb0 8a40 	vmov.f32	s16, s0
   d5bf4:	eef0 8a60 	vmov.f32	s17, s1
   d5bf8:	f993 7000 	ldrsb.w	r7, [r3]
   d5bfc:	1c7b      	adds	r3, r7, #1
   d5bfe:	d012      	beq.n	d5c26 <sqrt+0x4a>
   d5c00:	4622      	mov	r2, r4
   d5c02:	462b      	mov	r3, r5
   d5c04:	4620      	mov	r0, r4
   d5c06:	4629      	mov	r1, r5
   d5c08:	f000 fd62 	bl	d66d0 <__aeabi_dcmpun>
   d5c0c:	4606      	mov	r6, r0
   d5c0e:	b950      	cbnz	r0, d5c26 <sqrt+0x4a>
   d5c10:	f04f 0800 	mov.w	r8, #0
   d5c14:	f04f 0900 	mov.w	r9, #0
   d5c18:	4620      	mov	r0, r4
   d5c1a:	4629      	mov	r1, r5
   d5c1c:	4642      	mov	r2, r8
   d5c1e:	464b      	mov	r3, r9
   d5c20:	f000 fd2e 	bl	d6680 <__aeabi_dcmplt>
   d5c24:	b940      	cbnz	r0, d5c38 <sqrt+0x5c>
   d5c26:	eeb0 0a48 	vmov.f32	s0, s16
   d5c2a:	eef0 0a68 	vmov.f32	s1, s17
   d5c2e:	b00b      	add	sp, #44	; 0x2c
   d5c30:	ecbd 8b02 	vpop	{d8}
   d5c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5c38:	4b16      	ldr	r3, [pc, #88]	; (d5c94 <sqrt+0xb8>)
   d5c3a:	9608      	str	r6, [sp, #32]
   d5c3c:	2201      	movs	r2, #1
   d5c3e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5c42:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d5c46:	9200      	str	r2, [sp, #0]
   d5c48:	9301      	str	r3, [sp, #4]
   d5c4a:	b197      	cbz	r7, d5c72 <sqrt+0x96>
   d5c4c:	4642      	mov	r2, r8
   d5c4e:	464b      	mov	r3, r9
   d5c50:	4640      	mov	r0, r8
   d5c52:	4649      	mov	r1, r9
   d5c54:	f000 fbcc 	bl	d63f0 <__aeabi_ddiv>
   d5c58:	2f02      	cmp	r7, #2
   d5c5a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5c5e:	d10a      	bne.n	d5c76 <sqrt+0x9a>
   d5c60:	f7ff f816 	bl	d4c90 <__errno>
   d5c64:	2321      	movs	r3, #33	; 0x21
   d5c66:	6003      	str	r3, [r0, #0]
   d5c68:	9b08      	ldr	r3, [sp, #32]
   d5c6a:	b963      	cbnz	r3, d5c86 <sqrt+0xaa>
   d5c6c:	ed9d 8b06 	vldr	d8, [sp, #24]
   d5c70:	e7d9      	b.n	d5c26 <sqrt+0x4a>
   d5c72:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d5c76:	4668      	mov	r0, sp
   d5c78:	f000 f8d2 	bl	d5e20 <matherr>
   d5c7c:	2800      	cmp	r0, #0
   d5c7e:	d0ef      	beq.n	d5c60 <sqrt+0x84>
   d5c80:	9b08      	ldr	r3, [sp, #32]
   d5c82:	2b00      	cmp	r3, #0
   d5c84:	d0f2      	beq.n	d5c6c <sqrt+0x90>
   d5c86:	f7ff f803 	bl	d4c90 <__errno>
   d5c8a:	9b08      	ldr	r3, [sp, #32]
   d5c8c:	6003      	str	r3, [r0, #0]
   d5c8e:	e7ed      	b.n	d5c6c <sqrt+0x90>
   d5c90:	2003e4d8 	.word	0x2003e4d8
   d5c94:	000d6b68 	.word	0x000d6b68

000d5c98 <__ieee754_sqrt>:
   d5c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5c9c:	4a5f      	ldr	r2, [pc, #380]	; (d5e1c <__ieee754_sqrt+0x184>)
   d5c9e:	ec57 6b10 	vmov	r6, r7, d0
   d5ca2:	43ba      	bics	r2, r7
   d5ca4:	f000 8098 	beq.w	d5dd8 <__ieee754_sqrt+0x140>
   d5ca8:	2f00      	cmp	r7, #0
   d5caa:	ee10 4a10 	vmov	r4, s0
   d5cae:	463b      	mov	r3, r7
   d5cb0:	dd4e      	ble.n	d5d50 <__ieee754_sqrt+0xb8>
   d5cb2:	1539      	asrs	r1, r7, #20
   d5cb4:	d05b      	beq.n	d5d6e <__ieee754_sqrt+0xd6>
   d5cb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d5cba:	07ca      	lsls	r2, r1, #31
   d5cbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5cc0:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d5cc4:	d403      	bmi.n	d5cce <__ieee754_sqrt+0x36>
   d5cc6:	005b      	lsls	r3, r3, #1
   d5cc8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d5ccc:	0064      	lsls	r4, r4, #1
   d5cce:	0fe2      	lsrs	r2, r4, #31
   d5cd0:	f04f 0c00 	mov.w	ip, #0
   d5cd4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d5cd8:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d5cdc:	0064      	lsls	r4, r4, #1
   d5cde:	4666      	mov	r6, ip
   d5ce0:	2516      	movs	r5, #22
   d5ce2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d5ce6:	18b1      	adds	r1, r6, r2
   d5ce8:	4299      	cmp	r1, r3
   d5cea:	dc02      	bgt.n	d5cf2 <__ieee754_sqrt+0x5a>
   d5cec:	1a5b      	subs	r3, r3, r1
   d5cee:	188e      	adds	r6, r1, r2
   d5cf0:	4494      	add	ip, r2
   d5cf2:	005b      	lsls	r3, r3, #1
   d5cf4:	3d01      	subs	r5, #1
   d5cf6:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d5cfa:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d5cfe:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d5d02:	d1f0      	bne.n	d5ce6 <__ieee754_sqrt+0x4e>
   d5d04:	462f      	mov	r7, r5
   d5d06:	2020      	movs	r0, #32
   d5d08:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d5d0c:	e009      	b.n	d5d22 <__ieee754_sqrt+0x8a>
   d5d0e:	d03e      	beq.n	d5d8e <__ieee754_sqrt+0xf6>
   d5d10:	0fe1      	lsrs	r1, r4, #31
   d5d12:	3801      	subs	r0, #1
   d5d14:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d5d18:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d5d1c:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d5d20:	d03e      	beq.n	d5da0 <__ieee754_sqrt+0x108>
   d5d22:	42b3      	cmp	r3, r6
   d5d24:	eb02 0105 	add.w	r1, r2, r5
   d5d28:	ddf1      	ble.n	d5d0e <__ieee754_sqrt+0x76>
   d5d2a:	2900      	cmp	r1, #0
   d5d2c:	eb01 0502 	add.w	r5, r1, r2
   d5d30:	db09      	blt.n	d5d46 <__ieee754_sqrt+0xae>
   d5d32:	46b0      	mov	r8, r6
   d5d34:	1b9b      	subs	r3, r3, r6
   d5d36:	42a1      	cmp	r1, r4
   d5d38:	bf88      	it	hi
   d5d3a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d5d3e:	1a64      	subs	r4, r4, r1
   d5d40:	4417      	add	r7, r2
   d5d42:	4646      	mov	r6, r8
   d5d44:	e7e4      	b.n	d5d10 <__ieee754_sqrt+0x78>
   d5d46:	2d00      	cmp	r5, #0
   d5d48:	dbf3      	blt.n	d5d32 <__ieee754_sqrt+0x9a>
   d5d4a:	f106 0801 	add.w	r8, r6, #1
   d5d4e:	e7f1      	b.n	d5d34 <__ieee754_sqrt+0x9c>
   d5d50:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d5d54:	4332      	orrs	r2, r6
   d5d56:	d036      	beq.n	d5dc6 <__ieee754_sqrt+0x12e>
   d5d58:	2f00      	cmp	r7, #0
   d5d5a:	d14d      	bne.n	d5df8 <__ieee754_sqrt+0x160>
   d5d5c:	4639      	mov	r1, r7
   d5d5e:	0ae2      	lsrs	r2, r4, #11
   d5d60:	3915      	subs	r1, #21
   d5d62:	0564      	lsls	r4, r4, #21
   d5d64:	4613      	mov	r3, r2
   d5d66:	2a00      	cmp	r2, #0
   d5d68:	d0f9      	beq.n	d5d5e <__ieee754_sqrt+0xc6>
   d5d6a:	02d7      	lsls	r7, r2, #11
   d5d6c:	d451      	bmi.n	d5e12 <__ieee754_sqrt+0x17a>
   d5d6e:	2000      	movs	r0, #0
   d5d70:	005b      	lsls	r3, r3, #1
   d5d72:	02de      	lsls	r6, r3, #11
   d5d74:	4605      	mov	r5, r0
   d5d76:	f100 0001 	add.w	r0, r0, #1
   d5d7a:	d5f9      	bpl.n	d5d70 <__ieee754_sqrt+0xd8>
   d5d7c:	461a      	mov	r2, r3
   d5d7e:	4623      	mov	r3, r4
   d5d80:	4084      	lsls	r4, r0
   d5d82:	f1c0 0020 	rsb	r0, r0, #32
   d5d86:	40c3      	lsrs	r3, r0
   d5d88:	4313      	orrs	r3, r2
   d5d8a:	1b49      	subs	r1, r1, r5
   d5d8c:	e793      	b.n	d5cb6 <__ieee754_sqrt+0x1e>
   d5d8e:	42a1      	cmp	r1, r4
   d5d90:	d8be      	bhi.n	d5d10 <__ieee754_sqrt+0x78>
   d5d92:	2900      	cmp	r1, #0
   d5d94:	eb01 0502 	add.w	r5, r1, r2
   d5d98:	dbd5      	blt.n	d5d46 <__ieee754_sqrt+0xae>
   d5d9a:	4698      	mov	r8, r3
   d5d9c:	2300      	movs	r3, #0
   d5d9e:	e7ce      	b.n	d5d3e <__ieee754_sqrt+0xa6>
   d5da0:	4323      	orrs	r3, r4
   d5da2:	d112      	bne.n	d5dca <__ieee754_sqrt+0x132>
   d5da4:	0878      	lsrs	r0, r7, #1
   d5da6:	ea4f 016c 	mov.w	r1, ip, asr #1
   d5daa:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d5dae:	f01c 0f01 	tst.w	ip, #1
   d5db2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d5db6:	bf18      	it	ne
   d5db8:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d5dbc:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d5dc0:	4602      	mov	r2, r0
   d5dc2:	ec43 2b10 	vmov	d0, r2, r3
   d5dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5dca:	1c7b      	adds	r3, r7, #1
   d5dcc:	bf16      	itet	ne
   d5dce:	1c78      	addne	r0, r7, #1
   d5dd0:	f10c 0c01 	addeq.w	ip, ip, #1
   d5dd4:	0840      	lsrne	r0, r0, #1
   d5dd6:	e7e6      	b.n	d5da6 <__ieee754_sqrt+0x10e>
   d5dd8:	ee10 2a10 	vmov	r2, s0
   d5ddc:	ee10 0a10 	vmov	r0, s0
   d5de0:	463b      	mov	r3, r7
   d5de2:	4639      	mov	r1, r7
   d5de4:	f000 f9da 	bl	d619c <__aeabi_dmul>
   d5de8:	4632      	mov	r2, r6
   d5dea:	463b      	mov	r3, r7
   d5dec:	f000 f820 	bl	d5e30 <__adddf3>
   d5df0:	ec41 0b10 	vmov	d0, r0, r1
   d5df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5df8:	ee10 2a10 	vmov	r2, s0
   d5dfc:	4630      	mov	r0, r6
   d5dfe:	4639      	mov	r1, r7
   d5e00:	f000 f814 	bl	d5e2c <__aeabi_dsub>
   d5e04:	4602      	mov	r2, r0
   d5e06:	460b      	mov	r3, r1
   d5e08:	f000 faf2 	bl	d63f0 <__aeabi_ddiv>
   d5e0c:	ec41 0b10 	vmov	d0, r0, r1
   d5e10:	e7d9      	b.n	d5dc6 <__ieee754_sqrt+0x12e>
   d5e12:	4623      	mov	r3, r4
   d5e14:	2020      	movs	r0, #32
   d5e16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d5e1a:	e7b4      	b.n	d5d86 <__ieee754_sqrt+0xee>
   d5e1c:	7ff00000 	.word	0x7ff00000

000d5e20 <matherr>:
   d5e20:	2000      	movs	r0, #0
   d5e22:	4770      	bx	lr

000d5e24 <__aeabi_drsub>:
   d5e24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5e28:	e002      	b.n	d5e30 <__adddf3>
   d5e2a:	bf00      	nop

000d5e2c <__aeabi_dsub>:
   d5e2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5e30 <__adddf3>:
   d5e30:	b530      	push	{r4, r5, lr}
   d5e32:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5e36:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5e3a:	ea94 0f05 	teq	r4, r5
   d5e3e:	bf08      	it	eq
   d5e40:	ea90 0f02 	teqeq	r0, r2
   d5e44:	bf1f      	itttt	ne
   d5e46:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5e4a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5e4e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5e52:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5e56:	f000 80e2 	beq.w	d601e <__adddf3+0x1ee>
   d5e5a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5e5e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5e62:	bfb8      	it	lt
   d5e64:	426d      	neglt	r5, r5
   d5e66:	dd0c      	ble.n	d5e82 <__adddf3+0x52>
   d5e68:	442c      	add	r4, r5
   d5e6a:	ea80 0202 	eor.w	r2, r0, r2
   d5e6e:	ea81 0303 	eor.w	r3, r1, r3
   d5e72:	ea82 0000 	eor.w	r0, r2, r0
   d5e76:	ea83 0101 	eor.w	r1, r3, r1
   d5e7a:	ea80 0202 	eor.w	r2, r0, r2
   d5e7e:	ea81 0303 	eor.w	r3, r1, r3
   d5e82:	2d36      	cmp	r5, #54	; 0x36
   d5e84:	bf88      	it	hi
   d5e86:	bd30      	pophi	{r4, r5, pc}
   d5e88:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5e8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5e90:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5e94:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5e98:	d002      	beq.n	d5ea0 <__adddf3+0x70>
   d5e9a:	4240      	negs	r0, r0
   d5e9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5ea0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5ea4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5ea8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5eac:	d002      	beq.n	d5eb4 <__adddf3+0x84>
   d5eae:	4252      	negs	r2, r2
   d5eb0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5eb4:	ea94 0f05 	teq	r4, r5
   d5eb8:	f000 80a7 	beq.w	d600a <__adddf3+0x1da>
   d5ebc:	f1a4 0401 	sub.w	r4, r4, #1
   d5ec0:	f1d5 0e20 	rsbs	lr, r5, #32
   d5ec4:	db0d      	blt.n	d5ee2 <__adddf3+0xb2>
   d5ec6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5eca:	fa22 f205 	lsr.w	r2, r2, r5
   d5ece:	1880      	adds	r0, r0, r2
   d5ed0:	f141 0100 	adc.w	r1, r1, #0
   d5ed4:	fa03 f20e 	lsl.w	r2, r3, lr
   d5ed8:	1880      	adds	r0, r0, r2
   d5eda:	fa43 f305 	asr.w	r3, r3, r5
   d5ede:	4159      	adcs	r1, r3
   d5ee0:	e00e      	b.n	d5f00 <__adddf3+0xd0>
   d5ee2:	f1a5 0520 	sub.w	r5, r5, #32
   d5ee6:	f10e 0e20 	add.w	lr, lr, #32
   d5eea:	2a01      	cmp	r2, #1
   d5eec:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5ef0:	bf28      	it	cs
   d5ef2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5ef6:	fa43 f305 	asr.w	r3, r3, r5
   d5efa:	18c0      	adds	r0, r0, r3
   d5efc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5f00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5f04:	d507      	bpl.n	d5f16 <__adddf3+0xe6>
   d5f06:	f04f 0e00 	mov.w	lr, #0
   d5f0a:	f1dc 0c00 	rsbs	ip, ip, #0
   d5f0e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5f12:	eb6e 0101 	sbc.w	r1, lr, r1
   d5f16:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5f1a:	d31b      	bcc.n	d5f54 <__adddf3+0x124>
   d5f1c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5f20:	d30c      	bcc.n	d5f3c <__adddf3+0x10c>
   d5f22:	0849      	lsrs	r1, r1, #1
   d5f24:	ea5f 0030 	movs.w	r0, r0, rrx
   d5f28:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5f2c:	f104 0401 	add.w	r4, r4, #1
   d5f30:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5f34:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5f38:	f080 809a 	bcs.w	d6070 <__adddf3+0x240>
   d5f3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5f40:	bf08      	it	eq
   d5f42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5f46:	f150 0000 	adcs.w	r0, r0, #0
   d5f4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5f4e:	ea41 0105 	orr.w	r1, r1, r5
   d5f52:	bd30      	pop	{r4, r5, pc}
   d5f54:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5f58:	4140      	adcs	r0, r0
   d5f5a:	eb41 0101 	adc.w	r1, r1, r1
   d5f5e:	3c01      	subs	r4, #1
   d5f60:	bf28      	it	cs
   d5f62:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d5f66:	d2e9      	bcs.n	d5f3c <__adddf3+0x10c>
   d5f68:	f091 0f00 	teq	r1, #0
   d5f6c:	bf04      	itt	eq
   d5f6e:	4601      	moveq	r1, r0
   d5f70:	2000      	moveq	r0, #0
   d5f72:	fab1 f381 	clz	r3, r1
   d5f76:	bf08      	it	eq
   d5f78:	3320      	addeq	r3, #32
   d5f7a:	f1a3 030b 	sub.w	r3, r3, #11
   d5f7e:	f1b3 0220 	subs.w	r2, r3, #32
   d5f82:	da0c      	bge.n	d5f9e <__adddf3+0x16e>
   d5f84:	320c      	adds	r2, #12
   d5f86:	dd08      	ble.n	d5f9a <__adddf3+0x16a>
   d5f88:	f102 0c14 	add.w	ip, r2, #20
   d5f8c:	f1c2 020c 	rsb	r2, r2, #12
   d5f90:	fa01 f00c 	lsl.w	r0, r1, ip
   d5f94:	fa21 f102 	lsr.w	r1, r1, r2
   d5f98:	e00c      	b.n	d5fb4 <__adddf3+0x184>
   d5f9a:	f102 0214 	add.w	r2, r2, #20
   d5f9e:	bfd8      	it	le
   d5fa0:	f1c2 0c20 	rsble	ip, r2, #32
   d5fa4:	fa01 f102 	lsl.w	r1, r1, r2
   d5fa8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5fac:	bfdc      	itt	le
   d5fae:	ea41 010c 	orrle.w	r1, r1, ip
   d5fb2:	4090      	lslle	r0, r2
   d5fb4:	1ae4      	subs	r4, r4, r3
   d5fb6:	bfa2      	ittt	ge
   d5fb8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5fbc:	4329      	orrge	r1, r5
   d5fbe:	bd30      	popge	{r4, r5, pc}
   d5fc0:	ea6f 0404 	mvn.w	r4, r4
   d5fc4:	3c1f      	subs	r4, #31
   d5fc6:	da1c      	bge.n	d6002 <__adddf3+0x1d2>
   d5fc8:	340c      	adds	r4, #12
   d5fca:	dc0e      	bgt.n	d5fea <__adddf3+0x1ba>
   d5fcc:	f104 0414 	add.w	r4, r4, #20
   d5fd0:	f1c4 0220 	rsb	r2, r4, #32
   d5fd4:	fa20 f004 	lsr.w	r0, r0, r4
   d5fd8:	fa01 f302 	lsl.w	r3, r1, r2
   d5fdc:	ea40 0003 	orr.w	r0, r0, r3
   d5fe0:	fa21 f304 	lsr.w	r3, r1, r4
   d5fe4:	ea45 0103 	orr.w	r1, r5, r3
   d5fe8:	bd30      	pop	{r4, r5, pc}
   d5fea:	f1c4 040c 	rsb	r4, r4, #12
   d5fee:	f1c4 0220 	rsb	r2, r4, #32
   d5ff2:	fa20 f002 	lsr.w	r0, r0, r2
   d5ff6:	fa01 f304 	lsl.w	r3, r1, r4
   d5ffa:	ea40 0003 	orr.w	r0, r0, r3
   d5ffe:	4629      	mov	r1, r5
   d6000:	bd30      	pop	{r4, r5, pc}
   d6002:	fa21 f004 	lsr.w	r0, r1, r4
   d6006:	4629      	mov	r1, r5
   d6008:	bd30      	pop	{r4, r5, pc}
   d600a:	f094 0f00 	teq	r4, #0
   d600e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6012:	bf06      	itte	eq
   d6014:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6018:	3401      	addeq	r4, #1
   d601a:	3d01      	subne	r5, #1
   d601c:	e74e      	b.n	d5ebc <__adddf3+0x8c>
   d601e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6022:	bf18      	it	ne
   d6024:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6028:	d029      	beq.n	d607e <__adddf3+0x24e>
   d602a:	ea94 0f05 	teq	r4, r5
   d602e:	bf08      	it	eq
   d6030:	ea90 0f02 	teqeq	r0, r2
   d6034:	d005      	beq.n	d6042 <__adddf3+0x212>
   d6036:	ea54 0c00 	orrs.w	ip, r4, r0
   d603a:	bf04      	itt	eq
   d603c:	4619      	moveq	r1, r3
   d603e:	4610      	moveq	r0, r2
   d6040:	bd30      	pop	{r4, r5, pc}
   d6042:	ea91 0f03 	teq	r1, r3
   d6046:	bf1e      	ittt	ne
   d6048:	2100      	movne	r1, #0
   d604a:	2000      	movne	r0, #0
   d604c:	bd30      	popne	{r4, r5, pc}
   d604e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6052:	d105      	bne.n	d6060 <__adddf3+0x230>
   d6054:	0040      	lsls	r0, r0, #1
   d6056:	4149      	adcs	r1, r1
   d6058:	bf28      	it	cs
   d605a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d605e:	bd30      	pop	{r4, r5, pc}
   d6060:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6064:	bf3c      	itt	cc
   d6066:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d606a:	bd30      	popcc	{r4, r5, pc}
   d606c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6070:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6074:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6078:	f04f 0000 	mov.w	r0, #0
   d607c:	bd30      	pop	{r4, r5, pc}
   d607e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6082:	bf1a      	itte	ne
   d6084:	4619      	movne	r1, r3
   d6086:	4610      	movne	r0, r2
   d6088:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d608c:	bf1c      	itt	ne
   d608e:	460b      	movne	r3, r1
   d6090:	4602      	movne	r2, r0
   d6092:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6096:	bf06      	itte	eq
   d6098:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d609c:	ea91 0f03 	teqeq	r1, r3
   d60a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d60a4:	bd30      	pop	{r4, r5, pc}
   d60a6:	bf00      	nop

000d60a8 <__aeabi_ui2d>:
   d60a8:	f090 0f00 	teq	r0, #0
   d60ac:	bf04      	itt	eq
   d60ae:	2100      	moveq	r1, #0
   d60b0:	4770      	bxeq	lr
   d60b2:	b530      	push	{r4, r5, lr}
   d60b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d60b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d60bc:	f04f 0500 	mov.w	r5, #0
   d60c0:	f04f 0100 	mov.w	r1, #0
   d60c4:	e750      	b.n	d5f68 <__adddf3+0x138>
   d60c6:	bf00      	nop

000d60c8 <__aeabi_i2d>:
   d60c8:	f090 0f00 	teq	r0, #0
   d60cc:	bf04      	itt	eq
   d60ce:	2100      	moveq	r1, #0
   d60d0:	4770      	bxeq	lr
   d60d2:	b530      	push	{r4, r5, lr}
   d60d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d60d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d60dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d60e0:	bf48      	it	mi
   d60e2:	4240      	negmi	r0, r0
   d60e4:	f04f 0100 	mov.w	r1, #0
   d60e8:	e73e      	b.n	d5f68 <__adddf3+0x138>
   d60ea:	bf00      	nop

000d60ec <__aeabi_f2d>:
   d60ec:	0042      	lsls	r2, r0, #1
   d60ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d60f2:	ea4f 0131 	mov.w	r1, r1, rrx
   d60f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d60fa:	bf1f      	itttt	ne
   d60fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6100:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6104:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6108:	4770      	bxne	lr
   d610a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d610e:	bf08      	it	eq
   d6110:	4770      	bxeq	lr
   d6112:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6116:	bf04      	itt	eq
   d6118:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d611c:	4770      	bxeq	lr
   d611e:	b530      	push	{r4, r5, lr}
   d6120:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6124:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6128:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d612c:	e71c      	b.n	d5f68 <__adddf3+0x138>
   d612e:	bf00      	nop

000d6130 <__aeabi_ul2d>:
   d6130:	ea50 0201 	orrs.w	r2, r0, r1
   d6134:	bf08      	it	eq
   d6136:	4770      	bxeq	lr
   d6138:	b530      	push	{r4, r5, lr}
   d613a:	f04f 0500 	mov.w	r5, #0
   d613e:	e00a      	b.n	d6156 <__aeabi_l2d+0x16>

000d6140 <__aeabi_l2d>:
   d6140:	ea50 0201 	orrs.w	r2, r0, r1
   d6144:	bf08      	it	eq
   d6146:	4770      	bxeq	lr
   d6148:	b530      	push	{r4, r5, lr}
   d614a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d614e:	d502      	bpl.n	d6156 <__aeabi_l2d+0x16>
   d6150:	4240      	negs	r0, r0
   d6152:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6156:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d615a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d615e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6162:	f43f aed8 	beq.w	d5f16 <__adddf3+0xe6>
   d6166:	f04f 0203 	mov.w	r2, #3
   d616a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d616e:	bf18      	it	ne
   d6170:	3203      	addne	r2, #3
   d6172:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6176:	bf18      	it	ne
   d6178:	3203      	addne	r2, #3
   d617a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d617e:	f1c2 0320 	rsb	r3, r2, #32
   d6182:	fa00 fc03 	lsl.w	ip, r0, r3
   d6186:	fa20 f002 	lsr.w	r0, r0, r2
   d618a:	fa01 fe03 	lsl.w	lr, r1, r3
   d618e:	ea40 000e 	orr.w	r0, r0, lr
   d6192:	fa21 f102 	lsr.w	r1, r1, r2
   d6196:	4414      	add	r4, r2
   d6198:	e6bd      	b.n	d5f16 <__adddf3+0xe6>
   d619a:	bf00      	nop

000d619c <__aeabi_dmul>:
   d619c:	b570      	push	{r4, r5, r6, lr}
   d619e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d61a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d61a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d61aa:	bf1d      	ittte	ne
   d61ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d61b0:	ea94 0f0c 	teqne	r4, ip
   d61b4:	ea95 0f0c 	teqne	r5, ip
   d61b8:	f000 f8de 	bleq	d6378 <__aeabi_dmul+0x1dc>
   d61bc:	442c      	add	r4, r5
   d61be:	ea81 0603 	eor.w	r6, r1, r3
   d61c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d61c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d61ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d61ce:	bf18      	it	ne
   d61d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d61d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d61d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d61dc:	d038      	beq.n	d6250 <__aeabi_dmul+0xb4>
   d61de:	fba0 ce02 	umull	ip, lr, r0, r2
   d61e2:	f04f 0500 	mov.w	r5, #0
   d61e6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d61ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d61ee:	fbe0 e503 	umlal	lr, r5, r0, r3
   d61f2:	f04f 0600 	mov.w	r6, #0
   d61f6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d61fa:	f09c 0f00 	teq	ip, #0
   d61fe:	bf18      	it	ne
   d6200:	f04e 0e01 	orrne.w	lr, lr, #1
   d6204:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6208:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d620c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6210:	d204      	bcs.n	d621c <__aeabi_dmul+0x80>
   d6212:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6216:	416d      	adcs	r5, r5
   d6218:	eb46 0606 	adc.w	r6, r6, r6
   d621c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6220:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6224:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6228:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d622c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6230:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6234:	bf88      	it	hi
   d6236:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d623a:	d81e      	bhi.n	d627a <__aeabi_dmul+0xde>
   d623c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6240:	bf08      	it	eq
   d6242:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6246:	f150 0000 	adcs.w	r0, r0, #0
   d624a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d624e:	bd70      	pop	{r4, r5, r6, pc}
   d6250:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6254:	ea46 0101 	orr.w	r1, r6, r1
   d6258:	ea40 0002 	orr.w	r0, r0, r2
   d625c:	ea81 0103 	eor.w	r1, r1, r3
   d6260:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6264:	bfc2      	ittt	gt
   d6266:	ebd4 050c 	rsbsgt	r5, r4, ip
   d626a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d626e:	bd70      	popgt	{r4, r5, r6, pc}
   d6270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6274:	f04f 0e00 	mov.w	lr, #0
   d6278:	3c01      	subs	r4, #1
   d627a:	f300 80ab 	bgt.w	d63d4 <__aeabi_dmul+0x238>
   d627e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6282:	bfde      	ittt	le
   d6284:	2000      	movle	r0, #0
   d6286:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d628a:	bd70      	pople	{r4, r5, r6, pc}
   d628c:	f1c4 0400 	rsb	r4, r4, #0
   d6290:	3c20      	subs	r4, #32
   d6292:	da35      	bge.n	d6300 <__aeabi_dmul+0x164>
   d6294:	340c      	adds	r4, #12
   d6296:	dc1b      	bgt.n	d62d0 <__aeabi_dmul+0x134>
   d6298:	f104 0414 	add.w	r4, r4, #20
   d629c:	f1c4 0520 	rsb	r5, r4, #32
   d62a0:	fa00 f305 	lsl.w	r3, r0, r5
   d62a4:	fa20 f004 	lsr.w	r0, r0, r4
   d62a8:	fa01 f205 	lsl.w	r2, r1, r5
   d62ac:	ea40 0002 	orr.w	r0, r0, r2
   d62b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d62b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d62b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d62bc:	fa21 f604 	lsr.w	r6, r1, r4
   d62c0:	eb42 0106 	adc.w	r1, r2, r6
   d62c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d62c8:	bf08      	it	eq
   d62ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d62ce:	bd70      	pop	{r4, r5, r6, pc}
   d62d0:	f1c4 040c 	rsb	r4, r4, #12
   d62d4:	f1c4 0520 	rsb	r5, r4, #32
   d62d8:	fa00 f304 	lsl.w	r3, r0, r4
   d62dc:	fa20 f005 	lsr.w	r0, r0, r5
   d62e0:	fa01 f204 	lsl.w	r2, r1, r4
   d62e4:	ea40 0002 	orr.w	r0, r0, r2
   d62e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d62ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d62f0:	f141 0100 	adc.w	r1, r1, #0
   d62f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d62f8:	bf08      	it	eq
   d62fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d62fe:	bd70      	pop	{r4, r5, r6, pc}
   d6300:	f1c4 0520 	rsb	r5, r4, #32
   d6304:	fa00 f205 	lsl.w	r2, r0, r5
   d6308:	ea4e 0e02 	orr.w	lr, lr, r2
   d630c:	fa20 f304 	lsr.w	r3, r0, r4
   d6310:	fa01 f205 	lsl.w	r2, r1, r5
   d6314:	ea43 0302 	orr.w	r3, r3, r2
   d6318:	fa21 f004 	lsr.w	r0, r1, r4
   d631c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6320:	fa21 f204 	lsr.w	r2, r1, r4
   d6324:	ea20 0002 	bic.w	r0, r0, r2
   d6328:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d632c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6330:	bf08      	it	eq
   d6332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6336:	bd70      	pop	{r4, r5, r6, pc}
   d6338:	f094 0f00 	teq	r4, #0
   d633c:	d10f      	bne.n	d635e <__aeabi_dmul+0x1c2>
   d633e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6342:	0040      	lsls	r0, r0, #1
   d6344:	eb41 0101 	adc.w	r1, r1, r1
   d6348:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d634c:	bf08      	it	eq
   d634e:	3c01      	subeq	r4, #1
   d6350:	d0f7      	beq.n	d6342 <__aeabi_dmul+0x1a6>
   d6352:	ea41 0106 	orr.w	r1, r1, r6
   d6356:	f095 0f00 	teq	r5, #0
   d635a:	bf18      	it	ne
   d635c:	4770      	bxne	lr
   d635e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6362:	0052      	lsls	r2, r2, #1
   d6364:	eb43 0303 	adc.w	r3, r3, r3
   d6368:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d636c:	bf08      	it	eq
   d636e:	3d01      	subeq	r5, #1
   d6370:	d0f7      	beq.n	d6362 <__aeabi_dmul+0x1c6>
   d6372:	ea43 0306 	orr.w	r3, r3, r6
   d6376:	4770      	bx	lr
   d6378:	ea94 0f0c 	teq	r4, ip
   d637c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6380:	bf18      	it	ne
   d6382:	ea95 0f0c 	teqne	r5, ip
   d6386:	d00c      	beq.n	d63a2 <__aeabi_dmul+0x206>
   d6388:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d638c:	bf18      	it	ne
   d638e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6392:	d1d1      	bne.n	d6338 <__aeabi_dmul+0x19c>
   d6394:	ea81 0103 	eor.w	r1, r1, r3
   d6398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d639c:	f04f 0000 	mov.w	r0, #0
   d63a0:	bd70      	pop	{r4, r5, r6, pc}
   d63a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d63a6:	bf06      	itte	eq
   d63a8:	4610      	moveq	r0, r2
   d63aa:	4619      	moveq	r1, r3
   d63ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d63b0:	d019      	beq.n	d63e6 <__aeabi_dmul+0x24a>
   d63b2:	ea94 0f0c 	teq	r4, ip
   d63b6:	d102      	bne.n	d63be <__aeabi_dmul+0x222>
   d63b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d63bc:	d113      	bne.n	d63e6 <__aeabi_dmul+0x24a>
   d63be:	ea95 0f0c 	teq	r5, ip
   d63c2:	d105      	bne.n	d63d0 <__aeabi_dmul+0x234>
   d63c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d63c8:	bf1c      	itt	ne
   d63ca:	4610      	movne	r0, r2
   d63cc:	4619      	movne	r1, r3
   d63ce:	d10a      	bne.n	d63e6 <__aeabi_dmul+0x24a>
   d63d0:	ea81 0103 	eor.w	r1, r1, r3
   d63d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d63d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d63dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d63e0:	f04f 0000 	mov.w	r0, #0
   d63e4:	bd70      	pop	{r4, r5, r6, pc}
   d63e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d63ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d63ee:	bd70      	pop	{r4, r5, r6, pc}

000d63f0 <__aeabi_ddiv>:
   d63f0:	b570      	push	{r4, r5, r6, lr}
   d63f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d63f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d63fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d63fe:	bf1d      	ittte	ne
   d6400:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6404:	ea94 0f0c 	teqne	r4, ip
   d6408:	ea95 0f0c 	teqne	r5, ip
   d640c:	f000 f8a7 	bleq	d655e <__aeabi_ddiv+0x16e>
   d6410:	eba4 0405 	sub.w	r4, r4, r5
   d6414:	ea81 0e03 	eor.w	lr, r1, r3
   d6418:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d641c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6420:	f000 8088 	beq.w	d6534 <__aeabi_ddiv+0x144>
   d6424:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6428:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d642c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6430:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6434:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6438:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d643c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6440:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6444:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6448:	429d      	cmp	r5, r3
   d644a:	bf08      	it	eq
   d644c:	4296      	cmpeq	r6, r2
   d644e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6452:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6456:	d202      	bcs.n	d645e <__aeabi_ddiv+0x6e>
   d6458:	085b      	lsrs	r3, r3, #1
   d645a:	ea4f 0232 	mov.w	r2, r2, rrx
   d645e:	1ab6      	subs	r6, r6, r2
   d6460:	eb65 0503 	sbc.w	r5, r5, r3
   d6464:	085b      	lsrs	r3, r3, #1
   d6466:	ea4f 0232 	mov.w	r2, r2, rrx
   d646a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d646e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6472:	ebb6 0e02 	subs.w	lr, r6, r2
   d6476:	eb75 0e03 	sbcs.w	lr, r5, r3
   d647a:	bf22      	ittt	cs
   d647c:	1ab6      	subcs	r6, r6, r2
   d647e:	4675      	movcs	r5, lr
   d6480:	ea40 000c 	orrcs.w	r0, r0, ip
   d6484:	085b      	lsrs	r3, r3, #1
   d6486:	ea4f 0232 	mov.w	r2, r2, rrx
   d648a:	ebb6 0e02 	subs.w	lr, r6, r2
   d648e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6492:	bf22      	ittt	cs
   d6494:	1ab6      	subcs	r6, r6, r2
   d6496:	4675      	movcs	r5, lr
   d6498:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d649c:	085b      	lsrs	r3, r3, #1
   d649e:	ea4f 0232 	mov.w	r2, r2, rrx
   d64a2:	ebb6 0e02 	subs.w	lr, r6, r2
   d64a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d64aa:	bf22      	ittt	cs
   d64ac:	1ab6      	subcs	r6, r6, r2
   d64ae:	4675      	movcs	r5, lr
   d64b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d64b4:	085b      	lsrs	r3, r3, #1
   d64b6:	ea4f 0232 	mov.w	r2, r2, rrx
   d64ba:	ebb6 0e02 	subs.w	lr, r6, r2
   d64be:	eb75 0e03 	sbcs.w	lr, r5, r3
   d64c2:	bf22      	ittt	cs
   d64c4:	1ab6      	subcs	r6, r6, r2
   d64c6:	4675      	movcs	r5, lr
   d64c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d64cc:	ea55 0e06 	orrs.w	lr, r5, r6
   d64d0:	d018      	beq.n	d6504 <__aeabi_ddiv+0x114>
   d64d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d64d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d64da:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d64de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d64e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d64e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d64ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d64ee:	d1c0      	bne.n	d6472 <__aeabi_ddiv+0x82>
   d64f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d64f4:	d10b      	bne.n	d650e <__aeabi_ddiv+0x11e>
   d64f6:	ea41 0100 	orr.w	r1, r1, r0
   d64fa:	f04f 0000 	mov.w	r0, #0
   d64fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6502:	e7b6      	b.n	d6472 <__aeabi_ddiv+0x82>
   d6504:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6508:	bf04      	itt	eq
   d650a:	4301      	orreq	r1, r0
   d650c:	2000      	moveq	r0, #0
   d650e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6512:	bf88      	it	hi
   d6514:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6518:	f63f aeaf 	bhi.w	d627a <__aeabi_dmul+0xde>
   d651c:	ebb5 0c03 	subs.w	ip, r5, r3
   d6520:	bf04      	itt	eq
   d6522:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6526:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d652a:	f150 0000 	adcs.w	r0, r0, #0
   d652e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6532:	bd70      	pop	{r4, r5, r6, pc}
   d6534:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6538:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d653c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6540:	bfc2      	ittt	gt
   d6542:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d654a:	bd70      	popgt	{r4, r5, r6, pc}
   d654c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6550:	f04f 0e00 	mov.w	lr, #0
   d6554:	3c01      	subs	r4, #1
   d6556:	e690      	b.n	d627a <__aeabi_dmul+0xde>
   d6558:	ea45 0e06 	orr.w	lr, r5, r6
   d655c:	e68d      	b.n	d627a <__aeabi_dmul+0xde>
   d655e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6562:	ea94 0f0c 	teq	r4, ip
   d6566:	bf08      	it	eq
   d6568:	ea95 0f0c 	teqeq	r5, ip
   d656c:	f43f af3b 	beq.w	d63e6 <__aeabi_dmul+0x24a>
   d6570:	ea94 0f0c 	teq	r4, ip
   d6574:	d10a      	bne.n	d658c <__aeabi_ddiv+0x19c>
   d6576:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d657a:	f47f af34 	bne.w	d63e6 <__aeabi_dmul+0x24a>
   d657e:	ea95 0f0c 	teq	r5, ip
   d6582:	f47f af25 	bne.w	d63d0 <__aeabi_dmul+0x234>
   d6586:	4610      	mov	r0, r2
   d6588:	4619      	mov	r1, r3
   d658a:	e72c      	b.n	d63e6 <__aeabi_dmul+0x24a>
   d658c:	ea95 0f0c 	teq	r5, ip
   d6590:	d106      	bne.n	d65a0 <__aeabi_ddiv+0x1b0>
   d6592:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6596:	f43f aefd 	beq.w	d6394 <__aeabi_dmul+0x1f8>
   d659a:	4610      	mov	r0, r2
   d659c:	4619      	mov	r1, r3
   d659e:	e722      	b.n	d63e6 <__aeabi_dmul+0x24a>
   d65a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d65a4:	bf18      	it	ne
   d65a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d65aa:	f47f aec5 	bne.w	d6338 <__aeabi_dmul+0x19c>
   d65ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d65b2:	f47f af0d 	bne.w	d63d0 <__aeabi_dmul+0x234>
   d65b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d65ba:	f47f aeeb 	bne.w	d6394 <__aeabi_dmul+0x1f8>
   d65be:	e712      	b.n	d63e6 <__aeabi_dmul+0x24a>

000d65c0 <__gedf2>:
   d65c0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d65c4:	e006      	b.n	d65d4 <__cmpdf2+0x4>
   d65c6:	bf00      	nop

000d65c8 <__ledf2>:
   d65c8:	f04f 0c01 	mov.w	ip, #1
   d65cc:	e002      	b.n	d65d4 <__cmpdf2+0x4>
   d65ce:	bf00      	nop

000d65d0 <__cmpdf2>:
   d65d0:	f04f 0c01 	mov.w	ip, #1
   d65d4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d65d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d65dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d65e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d65e4:	bf18      	it	ne
   d65e6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d65ea:	d01b      	beq.n	d6624 <__cmpdf2+0x54>
   d65ec:	b001      	add	sp, #4
   d65ee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d65f2:	bf0c      	ite	eq
   d65f4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d65f8:	ea91 0f03 	teqne	r1, r3
   d65fc:	bf02      	ittt	eq
   d65fe:	ea90 0f02 	teqeq	r0, r2
   d6602:	2000      	moveq	r0, #0
   d6604:	4770      	bxeq	lr
   d6606:	f110 0f00 	cmn.w	r0, #0
   d660a:	ea91 0f03 	teq	r1, r3
   d660e:	bf58      	it	pl
   d6610:	4299      	cmppl	r1, r3
   d6612:	bf08      	it	eq
   d6614:	4290      	cmpeq	r0, r2
   d6616:	bf2c      	ite	cs
   d6618:	17d8      	asrcs	r0, r3, #31
   d661a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d661e:	f040 0001 	orr.w	r0, r0, #1
   d6622:	4770      	bx	lr
   d6624:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6628:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d662c:	d102      	bne.n	d6634 <__cmpdf2+0x64>
   d662e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6632:	d107      	bne.n	d6644 <__cmpdf2+0x74>
   d6634:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6638:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d663c:	d1d6      	bne.n	d65ec <__cmpdf2+0x1c>
   d663e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6642:	d0d3      	beq.n	d65ec <__cmpdf2+0x1c>
   d6644:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6648:	4770      	bx	lr
   d664a:	bf00      	nop

000d664c <__aeabi_cdrcmple>:
   d664c:	4684      	mov	ip, r0
   d664e:	4610      	mov	r0, r2
   d6650:	4662      	mov	r2, ip
   d6652:	468c      	mov	ip, r1
   d6654:	4619      	mov	r1, r3
   d6656:	4663      	mov	r3, ip
   d6658:	e000      	b.n	d665c <__aeabi_cdcmpeq>
   d665a:	bf00      	nop

000d665c <__aeabi_cdcmpeq>:
   d665c:	b501      	push	{r0, lr}
   d665e:	f7ff ffb7 	bl	d65d0 <__cmpdf2>
   d6662:	2800      	cmp	r0, #0
   d6664:	bf48      	it	mi
   d6666:	f110 0f00 	cmnmi.w	r0, #0
   d666a:	bd01      	pop	{r0, pc}

000d666c <__aeabi_dcmpeq>:
   d666c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6670:	f7ff fff4 	bl	d665c <__aeabi_cdcmpeq>
   d6674:	bf0c      	ite	eq
   d6676:	2001      	moveq	r0, #1
   d6678:	2000      	movne	r0, #0
   d667a:	f85d fb08 	ldr.w	pc, [sp], #8
   d667e:	bf00      	nop

000d6680 <__aeabi_dcmplt>:
   d6680:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6684:	f7ff ffea 	bl	d665c <__aeabi_cdcmpeq>
   d6688:	bf34      	ite	cc
   d668a:	2001      	movcc	r0, #1
   d668c:	2000      	movcs	r0, #0
   d668e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6692:	bf00      	nop

000d6694 <__aeabi_dcmple>:
   d6694:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6698:	f7ff ffe0 	bl	d665c <__aeabi_cdcmpeq>
   d669c:	bf94      	ite	ls
   d669e:	2001      	movls	r0, #1
   d66a0:	2000      	movhi	r0, #0
   d66a2:	f85d fb08 	ldr.w	pc, [sp], #8
   d66a6:	bf00      	nop

000d66a8 <__aeabi_dcmpge>:
   d66a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d66ac:	f7ff ffce 	bl	d664c <__aeabi_cdrcmple>
   d66b0:	bf94      	ite	ls
   d66b2:	2001      	movls	r0, #1
   d66b4:	2000      	movhi	r0, #0
   d66b6:	f85d fb08 	ldr.w	pc, [sp], #8
   d66ba:	bf00      	nop

000d66bc <__aeabi_dcmpgt>:
   d66bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d66c0:	f7ff ffc4 	bl	d664c <__aeabi_cdrcmple>
   d66c4:	bf34      	ite	cc
   d66c6:	2001      	movcc	r0, #1
   d66c8:	2000      	movcs	r0, #0
   d66ca:	f85d fb08 	ldr.w	pc, [sp], #8
   d66ce:	bf00      	nop

000d66d0 <__aeabi_dcmpun>:
   d66d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d66d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d66d8:	d102      	bne.n	d66e0 <__aeabi_dcmpun+0x10>
   d66da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d66de:	d10a      	bne.n	d66f6 <__aeabi_dcmpun+0x26>
   d66e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d66e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d66e8:	d102      	bne.n	d66f0 <__aeabi_dcmpun+0x20>
   d66ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d66ee:	d102      	bne.n	d66f6 <__aeabi_dcmpun+0x26>
   d66f0:	f04f 0000 	mov.w	r0, #0
   d66f4:	4770      	bx	lr
   d66f6:	f04f 0001 	mov.w	r0, #1
   d66fa:	4770      	bx	lr

000d66fc <__aeabi_d2iz>:
   d66fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6700:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6704:	d215      	bcs.n	d6732 <__aeabi_d2iz+0x36>
   d6706:	d511      	bpl.n	d672c <__aeabi_d2iz+0x30>
   d6708:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d670c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6710:	d912      	bls.n	d6738 <__aeabi_d2iz+0x3c>
   d6712:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6716:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d671a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d671e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6722:	fa23 f002 	lsr.w	r0, r3, r2
   d6726:	bf18      	it	ne
   d6728:	4240      	negne	r0, r0
   d672a:	4770      	bx	lr
   d672c:	f04f 0000 	mov.w	r0, #0
   d6730:	4770      	bx	lr
   d6732:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6736:	d105      	bne.n	d6744 <__aeabi_d2iz+0x48>
   d6738:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d673c:	bf08      	it	eq
   d673e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6742:	4770      	bx	lr
   d6744:	f04f 0000 	mov.w	r0, #0
   d6748:	4770      	bx	lr
   d674a:	bf00      	nop

000d674c <__aeabi_d2uiz>:
   d674c:	004a      	lsls	r2, r1, #1
   d674e:	d211      	bcs.n	d6774 <__aeabi_d2uiz+0x28>
   d6750:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6754:	d211      	bcs.n	d677a <__aeabi_d2uiz+0x2e>
   d6756:	d50d      	bpl.n	d6774 <__aeabi_d2uiz+0x28>
   d6758:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d675c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6760:	d40e      	bmi.n	d6780 <__aeabi_d2uiz+0x34>
   d6762:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d676a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d676e:	fa23 f002 	lsr.w	r0, r3, r2
   d6772:	4770      	bx	lr
   d6774:	f04f 0000 	mov.w	r0, #0
   d6778:	4770      	bx	lr
   d677a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d677e:	d102      	bne.n	d6786 <__aeabi_d2uiz+0x3a>
   d6780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6784:	4770      	bx	lr
   d6786:	f04f 0000 	mov.w	r0, #0
   d678a:	4770      	bx	lr

000d678c <__aeabi_d2f>:
   d678c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6790:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6794:	bf24      	itt	cs
   d6796:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d679a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d679e:	d90d      	bls.n	d67bc <__aeabi_d2f+0x30>
   d67a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d67a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d67a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d67ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d67b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d67b4:	bf08      	it	eq
   d67b6:	f020 0001 	biceq.w	r0, r0, #1
   d67ba:	4770      	bx	lr
   d67bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d67c0:	d121      	bne.n	d6806 <__aeabi_d2f+0x7a>
   d67c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d67c6:	bfbc      	itt	lt
   d67c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d67cc:	4770      	bxlt	lr
   d67ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d67d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d67d6:	f1c2 0218 	rsb	r2, r2, #24
   d67da:	f1c2 0c20 	rsb	ip, r2, #32
   d67de:	fa10 f30c 	lsls.w	r3, r0, ip
   d67e2:	fa20 f002 	lsr.w	r0, r0, r2
   d67e6:	bf18      	it	ne
   d67e8:	f040 0001 	orrne.w	r0, r0, #1
   d67ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d67f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d67f4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d67f8:	ea40 000c 	orr.w	r0, r0, ip
   d67fc:	fa23 f302 	lsr.w	r3, r3, r2
   d6800:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6804:	e7cc      	b.n	d67a0 <__aeabi_d2f+0x14>
   d6806:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d680a:	d107      	bne.n	d681c <__aeabi_d2f+0x90>
   d680c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6810:	bf1e      	ittt	ne
   d6812:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6816:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d681a:	4770      	bxne	lr
   d681c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6820:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6824:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6828:	4770      	bx	lr
   d682a:	bf00      	nop

000d682c <atexit>:
   d682c:	2300      	movs	r3, #0
   d682e:	4601      	mov	r1, r0
   d6830:	461a      	mov	r2, r3
   d6832:	4618      	mov	r0, r3
   d6834:	f000 b842 	b.w	d68bc <__register_exitproc>

000d6838 <memcpy>:
   d6838:	440a      	add	r2, r1
   d683a:	4291      	cmp	r1, r2
   d683c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6840:	d100      	bne.n	d6844 <memcpy+0xc>
   d6842:	4770      	bx	lr
   d6844:	b510      	push	{r4, lr}
   d6846:	f811 4b01 	ldrb.w	r4, [r1], #1
   d684a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d684e:	4291      	cmp	r1, r2
   d6850:	d1f9      	bne.n	d6846 <memcpy+0xe>
   d6852:	bd10      	pop	{r4, pc}

000d6854 <memset>:
   d6854:	4402      	add	r2, r0
   d6856:	4603      	mov	r3, r0
   d6858:	4293      	cmp	r3, r2
   d685a:	d100      	bne.n	d685e <memset+0xa>
   d685c:	4770      	bx	lr
   d685e:	f803 1b01 	strb.w	r1, [r3], #1
   d6862:	e7f9      	b.n	d6858 <memset+0x4>

000d6864 <srand>:
   d6864:	b538      	push	{r3, r4, r5, lr}
   d6866:	4b0d      	ldr	r3, [pc, #52]	; (d689c <srand+0x38>)
   d6868:	681d      	ldr	r5, [r3, #0]
   d686a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d686c:	4604      	mov	r4, r0
   d686e:	b97b      	cbnz	r3, d6890 <srand+0x2c>
   d6870:	2018      	movs	r0, #24
   d6872:	f7fe f9fd 	bl	d4c70 <malloc>
   d6876:	4a0a      	ldr	r2, [pc, #40]	; (d68a0 <srand+0x3c>)
   d6878:	4b0a      	ldr	r3, [pc, #40]	; (d68a4 <srand+0x40>)
   d687a:	63a8      	str	r0, [r5, #56]	; 0x38
   d687c:	e9c0 2300 	strd	r2, r3, [r0]
   d6880:	4b09      	ldr	r3, [pc, #36]	; (d68a8 <srand+0x44>)
   d6882:	6083      	str	r3, [r0, #8]
   d6884:	230b      	movs	r3, #11
   d6886:	8183      	strh	r3, [r0, #12]
   d6888:	2201      	movs	r2, #1
   d688a:	2300      	movs	r3, #0
   d688c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6890:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6892:	2200      	movs	r2, #0
   d6894:	611c      	str	r4, [r3, #16]
   d6896:	615a      	str	r2, [r3, #20]
   d6898:	bd38      	pop	{r3, r4, r5, pc}
   d689a:	bf00      	nop
   d689c:	2003e4dc 	.word	0x2003e4dc
   d68a0:	abcd330e 	.word	0xabcd330e
   d68a4:	e66d1234 	.word	0xe66d1234
   d68a8:	0005deec 	.word	0x0005deec

000d68ac <strlen>:
   d68ac:	4603      	mov	r3, r0
   d68ae:	f813 2b01 	ldrb.w	r2, [r3], #1
   d68b2:	2a00      	cmp	r2, #0
   d68b4:	d1fb      	bne.n	d68ae <strlen+0x2>
   d68b6:	1a18      	subs	r0, r3, r0
   d68b8:	3801      	subs	r0, #1
   d68ba:	4770      	bx	lr

000d68bc <__register_exitproc>:
   d68bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d68c0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d697c <__register_exitproc+0xc0>
   d68c4:	4606      	mov	r6, r0
   d68c6:	f8d8 0000 	ldr.w	r0, [r8]
   d68ca:	461f      	mov	r7, r3
   d68cc:	460d      	mov	r5, r1
   d68ce:	4691      	mov	r9, r2
   d68d0:	f000 f856 	bl	d6980 <__retarget_lock_acquire_recursive>
   d68d4:	4b25      	ldr	r3, [pc, #148]	; (d696c <__register_exitproc+0xb0>)
   d68d6:	681c      	ldr	r4, [r3, #0]
   d68d8:	b934      	cbnz	r4, d68e8 <__register_exitproc+0x2c>
   d68da:	4c25      	ldr	r4, [pc, #148]	; (d6970 <__register_exitproc+0xb4>)
   d68dc:	601c      	str	r4, [r3, #0]
   d68de:	4b25      	ldr	r3, [pc, #148]	; (d6974 <__register_exitproc+0xb8>)
   d68e0:	b113      	cbz	r3, d68e8 <__register_exitproc+0x2c>
   d68e2:	681b      	ldr	r3, [r3, #0]
   d68e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d68e8:	6863      	ldr	r3, [r4, #4]
   d68ea:	2b1f      	cmp	r3, #31
   d68ec:	dd07      	ble.n	d68fe <__register_exitproc+0x42>
   d68ee:	f8d8 0000 	ldr.w	r0, [r8]
   d68f2:	f000 f847 	bl	d6984 <__retarget_lock_release_recursive>
   d68f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d68fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d68fe:	b34e      	cbz	r6, d6954 <__register_exitproc+0x98>
   d6900:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d6904:	b988      	cbnz	r0, d692a <__register_exitproc+0x6e>
   d6906:	4b1c      	ldr	r3, [pc, #112]	; (d6978 <__register_exitproc+0xbc>)
   d6908:	b923      	cbnz	r3, d6914 <__register_exitproc+0x58>
   d690a:	f8d8 0000 	ldr.w	r0, [r8]
   d690e:	f000 f838 	bl	d6982 <__retarget_lock_release>
   d6912:	e7f0      	b.n	d68f6 <__register_exitproc+0x3a>
   d6914:	f44f 7084 	mov.w	r0, #264	; 0x108
   d6918:	f7fe f9aa 	bl	d4c70 <malloc>
   d691c:	2800      	cmp	r0, #0
   d691e:	d0f4      	beq.n	d690a <__register_exitproc+0x4e>
   d6920:	2300      	movs	r3, #0
   d6922:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d6926:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d692a:	6863      	ldr	r3, [r4, #4]
   d692c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d6930:	2201      	movs	r2, #1
   d6932:	409a      	lsls	r2, r3
   d6934:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d6938:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d693c:	4313      	orrs	r3, r2
   d693e:	2e02      	cmp	r6, #2
   d6940:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d6944:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d6948:	bf02      	ittt	eq
   d694a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d694e:	431a      	orreq	r2, r3
   d6950:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d6954:	6863      	ldr	r3, [r4, #4]
   d6956:	f8d8 0000 	ldr.w	r0, [r8]
   d695a:	1c5a      	adds	r2, r3, #1
   d695c:	3302      	adds	r3, #2
   d695e:	6062      	str	r2, [r4, #4]
   d6960:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d6964:	f000 f80e 	bl	d6984 <__retarget_lock_release_recursive>
   d6968:	2000      	movs	r0, #0
   d696a:	e7c6      	b.n	d68fa <__register_exitproc+0x3e>
   d696c:	2003e7e0 	.word	0x2003e7e0
   d6970:	2003e754 	.word	0x2003e754
   d6974:	00000000 	.word	0x00000000
   d6978:	000d4c71 	.word	0x000d4c71
   d697c:	2003e540 	.word	0x2003e540

000d6980 <__retarget_lock_acquire_recursive>:
   d6980:	4770      	bx	lr

000d6982 <__retarget_lock_release>:
   d6982:	4770      	bx	lr

000d6984 <__retarget_lock_release_recursive>:
   d6984:	4770      	bx	lr

000d6986 <link_code_end>:
	...

000d6988 <dynalib_user>:
   d6988:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d6998:	0000 0000 0020 0000                         .... ...

000d69a0 <_ZTVN5spark13EthernetClassE>:
	...
   d69a8:	4d27 000d 4d1d 000d 4d13 000d 4d09 000d     'M...M...M...M..
   d69b8:	4cfd 000d 4cf1 000d 4f69 000d 4f71 000d     .L...L..iO..qO..
   d69c8:	4ce5 000d 4cdd 000d 4cd3 000d 4cc9 000d     .L...L...L...L..
   d69d8:	4fa1 000d                                   .O..

000d69dc <_ZTV7TwoWire>:
	...
   d69e4:	4d45 000d 4d8f 000d 4d67 000d 4d47 000d     EM...M..gM..GM..
   d69f4:	4d6f 000d 4d77 000d 4d7f 000d 4d87 000d     oM..wM...M...M..

000d6a04 <_ZTV9IPAddress>:
	...
   d6a0c:	4e45 000d 4e35 000d 4e37 000d 7061 0070     EN..5N..7N..app.

000d6a1c <_ZTVN5spark12NetworkClassE>:
	...
   d6a24:	4f29 000d 4f33 000d 4f3d 000d 4f47 000d     )O..3O..=O..GO..
   d6a34:	4f51 000d 4f5d 000d 4f69 000d 4f71 000d     QO..]O..iO..qO..
   d6a44:	4f79 000d 4f85 000d 4f8d 000d 4f97 000d     yO...O...O...O..
   d6a54:	4fa1 000d 616e 006e 6e69 0066 766f 0066     .O..nan.inf.ovf.
   d6a64:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
   d6a74:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d6a84 <_ZTV11USARTSerial>:
	...
   d6a8c:	5379 000d 53e7 000d 53bf 000d 5089 000d     yS...S...S...P..
   d6a9c:	538f 000d 53ab 000d 539d 000d 53b9 000d     .S...S...S...S..
   d6aac:	537b 000d 5381 000d                         {S...S..

000d6ab4 <_ZTV9USBSerial>:
	...
   d6abc:	5473 000d 54db 000d 54b1 000d 5089 000d     sT...T...T...P..
   d6acc:	54a3 000d 5475 000d 5485 000d 54d5 000d     .T..uT...T...T..
   d6adc:	5495 000d 546d 000d                         .T..mT..

000d6ae4 <_ZTVN5spark9WiFiClassE>:
	...
   d6aec:	55db 000d 55d1 000d 55c7 000d 557d 000d     .U...U...U..}U..
   d6afc:	55bb 000d 55af 000d 4f69 000d 4f71 000d     .U...U..iO..qO..
   d6b0c:	55a3 000d 559b 000d 5591 000d 5587 000d     .U...U...U...U..
   d6b1c:	4fa1 000d                                   .O..

000d6b20 <_ZSt7nothrow>:
	...

000d6b28 <atanhi>:
   d6b28:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   d6b38:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000d6b48 <atanlo>:
   d6b48:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   d6b58:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<
   d6b68:	7173 7472                                    sqrt.

000d6b6d <link_const_variable_data_end>:
   d6b6d:	00          	.byte	0x00
	...

000d6b70 <link_constructors_location>:
   d6b70:	000d48b1 	.word	0x000d48b1
   d6b74:	000d4cb9 	.word	0x000d4cb9
   d6b78:	000d4d31 	.word	0x000d4d31
   d6b7c:	000d4f19 	.word	0x000d4f19
   d6b80:	000d5075 	.word	0x000d5075
   d6b84:	000d5321 	.word	0x000d5321
   d6b88:	000d5341 	.word	0x000d5341
   d6b8c:	000d5365 	.word	0x000d5365
   d6b90:	000d55e5 	.word	0x000d55e5

000d6b94 <link_constructors_end>:
	...
