
/Users/maximegordon/Desktop/ParticleMG/maxime-harness/target/2.2.0/photon/maxime-harness.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002804  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2820  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  080a2824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000610  20000074  20000074  00030074  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2898  080a2898  00022898  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a28c0  080a28c0  000228c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00127dec  00000000  00000000  000228c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014e73  00000000  00000000  0014a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f13b  00000000  00000000  0015f523  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000028e8  00000000  00000000  0017e65e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005318  00000000  00000000  00180f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000287d7  00000000  00000000  0018625e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00031336  00000000  00000000  001aea35  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1f58  00000000  00000000  001dfd6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006c54  00000000  00000000  00291cc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fa0f 	bl	80a2450 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fa17 	bl	80a246c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2824 	.word	0x080a2824
 80a004c:	20000074 	.word	0x20000074
 80a0050:	20000074 	.word	0x20000074
 80a0054:	20000681 	.word	0x20000681
 80a0058:	20000681 	.word	0x20000681

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fcb5 	bl	80a19cc <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a27fc 	.word	0x080a27fc
 80a0080:	080a281c 	.word	0x080a281c

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b814 	b.w	80a00b0 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f873 	bl	80a0174 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 bc53 	b.w	80a193c <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f000 bd95 	b.w	80a0bc4 <malloc>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f000 bd9b 	b.w	80a0bd4 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:
//setup()
//join I2C bus
//start Serial communication
//blink LED to show its sending 
//initialize UDP communication
void setup() {
 80a00b0:	b538      	push	{r3, r4, r5, lr}
    // join I2C bus (I2Cdev library doesn't do this automatically)
    #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
 80a00b2:	f001 fd4b 	bl	80a1b4c <_Z19__fetch_global_Wirev>
 80a00b6:	f000 fde7 	bl	80a0c88 <_ZN7TwoWire5beginEv>
    #endif

    // initialize serial communication
    // (38400 chosen because it works as well at 8MHz as it does at 16MHz, but
    // it's really up to you depending on your project)
    Serial.begin(38400);
 80a00ba:	f001 fb4b 	bl	80a1754 <_Z16_fetch_usbserialv>
 80a00be:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 80a00c2:	f001 fb2d 	bl	80a1720 <_ZN9USBSerial5beginEl>

    // initialize device
    Serial.println("Initializing I2C devices...");
 80a00c6:	f001 fb45 	bl	80a1754 <_Z16_fetch_usbserialv>
 80a00ca:	4920      	ldr	r1, [pc, #128]	; (80a014c <setup+0x9c>)
 80a00cc:	f000 ff41 	bl	80a0f52 <_ZN5Print7printlnEPKc>
    accelgyro.initialize();
 80a00d0:	481f      	ldr	r0, [pc, #124]	; (80a0150 <setup+0xa0>)
 80a00d2:	f000 fa58 	bl	80a0586 <_ZN7MPU605010initializeEv>

    // verify connection
    Serial.println("Testing device connections...");
 80a00d6:	f001 fb3d 	bl	80a1754 <_Z16_fetch_usbserialv>
 80a00da:	491e      	ldr	r1, [pc, #120]	; (80a0154 <setup+0xa4>)
 80a00dc:	f000 ff39 	bl	80a0f52 <_ZN5Print7printlnEPKc>
    Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
 80a00e0:	f001 fb38 	bl	80a1754 <_Z16_fetch_usbserialv>
 80a00e4:	4604      	mov	r4, r0
 80a00e6:	481a      	ldr	r0, [pc, #104]	; (80a0150 <setup+0xa0>)
 80a00e8:	f000 fa74 	bl	80a05d4 <_ZN7MPU605014testConnectionEv>
 80a00ec:	4a1a      	ldr	r2, [pc, #104]	; (80a0158 <setup+0xa8>)
 80a00ee:	491b      	ldr	r1, [pc, #108]	; (80a015c <setup+0xac>)
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a00f0:	4d1b      	ldr	r5, [pc, #108]	; (80a0160 <setup+0xb0>)
 80a00f2:	2800      	cmp	r0, #0
 80a00f4:	bf18      	it	ne
 80a00f6:	4611      	movne	r1, r2
 80a00f8:	4620      	mov	r0, r4
 80a00fa:	f000 ff2a 	bl	80a0f52 <_ZN5Print7printlnEPKc>

    // configure Arduino LED for
    pinMode(LED_PIN, OUTPUT);
 80a00fe:	2101      	movs	r1, #1
 80a0100:	2007      	movs	r0, #7
 80a0102:	f001 fcdf 	bl	80a1ac4 <pinMode>

     // Serial.begin(115200);
    udp.begin(0);//necessary even for sending only.
 80a0106:	2200      	movs	r2, #0
 80a0108:	4816      	ldr	r0, [pc, #88]	; (80a0164 <setup+0xb4>)
 80a010a:	4611      	mov	r1, r2
 80a010c:	f001 f854 	bl	80a11b8 <_ZN3UDP5beginEtm>
    while (!WiFi.ready())
    {
        delay(500);
        Serial.print(".");
 80a0110:	4c15      	ldr	r4, [pc, #84]	; (80a0168 <setup+0xb8>)
 80a0112:	2200      	movs	r2, #0
 80a0114:	6868      	ldr	r0, [r5, #4]
 80a0116:	4611      	mov	r1, r2
 80a0118:	f000 fd0c 	bl	80a0b34 <network_ready>
    while (!WiFi.ready())
 80a011c:	b948      	cbnz	r0, 80a0132 <setup+0x82>
        delay(500);
 80a011e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0122:	f000 fd6f 	bl	80a0c04 <delay>
        Serial.print(".");
 80a0126:	f001 fb15 	bl	80a1754 <_Z16_fetch_usbserialv>
 80a012a:	4621      	mov	r1, r4
 80a012c:	f000 fefe 	bl	80a0f2c <_ZN5Print5printEPKc>
    while (!WiFi.ready())
 80a0130:	e7ef      	b.n	80a0112 <setup+0x62>
    }
    Serial.println("");
 80a0132:	f001 fb0f 	bl	80a1754 <_Z16_fetch_usbserialv>
 80a0136:	490d      	ldr	r1, [pc, #52]	; (80a016c <setup+0xbc>)
 80a0138:	f000 ff0b 	bl	80a0f52 <_ZN5Print7printlnEPKc>
    Serial.println("WiFi connected");
 80a013c:	f001 fb0a 	bl	80a1754 <_Z16_fetch_usbserialv>
}
 80a0140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println("WiFi connected");
 80a0144:	490a      	ldr	r1, [pc, #40]	; (80a0170 <setup+0xc0>)
 80a0146:	f000 bf04 	b.w	80a0f52 <_ZN5Print7printlnEPKc>
 80a014a:	bf00      	nop
 80a014c:	080a2600 	.word	0x080a2600
 80a0150:	2000008c 	.word	0x2000008c
 80a0154:	080a261c 	.word	0x080a261c
 80a0158:	080a25c8 	.word	0x080a25c8
 80a015c:	080a25e6 	.word	0x080a25e6
 80a0160:	20000594 	.word	0x20000594
 80a0164:	200000c4 	.word	0x200000c4
 80a0168:	080a261a 	.word	0x080a261a
 80a016c:	080a261b 	.word	0x080a261b
 80a0170:	080a263a 	.word	0x080a263a

080a0174 <loop>:
//
//read acceleration from the sensor 
//send accel values via OSC
//blink LED to show its sending 
//
void loop() {
 80a0174:	b5f0      	push	{r4, r5, r6, r7, lr}
    // read raw accel/gyro measurements from device
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
 80a0176:	4b30      	ldr	r3, [pc, #192]	; (80a0238 <loop+0xc4>)
void loop() {
 80a0178:	b0a1      	sub	sp, #132	; 0x84
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
 80a017a:	9302      	str	r3, [sp, #8]
 80a017c:	4b2f      	ldr	r3, [pc, #188]	; (80a023c <loop+0xc8>)
 80a017e:	4f30      	ldr	r7, [pc, #192]	; (80a0240 <loop+0xcc>)
 80a0180:	4c30      	ldr	r4, [pc, #192]	; (80a0244 <loop+0xd0>)
 80a0182:	4d31      	ldr	r5, [pc, #196]	; (80a0248 <loop+0xd4>)
 80a0184:	9301      	str	r3, [sp, #4]
 80a0186:	4b31      	ldr	r3, [pc, #196]	; (80a024c <loop+0xd8>)
 80a0188:	4622      	mov	r2, r4
 80a018a:	4629      	mov	r1, r5
 80a018c:	9300      	str	r3, [sp, #0]
 80a018e:	4830      	ldr	r0, [pc, #192]	; (80a0250 <loop+0xdc>)
 80a0190:	463b      	mov	r3, r7
 80a0192:	f000 f9b3 	bl	80a04fc <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>
    
    //divide by 16384 according to datasheet of sensor (see https://howtomechatronics.com/tutorials/arduino/arduino-and-mpu6050-accelerometer-and-gyroscope-tutorial/)
    AccX = ax/ 16384.0;
 80a0196:	f9b5 0000 	ldrsh.w	r0, [r5]
 80a019a:	f001 fe5f 	bl	80a1e5c <__aeabi_i2d>
 80a019e:	2200      	movs	r2, #0
 80a01a0:	4b2c      	ldr	r3, [pc, #176]	; (80a0254 <loop+0xe0>)
 80a01a2:	f001 fec5 	bl	80a1f30 <__aeabi_dmul>
 80a01a6:	f002 f8fd 	bl	80a23a4 <__aeabi_d2f>
 80a01aa:	4e2b      	ldr	r6, [pc, #172]	; (80a0258 <loop+0xe4>)
    AccY = ay/ 16384.0;
 80a01ac:	4d2b      	ldr	r5, [pc, #172]	; (80a025c <loop+0xe8>)
    AccX = ax/ 16384.0;
 80a01ae:	6030      	str	r0, [r6, #0]
    AccY = ay/ 16384.0;
 80a01b0:	f9b4 0000 	ldrsh.w	r0, [r4]
 80a01b4:	f001 fe52 	bl	80a1e5c <__aeabi_i2d>
 80a01b8:	2200      	movs	r2, #0
 80a01ba:	4b26      	ldr	r3, [pc, #152]	; (80a0254 <loop+0xe0>)
 80a01bc:	f001 feb8 	bl	80a1f30 <__aeabi_dmul>
 80a01c0:	f002 f8f0 	bl	80a23a4 <__aeabi_d2f>
 80a01c4:	6028      	str	r0, [r5, #0]
    AccZ= az/16384.0;
 80a01c6:	f9b7 0000 	ldrsh.w	r0, [r7]
 80a01ca:	f001 fe47 	bl	80a1e5c <__aeabi_i2d>
 80a01ce:	2200      	movs	r2, #0
 80a01d0:	4b20      	ldr	r3, [pc, #128]	; (80a0254 <loop+0xe0>)
 80a01d2:	f001 fead 	bl	80a1f30 <__aeabi_dmul>
 80a01d6:	f002 f8e5 	bl	80a23a4 <__aeabi_d2f>
    // GyroX = gx/ 131.0;
    // GyroY = gy/ 131.0;
    // GyroZ= gz/ 131.0;;

    // blink LED to indicate activity
    blinkState = !blinkState;
 80a01da:	4b21      	ldr	r3, [pc, #132]	; (80a0260 <loop+0xec>)
    AccZ= az/16384.0;
 80a01dc:	4c21      	ldr	r4, [pc, #132]	; (80a0264 <loop+0xf0>)
    blinkState = !blinkState;
 80a01de:	7819      	ldrb	r1, [r3, #0]
    AccZ= az/16384.0;
 80a01e0:	6020      	str	r0, [r4, #0]
    blinkState = !blinkState;
 80a01e2:	f081 0101 	eor.w	r1, r1, #1
    digitalWrite(LED_PIN, blinkState);
 80a01e6:	2007      	movs	r0, #7
    blinkState = !blinkState;
 80a01e8:	7019      	strb	r1, [r3, #0]
    digitalWrite(LED_PIN, blinkState);
 80a01ea:	f001 fc7c 	bl	80a1ae6 <digitalWrite>
    
    //SEND OSC (to Max) 
    OSCMessage outMessage("/maxime");
 80a01ee:	491e      	ldr	r1, [pc, #120]	; (80a0268 <loop+0xf4>)
 80a01f0:	a80b      	add	r0, sp, #44	; 0x2c
 80a01f2:	f000 f9ff 	bl	80a05f4 <_ZN10OSCMessageC1EPKc>
    outMessage.addFloat(AccX);
 80a01f6:	6831      	ldr	r1, [r6, #0]
 80a01f8:	a80b      	add	r0, sp, #44	; 0x2c
 80a01fa:	f000 fa3c 	bl	80a0676 <_ZN10OSCMessage8addFloatEf>
    outMessage.addFloat(AccY);
 80a01fe:	6829      	ldr	r1, [r5, #0]
 80a0200:	a80b      	add	r0, sp, #44	; 0x2c
 80a0202:	f000 fa38 	bl	80a0676 <_ZN10OSCMessage8addFloatEf>
    outMessage.addFloat(AccZ);
 80a0206:	6821      	ldr	r1, [r4, #0]
 80a0208:	a80b      	add	r0, sp, #44	; 0x2c
 80a020a:	f000 fa34 	bl	80a0676 <_ZN10OSCMessage8addFloatEf>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a020e:	4d17      	ldr	r5, [pc, #92]	; (80a026c <loop+0xf8>)
 80a0210:	4b17      	ldr	r3, [pc, #92]	; (80a0270 <loop+0xfc>)
 80a0212:	ac06      	add	r4, sp, #24
 80a0214:	9305      	str	r3, [sp, #20]
 80a0216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a021a:	682b      	ldr	r3, [r5, #0]
    outMessage.send(udp,outIp,outPort);
 80a021c:	4915      	ldr	r1, [pc, #84]	; (80a0274 <loop+0x100>)
 80a021e:	7023      	strb	r3, [r4, #0]
 80a0220:	4b15      	ldr	r3, [pc, #84]	; (80a0278 <loop+0x104>)
 80a0222:	aa05      	add	r2, sp, #20
 80a0224:	681b      	ldr	r3, [r3, #0]
 80a0226:	a80b      	add	r0, sp, #44	; 0x2c
 80a0228:	f000 fa4e 	bl	80a06c8 <_ZN10OSCMessage4sendER3UDP9IPAddressj>
    OSCMessage outMessage("/maxime");
 80a022c:	a80b      	add	r0, sp, #44	; 0x2c
 80a022e:	f000 fa05 	bl	80a063c <_ZN10OSCMessageD1Ev>
};
 80a0232:	b021      	add	sp, #132	; 0x84
 80a0234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0236:	bf00      	nop
 80a0238:	200000a8 	.word	0x200000a8
 80a023c:	200000a6 	.word	0x200000a6
 80a0240:	200000a0 	.word	0x200000a0
 80a0244:	2000009e 	.word	0x2000009e
 80a0248:	2000009c 	.word	0x2000009c
 80a024c:	200000a4 	.word	0x200000a4
 80a0250:	2000008c 	.word	0x2000008c
 80a0254:	3f100000 	.word	0x3f100000
 80a0258:	20000074 	.word	0x20000074
 80a025c:	20000078 	.word	0x20000078
 80a0260:	200000a2 	.word	0x200000a2
 80a0264:	2000007c 	.word	0x2000007c
 80a0268:	080a2649 	.word	0x080a2649
 80a026c:	200000b0 	.word	0x200000b0
 80a0270:	080a2684 	.word	0x080a2684
 80a0274:	200000c4 	.word	0x200000c4
 80a0278:	20000000 	.word	0x20000000

080a027c <_GLOBAL__sub_I_SystemMode>:
 80a027c:	b507      	push	{r0, r1, r2, lr}
SYSTEM_THREAD(ENABLED);
 80a027e:	2100      	movs	r1, #0
 80a0280:	2001      	movs	r0, #1
 80a0282:	f000 fc1b 	bl	80a0abc <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0286:	2200      	movs	r2, #0
 80a0288:	4b0d      	ldr	r3, [pc, #52]	; (80a02c0 <_GLOBAL__sub_I_SystemMode+0x44>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a028a:	2001      	movs	r0, #1
              error_(SYSTEM_ERROR_NONE) {
 80a028c:	601a      	str	r2, [r3, #0]
 80a028e:	809a      	strh	r2, [r3, #4]
    SleepResult() {}
 80a0290:	719a      	strb	r2, [r3, #6]
 80a0292:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80a0296:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 80a0298:	f000 fc00 	bl	80a0a9c <set_system_mode>
UDP udp;
 80a029c:	4809      	ldr	r0, [pc, #36]	; (80a02c4 <_GLOBAL__sub_I_SystemMode+0x48>)
 80a029e:	f001 f8d5 	bl	80a144c <_ZN3UDPC1Ev>
IPAddress outIp(192, 168, 1, 106); //your computer IP//Need to reconfigure for each new wifi network ! 
 80a02a2:	236a      	movs	r3, #106	; 0x6a
 80a02a4:	22a8      	movs	r2, #168	; 0xa8
 80a02a6:	9300      	str	r3, [sp, #0]
 80a02a8:	21c0      	movs	r1, #192	; 0xc0
 80a02aa:	2301      	movs	r3, #1
 80a02ac:	4806      	ldr	r0, [pc, #24]	; (80a02c8 <_GLOBAL__sub_I_SystemMode+0x4c>)
 80a02ae:	f000 fd7f 	bl	80a0db0 <_ZN9IPAddressC1Ehhhh>
MPU6050 accelgyro;
 80a02b2:	4806      	ldr	r0, [pc, #24]	; (80a02cc <_GLOBAL__sub_I_SystemMode+0x50>)
};
 80a02b4:	b003      	add	sp, #12
 80a02b6:	f85d eb04 	ldr.w	lr, [sp], #4
MPU6050 accelgyro;
 80a02ba:	f000 b905 	b.w	80a04c8 <_ZN7MPU6050C1Ev>
 80a02be:	bf00      	nop
 80a02c0:	20000080 	.word	0x20000080
 80a02c4:	200000c4 	.word	0x200000c4
 80a02c8:	200000ac 	.word	0x200000ac
 80a02cc:	2000008c 	.word	0x2000008c

080a02d0 <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
 80a02d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a02d4:	4616      	mov	r6, r2
 80a02d6:	469b      	mov	fp, r3
 80a02d8:	4607      	mov	r7, r0
 80a02da:	468a      	mov	sl, r1
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
 80a02dc:	2500      	movs	r5, #0
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
 80a02de:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a02e2:	f000 fa9f 	bl	80a0824 <HAL_Timer_Get_Milli_Seconds>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
 80a02e6:	2e20      	cmp	r6, #32
 80a02e8:	4633      	mov	r3, r6
 80a02ea:	bfa8      	it	ge
 80a02ec:	2320      	movge	r3, #32
 80a02ee:	4681      	mov	r9, r0
    int8_t count = 0;
 80a02f0:	462c      	mov	r4, r5
 80a02f2:	9301      	str	r3, [sp, #4]
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
 80a02f4:	42b5      	cmp	r5, r6
 80a02f6:	d23a      	bcs.n	80a036e <_ZN6I2Cdev9readBytesEhhhPht+0x9e>
                Wire.beginTransmission(devAddr);
 80a02f8:	f001 fc28 	bl	80a1b4c <_Z19__fetch_global_Wirev>
 80a02fc:	4639      	mov	r1, r7
 80a02fe:	f000 fcf5 	bl	80a0cec <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
 80a0302:	f001 fc23 	bl	80a1b4c <_Z19__fetch_global_Wirev>
 80a0306:	6803      	ldr	r3, [r0, #0]
 80a0308:	4651      	mov	r1, sl
 80a030a:	689b      	ldr	r3, [r3, #8]
 80a030c:	4798      	blx	r3
                Wire.endTransmission();
 80a030e:	f001 fc1d 	bl	80a1b4c <_Z19__fetch_global_Wirev>
 80a0312:	f000 fcf3 	bl	80a0cfc <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
 80a0316:	f001 fc19 	bl	80a1b4c <_Z19__fetch_global_Wirev>
 80a031a:	4639      	mov	r1, r7
 80a031c:	f000 fce6 	bl	80a0cec <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
 80a0320:	f001 fc14 	bl	80a1b4c <_Z19__fetch_global_Wirev>
 80a0324:	1b72      	subs	r2, r6, r5
 80a0326:	2a20      	cmp	r2, #32
 80a0328:	bfa8      	it	ge
 80a032a:	2220      	movge	r2, #32
 80a032c:	4639      	mov	r1, r7
 80a032e:	b2d2      	uxtb	r2, r2
 80a0330:	f000 fcd9 	bl	80a0ce6 <_ZN7TwoWire11requestFromEhj>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
 80a0334:	f001 fc0a 	bl	80a1b4c <_Z19__fetch_global_Wirev>
 80a0338:	6803      	ldr	r3, [r0, #0]
 80a033a:	691b      	ldr	r3, [r3, #16]
 80a033c:	4798      	blx	r3
 80a033e:	b190      	cbz	r0, 80a0366 <_ZN6I2Cdev9readBytesEhhhPht+0x96>
 80a0340:	f1b8 0f00 	cmp.w	r8, #0
 80a0344:	d109      	bne.n	80a035a <_ZN6I2Cdev9readBytesEhhhPht+0x8a>
                    data[count] = Wire.read();
 80a0346:	f001 fc01 	bl	80a1b4c <_Z19__fetch_global_Wirev>
 80a034a:	6803      	ldr	r3, [r0, #0]
 80a034c:	695b      	ldr	r3, [r3, #20]
 80a034e:	4798      	blx	r3
 80a0350:	f80b 0004 	strb.w	r0, [fp, r4]
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
 80a0354:	3401      	adds	r4, #1
 80a0356:	b264      	sxtb	r4, r4
 80a0358:	e7ec      	b.n	80a0334 <_ZN6I2Cdev9readBytesEhhhPht+0x64>
 80a035a:	f000 fa63 	bl	80a0824 <HAL_Timer_Get_Milli_Seconds>
 80a035e:	eba0 0009 	sub.w	r0, r0, r9
 80a0362:	4540      	cmp	r0, r8
 80a0364:	d3ef      	bcc.n	80a0346 <_ZN6I2Cdev9readBytesEhhhPht+0x76>
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
 80a0366:	9b01      	ldr	r3, [sp, #4]
 80a0368:	441d      	add	r5, r3
 80a036a:	b2ed      	uxtb	r5, r5
 80a036c:	e7c2      	b.n	80a02f4 <_ZN6I2Cdev9readBytesEhhhPht+0x24>
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
 80a036e:	f1b8 0f00 	cmp.w	r8, #0
 80a0372:	d009      	beq.n	80a0388 <_ZN6I2Cdev9readBytesEhhhPht+0xb8>
 80a0374:	f000 fa56 	bl	80a0824 <HAL_Timer_Get_Milli_Seconds>
 80a0378:	eba0 0909 	sub.w	r9, r0, r9
 80a037c:	45c1      	cmp	r9, r8
 80a037e:	d303      	bcc.n	80a0388 <_ZN6I2Cdev9readBytesEhhhPht+0xb8>
 80a0380:	42b4      	cmp	r4, r6
 80a0382:	bfb8      	it	lt
 80a0384:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
 80a0388:	4620      	mov	r0, r4
 80a038a:	b003      	add	sp, #12
 80a038c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0390 <_ZN6I2Cdev8readByteEhhPht>:
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
 80a0390:	b507      	push	{r0, r1, r2, lr}
    return readBytes(devAddr, regAddr, 1, data, timeout);
 80a0392:	9300      	str	r3, [sp, #0]
 80a0394:	4613      	mov	r3, r2
 80a0396:	2201      	movs	r2, #1
 80a0398:	f7ff ff9a 	bl	80a02d0 <_ZN6I2Cdev9readBytesEhhhPht>
}
 80a039c:	b003      	add	sp, #12
 80a039e:	f85d fb04 	ldr.w	pc, [sp], #4

080a03a2 <_ZN6I2Cdev8readBitsEhhhhPht>:
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
 80a03a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a03a4:	4614      	mov	r4, r2
 80a03a6:	461d      	mov	r5, r3
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
 80a03a8:	f10d 0207 	add.w	r2, sp, #7
 80a03ac:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a03b0:	f7ff ffee 	bl	80a0390 <_ZN6I2Cdev8readByteEhhPht>
 80a03b4:	b158      	cbz	r0, 80a03ce <_ZN6I2Cdev8readBitsEhhhhPht+0x2c>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80a03b6:	2301      	movs	r3, #1
 80a03b8:	1b62      	subs	r2, r4, r5
 80a03ba:	40ab      	lsls	r3, r5
 80a03bc:	3201      	adds	r2, #1
        b &= mask;
 80a03be:	f89d 1007 	ldrb.w	r1, [sp, #7]
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80a03c2:	3b01      	subs	r3, #1
 80a03c4:	4093      	lsls	r3, r2
        b >>= (bitStart - length + 1);
 80a03c6:	400b      	ands	r3, r1
 80a03c8:	4113      	asrs	r3, r2
 80a03ca:	9a06      	ldr	r2, [sp, #24]
 80a03cc:	7013      	strb	r3, [r2, #0]
}
 80a03ce:	b003      	add	sp, #12
 80a03d0:	bd30      	pop	{r4, r5, pc}

080a03d2 <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
 80a03d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a03d4:	4607      	mov	r7, r0
 80a03d6:	4615      	mov	r5, r2
 80a03d8:	461c      	mov	r4, r3
 80a03da:	460e      	mov	r6, r1
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif
    uint8_t status = 0;
	#if defined (PARTICLE)
        Wire.beginTransmission(devAddr);
 80a03dc:	f001 fbb6 	bl	80a1b4c <_Z19__fetch_global_Wirev>
 80a03e0:	4639      	mov	r1, r7
 80a03e2:	f000 fc83 	bl	80a0cec <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
 80a03e6:	f001 fbb1 	bl	80a1b4c <_Z19__fetch_global_Wirev>
 80a03ea:	6803      	ldr	r3, [r0, #0]
 80a03ec:	4631      	mov	r1, r6
 80a03ee:	689b      	ldr	r3, [r3, #8]
 80a03f0:	4798      	blx	r3
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
 80a03f2:	4425      	add	r5, r4
 80a03f4:	42ac      	cmp	r4, r5
 80a03f6:	d007      	beq.n	80a0408 <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
        #ifdef I2CDEV_SERIAL_DEBUG
            Serial.print(data[i], HEX);
            if (i + 1 < length) Serial.print(" ");
        #endif
		#if defined (PARTICLE)
            Wire.write((uint8_t) data[i]);
 80a03f8:	f001 fba8 	bl	80a1b4c <_Z19__fetch_global_Wirev>
 80a03fc:	6803      	ldr	r3, [r0, #0]
 80a03fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0402:	689b      	ldr	r3, [r3, #8]
 80a0404:	4798      	blx	r3
    for (uint8_t i = 0; i < length; i++) {
 80a0406:	e7f5      	b.n	80a03f4 <_ZN6I2Cdev10writeBytesEhhhPh+0x22>
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
            Fastwire::write((uint8_t) data[i]);
        #endif
    }
	#if defined (PARTICLE)
        status = Wire.endTransmission();
 80a0408:	f001 fba0 	bl	80a1b4c <_Z19__fetch_global_Wirev>
 80a040c:	f000 fc76 	bl	80a0cfc <_ZN7TwoWire15endTransmissionEv>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
 80a0410:	fab0 f080 	clz	r0, r0
 80a0414:	0940      	lsrs	r0, r0, #5
 80a0416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0418 <_ZN6I2Cdev9writeByteEhhh>:
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 80a0418:	b507      	push	{r0, r1, r2, lr}
 80a041a:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeBytes(devAddr, regAddr, 1, &data);
 80a041e:	f10d 0307 	add.w	r3, sp, #7
 80a0422:	2201      	movs	r2, #1
 80a0424:	f7ff ffd5 	bl	80a03d2 <_ZN6I2Cdev10writeBytesEhhhPh>
}
 80a0428:	b003      	add	sp, #12
 80a042a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0430 <_ZN6I2Cdev8writeBitEhhhh>:
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 80a0430:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a0434:	4690      	mov	r8, r2
 80a0436:	2401      	movs	r4, #1
 80a0438:	461f      	mov	r7, r3
    readByte(devAddr, regAddr, &b);
 80a043a:	4b0e      	ldr	r3, [pc, #56]	; (80a0474 <_ZN6I2Cdev8writeBitEhhhh+0x44>)
 80a043c:	f10d 0207 	add.w	r2, sp, #7
 80a0440:	881b      	ldrh	r3, [r3, #0]
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 80a0442:	4605      	mov	r5, r0
 80a0444:	460e      	mov	r6, r1
    readByte(devAddr, regAddr, &b);
 80a0446:	f7ff ffa3 	bl	80a0390 <_ZN6I2Cdev8readByteEhhPht>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80a044a:	fa04 f208 	lsl.w	r2, r4, r8
 80a044e:	b252      	sxtb	r2, r2
 80a0450:	f89d 4007 	ldrb.w	r4, [sp, #7]
 80a0454:	b157      	cbz	r7, 80a046c <_ZN6I2Cdev8writeBitEhhhh+0x3c>
 80a0456:	4322      	orrs	r2, r4
 80a0458:	b2d2      	uxtb	r2, r2
    return writeByte(devAddr, regAddr, b);
 80a045a:	4631      	mov	r1, r6
 80a045c:	4628      	mov	r0, r5
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80a045e:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeByte(devAddr, regAddr, b);
 80a0462:	f7ff ffd9 	bl	80a0418 <_ZN6I2Cdev9writeByteEhhh>
}
 80a0466:	b002      	add	sp, #8
 80a0468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80a046c:	ea24 0202 	bic.w	r2, r4, r2
 80a0470:	e7f3      	b.n	80a045a <_ZN6I2Cdev8writeBitEhhhh+0x2a>
 80a0472:	bf00      	nop
 80a0474:	20000004 	.word	0x20000004

080a0478 <_ZN6I2Cdev9writeBitsEhhhhh>:
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80a0478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a047a:	461f      	mov	r7, r3
    if (readByte(devAddr, regAddr, &b) != 0) {
 80a047c:	4b11      	ldr	r3, [pc, #68]	; (80a04c4 <_ZN6I2Cdev9writeBitsEhhhhh+0x4c>)
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80a047e:	4616      	mov	r6, r2
    if (readByte(devAddr, regAddr, &b) != 0) {
 80a0480:	881b      	ldrh	r3, [r3, #0]
 80a0482:	f10d 0207 	add.w	r2, sp, #7
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80a0486:	4604      	mov	r4, r0
 80a0488:	460d      	mov	r5, r1
    if (readByte(devAddr, regAddr, &b) != 0) {
 80a048a:	f7ff ff81 	bl	80a0390 <_ZN6I2Cdev8readByteEhhPht>
 80a048e:	b1b8      	cbz	r0, 80a04c0 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80a0490:	2301      	movs	r3, #1
        data <<= (bitStart - length + 1); // shift data into correct position
 80a0492:	f89d 1020 	ldrb.w	r1, [sp, #32]
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80a0496:	1bf2      	subs	r2, r6, r7
 80a0498:	40bb      	lsls	r3, r7
 80a049a:	3201      	adds	r2, #1
 80a049c:	3b01      	subs	r3, #1
 80a049e:	4093      	lsls	r3, r2
        data <<= (bitStart - length + 1); // shift data into correct position
 80a04a0:	fa01 f202 	lsl.w	r2, r1, r2
        b &= ~(mask); // zero all important bits in existing byte
 80a04a4:	f89d 1007 	ldrb.w	r1, [sp, #7]
        data <<= (bitStart - length + 1); // shift data into correct position
 80a04a8:	b2d2      	uxtb	r2, r2
        b &= ~(mask); // zero all important bits in existing byte
 80a04aa:	ea21 0103 	bic.w	r1, r1, r3
        data &= mask; // zero all non-important bits in data
 80a04ae:	4013      	ands	r3, r2
        b |= data; // combine data with existing byte
 80a04b0:	ea41 0203 	orr.w	r2, r1, r3
        return writeByte(devAddr, regAddr, b);
 80a04b4:	4620      	mov	r0, r4
 80a04b6:	4629      	mov	r1, r5
        b |= data; // combine data with existing byte
 80a04b8:	f88d 2007 	strb.w	r2, [sp, #7]
        return writeByte(devAddr, regAddr, b);
 80a04bc:	f7ff ffac 	bl	80a0418 <_ZN6I2Cdev9writeByteEhhh>
}
 80a04c0:	b003      	add	sp, #12
 80a04c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a04c4:	20000004 	.word	0x20000004

080a04c8 <_ZN7MPU6050C1Ev>:

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
    devAddr = MPU6050_DEFAULT_ADDRESS;
 80a04c8:	2368      	movs	r3, #104	; 0x68
 80a04ca:	7003      	strb	r3, [r0, #0]
}
 80a04cc:	4770      	bx	lr

080a04ce <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 80a04ce:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 80a04d0:	2302      	movs	r3, #2
 80a04d2:	2204      	movs	r2, #4
 80a04d4:	7800      	ldrb	r0, [r0, #0]
 80a04d6:	9100      	str	r1, [sp, #0]
 80a04d8:	211b      	movs	r1, #27
 80a04da:	f7ff ffcd 	bl	80a0478 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80a04de:	b003      	add	sp, #12
 80a04e0:	f85d fb04 	ldr.w	pc, [sp], #4

080a04e4 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 80a04e4:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 80a04e6:	2302      	movs	r3, #2
 80a04e8:	2204      	movs	r2, #4
 80a04ea:	7800      	ldrb	r0, [r0, #0]
 80a04ec:	9100      	str	r1, [sp, #0]
 80a04ee:	211c      	movs	r1, #28
 80a04f0:	f7ff ffc2 	bl	80a0478 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80a04f4:	b003      	add	sp, #12
 80a04f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a04fc <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>:
 * @param gz 16-bit signed integer container for gyroscope Z-axis value
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
 80a04fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a04fe:	461d      	mov	r5, r3
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
 80a0500:	4603      	mov	r3, r0
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
 80a0502:	4604      	mov	r4, r0
 80a0504:	460f      	mov	r7, r1
 80a0506:	4616      	mov	r6, r2
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
 80a0508:	4a15      	ldr	r2, [pc, #84]	; (80a0560 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_+0x64>)
 80a050a:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a050e:	8812      	ldrh	r2, [r2, #0]
 80a0510:	213b      	movs	r1, #59	; 0x3b
 80a0512:	9200      	str	r2, [sp, #0]
 80a0514:	220e      	movs	r2, #14
 80a0516:	f7ff fedb 	bl	80a02d0 <_ZN6I2Cdev9readBytesEhhhPht>
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 80a051a:	7862      	ldrb	r2, [r4, #1]
 80a051c:	78a3      	ldrb	r3, [r4, #2]
 80a051e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0522:	803b      	strh	r3, [r7, #0]
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 80a0524:	78e2      	ldrb	r2, [r4, #3]
 80a0526:	7923      	ldrb	r3, [r4, #4]
 80a0528:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a052c:	8033      	strh	r3, [r6, #0]
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
 80a052e:	7962      	ldrb	r2, [r4, #5]
 80a0530:	79a3      	ldrb	r3, [r4, #6]
 80a0532:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0536:	802b      	strh	r3, [r5, #0]
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 80a0538:	7a62      	ldrb	r2, [r4, #9]
 80a053a:	7aa3      	ldrb	r3, [r4, #10]
 80a053c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0540:	9a08      	ldr	r2, [sp, #32]
 80a0542:	8013      	strh	r3, [r2, #0]
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 80a0544:	7ae2      	ldrb	r2, [r4, #11]
 80a0546:	7b23      	ldrb	r3, [r4, #12]
 80a0548:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a054c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a054e:	8013      	strh	r3, [r2, #0]
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 80a0550:	7b62      	ldrb	r2, [r4, #13]
 80a0552:	7ba3      	ldrb	r3, [r4, #14]
 80a0554:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a055a:	8013      	strh	r3, [r2, #0]
}
 80a055c:	b003      	add	sp, #12
 80a055e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0560:	20000004 	.word	0x20000004

080a0564 <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 80a0564:	460b      	mov	r3, r1
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80a0566:	2206      	movs	r2, #6
 80a0568:	216b      	movs	r1, #107	; 0x6b
 80a056a:	7800      	ldrb	r0, [r0, #0]
 80a056c:	f7ff bf60 	b.w	80a0430 <_ZN6I2Cdev8writeBitEhhhh>

080a0570 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 80a0570:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 80a0572:	2303      	movs	r3, #3
 80a0574:	2202      	movs	r2, #2
 80a0576:	7800      	ldrb	r0, [r0, #0]
 80a0578:	9100      	str	r1, [sp, #0]
 80a057a:	216b      	movs	r1, #107	; 0x6b
 80a057c:	f7ff ff7c 	bl	80a0478 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80a0580:	b003      	add	sp, #12
 80a0582:	f85d fb04 	ldr.w	pc, [sp], #4

080a0586 <_ZN7MPU605010initializeEv>:
void MPU6050::initialize() {
 80a0586:	b510      	push	{r4, lr}
 80a0588:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 80a058a:	2101      	movs	r1, #1
 80a058c:	f7ff fff0 	bl	80a0570 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 80a0590:	4620      	mov	r0, r4
 80a0592:	2100      	movs	r1, #0
 80a0594:	f7ff ff9b 	bl	80a04ce <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 80a0598:	4620      	mov	r0, r4
 80a059a:	2100      	movs	r1, #0
 80a059c:	f7ff ffa2 	bl	80a04e4 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 80a05a0:	4620      	mov	r0, r4
}
 80a05a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 80a05a6:	2100      	movs	r1, #0
 80a05a8:	f7ff bfdc 	b.w	80a0564 <_ZN7MPU605015setSleepEnabledEb>

080a05ac <_ZN7MPU605011getDeviceIDEv>:
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80a05ac:	4603      	mov	r3, r0
uint8_t MPU6050::getDeviceID() {
 80a05ae:	b513      	push	{r0, r1, r4, lr}
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80a05b0:	4a07      	ldr	r2, [pc, #28]	; (80a05d0 <_ZN7MPU605011getDeviceIDEv+0x24>)
uint8_t MPU6050::getDeviceID() {
 80a05b2:	4604      	mov	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80a05b4:	8812      	ldrh	r2, [r2, #0]
 80a05b6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a05ba:	2175      	movs	r1, #117	; 0x75
 80a05bc:	e9cd 3200 	strd	r3, r2, [sp]
 80a05c0:	2306      	movs	r3, #6
 80a05c2:	461a      	mov	r2, r3
 80a05c4:	f7ff feed 	bl	80a03a2 <_ZN6I2Cdev8readBitsEhhhhPht>
    return buffer[0];
}
 80a05c8:	7860      	ldrb	r0, [r4, #1]
 80a05ca:	b002      	add	sp, #8
 80a05cc:	bd10      	pop	{r4, pc}
 80a05ce:	bf00      	nop
 80a05d0:	20000004 	.word	0x20000004

080a05d4 <_ZN7MPU605014testConnectionEv>:
bool MPU6050::testConnection() {
 80a05d4:	b508      	push	{r3, lr}
    return getDeviceID() == 0x34;
 80a05d6:	f7ff ffe9 	bl	80a05ac <_ZN7MPU605011getDeviceIDEv>
}
 80a05da:	f1a0 0334 	sub.w	r3, r0, #52	; 0x34
 80a05de:	4258      	negs	r0, r3
 80a05e0:	4158      	adcs	r0, r3
 80a05e2:	bd08      	pop	{r3, pc}

080a05e4 <_ZN10OSCMessage12setupMessageEv>:
    outputAddress = address;
}

void OSCMessage::setupMessage()
{
    incomingBuffer = NULL;
 80a05e4:	2300      	movs	r3, #0
    inputDatas = NULL;
    incomingBufferSize = 0;
    
    outputDatas = NULL;
    outputDatasSize = 0;
 80a05e6:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
    incomingBuffer = NULL;
 80a05ea:	6003      	str	r3, [r0, #0]
    inputDatas = NULL;
 80a05ec:	6283      	str	r3, [r0, #40]	; 0x28
    incomingBufferSize = 0;
 80a05ee:	6043      	str	r3, [r0, #4]
}
 80a05f0:	4770      	bx	lr
	...

080a05f4 <_ZN10OSCMessageC1EPKc>:
OSCMessage::OSCMessage(const char * address)
 80a05f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a05f6:	4604      	mov	r4, r0
 80a05f8:	460e      	mov	r6, r1
 80a05fa:	4d0f      	ldr	r5, [pc, #60]	; (80a0638 <_ZN10OSCMessageC1EPKc+0x44>)
 80a05fc:	3008      	adds	r0, #8
 80a05fe:	4629      	mov	r1, r5
 80a0600:	f000 fd2d 	bl	80a105e <_ZN6StringC1EPKc>
 80a0604:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 80a0608:	4629      	mov	r1, r5
 80a060a:	f104 0018 	add.w	r0, r4, #24
 80a060e:	f000 fd26 	bl	80a105e <_ZN6StringC1EPKc>
 80a0612:	4629      	mov	r1, r5
 80a0614:	4638      	mov	r0, r7
 80a0616:	f000 fd22 	bl	80a105e <_ZN6StringC1EPKc>
 80a061a:	4629      	mov	r1, r5
 80a061c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0620:	f000 fd1d 	bl	80a105e <_ZN6StringC1EPKc>
    setupMessage();
 80a0624:	4620      	mov	r0, r4
 80a0626:	f7ff ffdd 	bl	80a05e4 <_ZN10OSCMessage12setupMessageEv>
    outputAddress = address;
 80a062a:	4631      	mov	r1, r6
 80a062c:	4638      	mov	r0, r7
 80a062e:	f000 fd29 	bl	80a1084 <_ZN6StringaSEPKc>
}
 80a0632:	4620      	mov	r0, r4
 80a0634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0636:	bf00      	nop
 80a0638:	080a261b 	.word	0x080a261b

080a063c <_ZN10OSCMessageD1Ev>:

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a063c:	b510      	push	{r4, lr}
 80a063e:	4604      	mov	r4, r0
{
    free(incomingBuffer);
 80a0640:	6800      	ldr	r0, [r0, #0]
 80a0642:	f000 fac7 	bl	80a0bd4 <free>
    free(inputDatas);
 80a0646:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0648:	f000 fac4 	bl	80a0bd4 <free>
    free(outputDatas);
 80a064c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80a064e:	f000 fac1 	bl	80a0bd4 <free>
OSCMessage::~OSCMessage()
 80a0652:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0656:	f000 fcb8 	bl	80a0fca <_ZN6StringD1Ev>
 80a065a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a065e:	f000 fcb4 	bl	80a0fca <_ZN6StringD1Ev>
 80a0662:	f104 0018 	add.w	r0, r4, #24
 80a0666:	f000 fcb0 	bl	80a0fca <_ZN6StringD1Ev>
 80a066a:	f104 0008 	add.w	r0, r4, #8
 80a066e:	f000 fcac 	bl	80a0fca <_ZN6StringD1Ev>
}
 80a0672:	4620      	mov	r0, r4
 80a0674:	bd10      	pop	{r4, pc}

080a0676 <_ZN10OSCMessage8addFloatEf>:
        outputTypes.concat('i');
    }
}

void OSCMessage::addFloat(float value)
{
 80a0676:	b538      	push	{r3, r4, r5, lr}
 80a0678:	460d      	mov	r5, r1
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
 80a067a:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80a067c:	4604      	mov	r4, r0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
 80a067e:	3104      	adds	r1, #4
 80a0680:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80a0682:	f000 faaf 	bl	80a0be4 <realloc>
 80a0686:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (outputDatas != NULL)
 80a0688:	b1e8      	cbz	r0, 80a06c6 <_ZN10OSCMessage8addFloatEf+0x50>
        union {
            float f;
            char b[4];
        } u;
        u.f = value;
        outputDatas[outputDatasSize] = u.b[3];
 80a068a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a068c:	f3c5 6207 	ubfx	r2, r5, #24, #8
 80a0690:	54c2      	strb	r2, [r0, r3]
        outputDatas[outputDatasSize+1] = u.b[2];
 80a0692:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 80a0696:	4413      	add	r3, r2
 80a0698:	f3c5 4207 	ubfx	r2, r5, #16, #8
 80a069c:	705a      	strb	r2, [r3, #1]
        outputDatas[outputDatasSize+2] = u.b[1];
 80a069e:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 80a06a2:	4413      	add	r3, r2
 80a06a4:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80a06a8:	709a      	strb	r2, [r3, #2]
        outputDatas[outputDatasSize+3] = u.b[0];
 80a06aa:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 80a06ae:	4413      	add	r3, r2
 80a06b0:	70dd      	strb	r5, [r3, #3]
        outputDatasSize += 4;
 80a06b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
        outputTypes.concat('f');
 80a06b4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        outputDatasSize += 4;
 80a06b8:	3304      	adds	r3, #4
 80a06ba:	6523      	str	r3, [r4, #80]	; 0x50
        outputTypes.concat('f');
 80a06bc:	2166      	movs	r1, #102	; 0x66
    }
}
 80a06be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        outputTypes.concat('f');
 80a06c2:	f000 bd07 	b.w	80a10d4 <_ZN6String6concatEc>
}
 80a06c6:	bd38      	pop	{r3, r4, r5, pc}

080a06c8 <_ZN10OSCMessage4sendER3UDP9IPAddressj>:
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
 80a06c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a06cc:	b08b      	sub	sp, #44	; 0x2c
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	String & operator = (String &&rval);
	String & operator = (StringSumHelper &&rval);
	#endif

        operator const char*() const { return c_str(); }
 80a06ce:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
 80a06d2:	af00      	add	r7, sp, #0
 80a06d4:	4680      	mov	r8, r0
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
 80a06d6:	4648      	mov	r0, r9
{
 80a06d8:	460d      	mov	r5, r1
 80a06da:	e9c7 3202 	strd	r3, r2, [r7, #8]
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
 80a06de:	f001 fef9 	bl	80a24d4 <strlen>
 80a06e2:	4606      	mov	r6, r0
 80a06e4:	3003      	adds	r0, #3
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
 80a06e6:	0880      	lsrs	r0, r0, #2
 80a06e8:	f001 fba8 	bl	80a1e3c <__aeabi_ui2d>
 80a06ec:	2200      	movs	r2, #0
 80a06ee:	4b3f      	ldr	r3, [pc, #252]	; (80a07ec <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x124>)
 80a06f0:	f001 fa68 	bl	80a1bc4 <__adddf3>
 80a06f4:	f001 fe2e 	bl	80a2354 <__aeabi_d2iz>
 80a06f8:	f8d8 a03c 	ldr.w	sl, [r8, #60]	; 0x3c
    int addresszeroCount = addressBitCount-strlen(outputAddress);
 80a06fc:	ebc6 0680 	rsb	r6, r6, r0, lsl #2
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
 80a0700:	0084      	lsls	r4, r0, #2
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
 80a0702:	4650      	mov	r0, sl
 80a0704:	f001 fee6 	bl	80a24d4 <strlen>
    int outputBufferSize = addressBitCount+1;//address+padding+comma
 80a0708:	3401      	adds	r4, #1
    outputBufferSize += strlen(outputTypes);
 80a070a:	4683      	mov	fp, r0
 80a070c:	4404      	add	r4, r0
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
 80a070e:	3001      	adds	r0, #1
 80a0710:	0880      	lsrs	r0, r0, #2
 80a0712:	f001 fb93 	bl	80a1e3c <__aeabi_ui2d>
 80a0716:	2200      	movs	r2, #0
 80a0718:	4b34      	ldr	r3, [pc, #208]	; (80a07ec <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x124>)
 80a071a:	f001 fa53 	bl	80a1bc4 <__adddf3>
 80a071e:	f001 fe19 	bl	80a2354 <__aeabi_d2iz>
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
 80a0722:	f1cb 0b03 	rsb	fp, fp, #3
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
    outputBufferSize += outputDatasSize;
 80a0726:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
 80a072a:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
 80a072e:	445c      	add	r4, fp
    outputBufferSize += outputDatasSize;
 80a0730:	441c      	add	r4, r3
    //Serial.print ("bufferSize : ");  Serial.println(outputBufferSize);
    uint8_t nullChar = '\0';
    
    char outputBuffer[outputBufferSize];
 80a0732:	1de2      	adds	r2, r4, #7
 80a0734:	f022 0207 	bic.w	r2, r2, #7
 80a0738:	ebad 0d02 	sub.w	sp, sp, r2
    memset(outputBuffer,nullChar,outputBufferSize);
 80a073c:	2100      	movs	r1, #0
 80a073e:	4622      	mov	r2, r4
 80a0740:	4668      	mov	r0, sp
    outputBufferSize += outputDatasSize;
 80a0742:	603b      	str	r3, [r7, #0]
    memset(outputBuffer,nullChar,outputBufferSize);
 80a0744:	f001 fe92 	bl	80a246c <memset>
    memcpy(&outputBuffer[0],outputAddress,strlen(outputAddress));
 80a0748:	4648      	mov	r0, r9
 80a074a:	f001 fec3 	bl	80a24d4 <strlen>
 80a074e:	4649      	mov	r1, r9
 80a0750:	4602      	mov	r2, r0
 80a0752:	4668      	mov	r0, sp
 80a0754:	f001 fe7c 	bl	80a2450 <memcpy>
    outputBuffer[strlen(outputAddress)+addresszeroCount] = ',';
 80a0758:	4648      	mov	r0, r9
 80a075a:	f001 febb 	bl	80a24d4 <strlen>
 80a075e:	212c      	movs	r1, #44	; 0x2c
 80a0760:	eb0d 0206 	add.w	r2, sp, r6
 80a0764:	5411      	strb	r1, [r2, r0]
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1],outputTypes,strlen(outputTypes));
 80a0766:	4648      	mov	r0, r9
 80a0768:	f001 feb4 	bl	80a24d4 <strlen>
 80a076c:	6078      	str	r0, [r7, #4]
 80a076e:	4650      	mov	r0, sl
 80a0770:	f001 feb0 	bl	80a24d4 <strlen>
 80a0774:	6879      	ldr	r1, [r7, #4]
 80a0776:	4602      	mov	r2, r0
 80a0778:	3101      	adds	r1, #1
 80a077a:	1988      	adds	r0, r1, r6
 80a077c:	4468      	add	r0, sp
 80a077e:	4651      	mov	r1, sl
 80a0780:	f001 fe66 	bl	80a2450 <memcpy>
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1+strlen(outputTypes)+outputTypesZerosCount],outputDatas,outputDatasSize);
 80a0784:	4648      	mov	r0, r9
 80a0786:	f001 fea5 	bl	80a24d4 <strlen>
 80a078a:	4681      	mov	r9, r0
 80a078c:	4650      	mov	r0, sl
 80a078e:	f001 fea1 	bl	80a24d4 <strlen>
 80a0792:	4448      	add	r0, r9
 80a0794:	3001      	adds	r0, #1
 80a0796:	683b      	ldr	r3, [r7, #0]
 80a0798:	4430      	add	r0, r6
 80a079a:	4458      	add	r0, fp
 80a079c:	461a      	mov	r2, r3
 80a079e:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
 80a07a2:	4468      	add	r0, sp
 80a07a4:	f001 fe54 	bl	80a2450 <memcpy>
    
    udp.beginPacket(remoteIP,outPort);
 80a07a8:	682b      	ldr	r3, [r5, #0]
 80a07aa:	68fe      	ldr	r6, [r7, #12]
 80a07ac:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
 80a07b0:	4b0f      	ldr	r3, [pc, #60]	; (80a07f0 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
 80a07b2:	f107 0c14 	add.w	ip, r7, #20
 80a07b6:	3604      	adds	r6, #4
 80a07b8:	613b      	str	r3, [r7, #16]
 80a07ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a07bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80a07c0:	6833      	ldr	r3, [r6, #0]
 80a07c2:	893a      	ldrh	r2, [r7, #8]
 80a07c4:	f88c 3000 	strb.w	r3, [ip]
 80a07c8:	f107 0110 	add.w	r1, r7, #16
 80a07cc:	4628      	mov	r0, r5
 80a07ce:	47c0      	blx	r8
    udp.write((uint8_t *)&outputBuffer,outputBufferSize);
 80a07d0:	682b      	ldr	r3, [r5, #0]
 80a07d2:	4622      	mov	r2, r4
 80a07d4:	4669      	mov	r1, sp
 80a07d6:	4628      	mov	r0, r5
 80a07d8:	68db      	ldr	r3, [r3, #12]
 80a07da:	4798      	blx	r3
    udp.endPacket();
 80a07dc:	682b      	ldr	r3, [r5, #0]
 80a07de:	4628      	mov	r0, r5
 80a07e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a07e2:	4798      	blx	r3
}
 80a07e4:	372c      	adds	r7, #44	; 0x2c
 80a07e6:	46bd      	mov	sp, r7
 80a07e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a07ec:	3fe00000 	.word	0x3fe00000
 80a07f0:	080a2684 	.word	0x080a2684

080a07f4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a07f4:	b508      	push	{r3, lr}
 80a07f6:	4b02      	ldr	r3, [pc, #8]	; (80a0800 <os_mutex_recursive_create+0xc>)
 80a07f8:	681b      	ldr	r3, [r3, #0]
 80a07fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a07fc:	9301      	str	r3, [sp, #4]
 80a07fe:	bd08      	pop	{r3, pc}
 80a0800:	080601d0 	.word	0x080601d0

080a0804 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0804:	b508      	push	{r3, lr}
 80a0806:	4b02      	ldr	r3, [pc, #8]	; (80a0810 <os_mutex_recursive_destroy+0xc>)
 80a0808:	681b      	ldr	r3, [r3, #0]
 80a080a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a080c:	9301      	str	r3, [sp, #4]
 80a080e:	bd08      	pop	{r3, pc}
 80a0810:	080601d0 	.word	0x080601d0

080a0814 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0814:	b508      	push	{r3, lr}
 80a0816:	4b02      	ldr	r3, [pc, #8]	; (80a0820 <HAL_RNG_GetRandomNumber+0xc>)
 80a0818:	681b      	ldr	r3, [r3, #0]
 80a081a:	685b      	ldr	r3, [r3, #4]
 80a081c:	9301      	str	r3, [sp, #4]
 80a081e:	bd08      	pop	{r3, pc}
 80a0820:	0806019c 	.word	0x0806019c

080a0824 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0824:	b508      	push	{r3, lr}
 80a0826:	4b02      	ldr	r3, [pc, #8]	; (80a0830 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0828:	681b      	ldr	r3, [r3, #0]
 80a082a:	695b      	ldr	r3, [r3, #20]
 80a082c:	9301      	str	r3, [sp, #4]
 80a082e:	bd08      	pop	{r3, pc}
 80a0830:	0806019c 	.word	0x0806019c

080a0834 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0834:	b508      	push	{r3, lr}
 80a0836:	4b02      	ldr	r3, [pc, #8]	; (80a0840 <HAL_Pin_Mode+0xc>)
 80a0838:	681b      	ldr	r3, [r3, #0]
 80a083a:	689b      	ldr	r3, [r3, #8]
 80a083c:	9301      	str	r3, [sp, #4]
 80a083e:	bd08      	pop	{r3, pc}
 80a0840:	080601b0 	.word	0x080601b0

080a0844 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0844:	b508      	push	{r3, lr}
 80a0846:	4b02      	ldr	r3, [pc, #8]	; (80a0850 <HAL_Get_Pin_Mode+0xc>)
 80a0848:	681b      	ldr	r3, [r3, #0]
 80a084a:	68db      	ldr	r3, [r3, #12]
 80a084c:	9301      	str	r3, [sp, #4]
 80a084e:	bd08      	pop	{r3, pc}
 80a0850:	080601b0 	.word	0x080601b0

080a0854 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0854:	b508      	push	{r3, lr}
 80a0856:	4b02      	ldr	r3, [pc, #8]	; (80a0860 <HAL_GPIO_Write+0xc>)
 80a0858:	681b      	ldr	r3, [r3, #0]
 80a085a:	691b      	ldr	r3, [r3, #16]
 80a085c:	9301      	str	r3, [sp, #4]
 80a085e:	bd08      	pop	{r3, pc}
 80a0860:	080601b0 	.word	0x080601b0

080a0864 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a0864:	b508      	push	{r3, lr}
 80a0866:	4b02      	ldr	r3, [pc, #8]	; (80a0870 <hal_i2c_begin+0xc>)
 80a0868:	681b      	ldr	r3, [r3, #0]
 80a086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a086c:	9301      	str	r3, [sp, #4]
 80a086e:	bd08      	pop	{r3, pc}
 80a0870:	080601ac 	.word	0x080601ac

080a0874 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a0874:	b508      	push	{r3, lr}
 80a0876:	4b02      	ldr	r3, [pc, #8]	; (80a0880 <hal_i2c_begin_transmission+0xc>)
 80a0878:	681b      	ldr	r3, [r3, #0]
 80a087a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a087c:	9301      	str	r3, [sp, #4]
 80a087e:	bd08      	pop	{r3, pc}
 80a0880:	080601ac 	.word	0x080601ac

080a0884 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a0884:	b508      	push	{r3, lr}
 80a0886:	4b02      	ldr	r3, [pc, #8]	; (80a0890 <hal_i2c_end_transmission+0xc>)
 80a0888:	681b      	ldr	r3, [r3, #0]
 80a088a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a088c:	9301      	str	r3, [sp, #4]
 80a088e:	bd08      	pop	{r3, pc}
 80a0890:	080601ac 	.word	0x080601ac

080a0894 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0894:	b508      	push	{r3, lr}
 80a0896:	4b02      	ldr	r3, [pc, #8]	; (80a08a0 <hal_i2c_write+0xc>)
 80a0898:	681b      	ldr	r3, [r3, #0]
 80a089a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a089c:	9301      	str	r3, [sp, #4]
 80a089e:	bd08      	pop	{r3, pc}
 80a08a0:	080601ac 	.word	0x080601ac

080a08a4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a08a4:	b508      	push	{r3, lr}
 80a08a6:	4b02      	ldr	r3, [pc, #8]	; (80a08b0 <hal_i2c_available+0xc>)
 80a08a8:	681b      	ldr	r3, [r3, #0]
 80a08aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a08ac:	9301      	str	r3, [sp, #4]
 80a08ae:	bd08      	pop	{r3, pc}
 80a08b0:	080601ac 	.word	0x080601ac

080a08b4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a08b4:	b508      	push	{r3, lr}
 80a08b6:	4b02      	ldr	r3, [pc, #8]	; (80a08c0 <hal_i2c_read+0xc>)
 80a08b8:	681b      	ldr	r3, [r3, #0]
 80a08ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a08bc:	9301      	str	r3, [sp, #4]
 80a08be:	bd08      	pop	{r3, pc}
 80a08c0:	080601ac 	.word	0x080601ac

080a08c4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a08c4:	b508      	push	{r3, lr}
 80a08c6:	4b02      	ldr	r3, [pc, #8]	; (80a08d0 <hal_i2c_peek+0xc>)
 80a08c8:	681b      	ldr	r3, [r3, #0]
 80a08ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a08cc:	9301      	str	r3, [sp, #4]
 80a08ce:	bd08      	pop	{r3, pc}
 80a08d0:	080601ac 	.word	0x080601ac

080a08d4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a08d4:	b508      	push	{r3, lr}
 80a08d6:	4b02      	ldr	r3, [pc, #8]	; (80a08e0 <hal_i2c_flush+0xc>)
 80a08d8:	681b      	ldr	r3, [r3, #0]
 80a08da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a08dc:	9301      	str	r3, [sp, #4]
 80a08de:	bd08      	pop	{r3, pc}
 80a08e0:	080601ac 	.word	0x080601ac

080a08e4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a08e4:	b508      	push	{r3, lr}
 80a08e6:	4b02      	ldr	r3, [pc, #8]	; (80a08f0 <hal_i2c_is_enabled+0xc>)
 80a08e8:	681b      	ldr	r3, [r3, #0]
 80a08ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a08ec:	9301      	str	r3, [sp, #4]
 80a08ee:	bd08      	pop	{r3, pc}
 80a08f0:	080601ac 	.word	0x080601ac

080a08f4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a08f4:	b508      	push	{r3, lr}
 80a08f6:	4b03      	ldr	r3, [pc, #12]	; (80a0904 <hal_i2c_init+0x10>)
 80a08f8:	681b      	ldr	r3, [r3, #0]
 80a08fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a08fe:	9301      	str	r3, [sp, #4]
 80a0900:	bd08      	pop	{r3, pc}
 80a0902:	0000      	.short	0x0000
 80a0904:	080601ac 	.word	0x080601ac

080a0908 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a0908:	b508      	push	{r3, lr}
 80a090a:	4b03      	ldr	r3, [pc, #12]	; (80a0918 <hal_i2c_request_ex+0x10>)
 80a090c:	681b      	ldr	r3, [r3, #0]
 80a090e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0912:	9301      	str	r3, [sp, #4]
 80a0914:	bd08      	pop	{r3, pc}
 80a0916:	0000      	.short	0x0000
 80a0918:	080601ac 	.word	0x080601ac

080a091c <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a091c:	b508      	push	{r3, lr}
 80a091e:	4b02      	ldr	r3, [pc, #8]	; (80a0928 <socket_handle_valid+0xc>)
 80a0920:	681b      	ldr	r3, [r3, #0]
 80a0922:	685b      	ldr	r3, [r3, #4]
 80a0924:	9301      	str	r3, [sp, #4]
 80a0926:	bd08      	pop	{r3, pc}
 80a0928:	080601bc 	.word	0x080601bc

080a092c <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a092c:	b508      	push	{r3, lr}
 80a092e:	4b02      	ldr	r3, [pc, #8]	; (80a0938 <socket_create+0xc>)
 80a0930:	681b      	ldr	r3, [r3, #0]
 80a0932:	689b      	ldr	r3, [r3, #8]
 80a0934:	9301      	str	r3, [sp, #4]
 80a0936:	bd08      	pop	{r3, pc}
 80a0938:	080601bc 	.word	0x080601bc

080a093c <socket_sendto>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a093c:	b508      	push	{r3, lr}
 80a093e:	4b02      	ldr	r3, [pc, #8]	; (80a0948 <socket_sendto+0xc>)
 80a0940:	681b      	ldr	r3, [r3, #0]
 80a0942:	69db      	ldr	r3, [r3, #28]
 80a0944:	9301      	str	r3, [sp, #4]
 80a0946:	bd08      	pop	{r3, pc}
 80a0948:	080601bc 	.word	0x080601bc

080a094c <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a094c:	b508      	push	{r3, lr}
 80a094e:	4b02      	ldr	r3, [pc, #8]	; (80a0958 <socket_close+0xc>)
 80a0950:	681b      	ldr	r3, [r3, #0]
 80a0952:	6a1b      	ldr	r3, [r3, #32]
 80a0954:	9301      	str	r3, [sp, #4]
 80a0956:	bd08      	pop	{r3, pc}
 80a0958:	080601bc 	.word	0x080601bc

080a095c <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a095c:	b508      	push	{r3, lr}
 80a095e:	4b02      	ldr	r3, [pc, #8]	; (80a0968 <socket_handle_invalid+0xc>)
 80a0960:	681b      	ldr	r3, [r3, #0]
 80a0962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0964:	9301      	str	r3, [sp, #4]
 80a0966:	bd08      	pop	{r3, pc}
 80a0968:	080601bc 	.word	0x080601bc

080a096c <socket_receivefrom_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
DYNALIB_FN(18, hal_socket, socket_receivefrom_ex, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*, system_tick_t, void*))
 80a096c:	b508      	push	{r3, lr}
 80a096e:	4b02      	ldr	r3, [pc, #8]	; (80a0978 <socket_receivefrom_ex+0xc>)
 80a0970:	681b      	ldr	r3, [r3, #0]
 80a0972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0974:	9301      	str	r3, [sp, #4]
 80a0976:	bd08      	pop	{r3, pc}
 80a0978:	080601bc 	.word	0x080601bc

080a097c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a097c:	b508      	push	{r3, lr}
 80a097e:	4b02      	ldr	r3, [pc, #8]	; (80a0988 <hal_spi_init+0xc>)
 80a0980:	681b      	ldr	r3, [r3, #0]
 80a0982:	69db      	ldr	r3, [r3, #28]
 80a0984:	9301      	str	r3, [sp, #4]
 80a0986:	bd08      	pop	{r3, pc}
 80a0988:	080601b4 	.word	0x080601b4

080a098c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a098c:	b508      	push	{r3, lr}
 80a098e:	4b02      	ldr	r3, [pc, #8]	; (80a0998 <hal_spi_is_enabled+0xc>)
 80a0990:	681b      	ldr	r3, [r3, #0]
 80a0992:	6a1b      	ldr	r3, [r3, #32]
 80a0994:	9301      	str	r3, [sp, #4]
 80a0996:	bd08      	pop	{r3, pc}
 80a0998:	080601b4 	.word	0x080601b4

080a099c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a099c:	b508      	push	{r3, lr}
 80a099e:	4b02      	ldr	r3, [pc, #8]	; (80a09a8 <hal_usart_init+0xc>)
 80a09a0:	681b      	ldr	r3, [r3, #0]
 80a09a2:	699b      	ldr	r3, [r3, #24]
 80a09a4:	9301      	str	r3, [sp, #4]
 80a09a6:	bd08      	pop	{r3, pc}
 80a09a8:	080601c4 	.word	0x080601c4

080a09ac <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a09ac:	b508      	push	{r3, lr}
 80a09ae:	4b02      	ldr	r3, [pc, #8]	; (80a09b8 <hal_usart_write+0xc>)
 80a09b0:	681b      	ldr	r3, [r3, #0]
 80a09b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a09b4:	9301      	str	r3, [sp, #4]
 80a09b6:	bd08      	pop	{r3, pc}
 80a09b8:	080601c4 	.word	0x080601c4

080a09bc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a09bc:	b508      	push	{r3, lr}
 80a09be:	4b02      	ldr	r3, [pc, #8]	; (80a09c8 <hal_usart_available+0xc>)
 80a09c0:	681b      	ldr	r3, [r3, #0]
 80a09c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a09c4:	9301      	str	r3, [sp, #4]
 80a09c6:	bd08      	pop	{r3, pc}
 80a09c8:	080601c4 	.word	0x080601c4

080a09cc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a09cc:	b508      	push	{r3, lr}
 80a09ce:	4b02      	ldr	r3, [pc, #8]	; (80a09d8 <hal_usart_read+0xc>)
 80a09d0:	681b      	ldr	r3, [r3, #0]
 80a09d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a09d4:	9301      	str	r3, [sp, #4]
 80a09d6:	bd08      	pop	{r3, pc}
 80a09d8:	080601c4 	.word	0x080601c4

080a09dc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a09dc:	b508      	push	{r3, lr}
 80a09de:	4b02      	ldr	r3, [pc, #8]	; (80a09e8 <hal_usart_peek+0xc>)
 80a09e0:	681b      	ldr	r3, [r3, #0]
 80a09e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a09e4:	9301      	str	r3, [sp, #4]
 80a09e6:	bd08      	pop	{r3, pc}
 80a09e8:	080601c4 	.word	0x080601c4

080a09ec <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a09ec:	b508      	push	{r3, lr}
 80a09ee:	4b02      	ldr	r3, [pc, #8]	; (80a09f8 <hal_usart_flush+0xc>)
 80a09f0:	681b      	ldr	r3, [r3, #0]
 80a09f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a09f4:	9301      	str	r3, [sp, #4]
 80a09f6:	bd08      	pop	{r3, pc}
 80a09f8:	080601c4 	.word	0x080601c4

080a09fc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a09fc:	b508      	push	{r3, lr}
 80a09fe:	4b02      	ldr	r3, [pc, #8]	; (80a0a08 <hal_usart_is_enabled+0xc>)
 80a0a00:	681b      	ldr	r3, [r3, #0]
 80a0a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0a04:	9301      	str	r3, [sp, #4]
 80a0a06:	bd08      	pop	{r3, pc}
 80a0a08:	080601c4 	.word	0x080601c4

080a0a0c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0a0c:	b508      	push	{r3, lr}
 80a0a0e:	4b02      	ldr	r3, [pc, #8]	; (80a0a18 <hal_usart_available_data_for_write+0xc>)
 80a0a10:	681b      	ldr	r3, [r3, #0]
 80a0a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0a14:	9301      	str	r3, [sp, #4]
 80a0a16:	bd08      	pop	{r3, pc}
 80a0a18:	080601c4 	.word	0x080601c4

080a0a1c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0a1c:	b508      	push	{r3, lr}
 80a0a1e:	4b02      	ldr	r3, [pc, #8]	; (80a0a28 <HAL_USB_USART_Init+0xc>)
 80a0a20:	681b      	ldr	r3, [r3, #0]
 80a0a22:	681b      	ldr	r3, [r3, #0]
 80a0a24:	9301      	str	r3, [sp, #4]
 80a0a26:	bd08      	pop	{r3, pc}
 80a0a28:	080601d8 	.word	0x080601d8

080a0a2c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0a2c:	b508      	push	{r3, lr}
 80a0a2e:	4b02      	ldr	r3, [pc, #8]	; (80a0a38 <HAL_USB_USART_Begin+0xc>)
 80a0a30:	681b      	ldr	r3, [r3, #0]
 80a0a32:	685b      	ldr	r3, [r3, #4]
 80a0a34:	9301      	str	r3, [sp, #4]
 80a0a36:	bd08      	pop	{r3, pc}
 80a0a38:	080601d8 	.word	0x080601d8

080a0a3c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0a3c:	b508      	push	{r3, lr}
 80a0a3e:	4b02      	ldr	r3, [pc, #8]	; (80a0a48 <HAL_USB_USART_Available_Data+0xc>)
 80a0a40:	681b      	ldr	r3, [r3, #0]
 80a0a42:	691b      	ldr	r3, [r3, #16]
 80a0a44:	9301      	str	r3, [sp, #4]
 80a0a46:	bd08      	pop	{r3, pc}
 80a0a48:	080601d8 	.word	0x080601d8

080a0a4c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0a4c:	b508      	push	{r3, lr}
 80a0a4e:	4b02      	ldr	r3, [pc, #8]	; (80a0a58 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0a50:	681b      	ldr	r3, [r3, #0]
 80a0a52:	695b      	ldr	r3, [r3, #20]
 80a0a54:	9301      	str	r3, [sp, #4]
 80a0a56:	bd08      	pop	{r3, pc}
 80a0a58:	080601d8 	.word	0x080601d8

080a0a5c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a5c:	b508      	push	{r3, lr}
 80a0a5e:	4b02      	ldr	r3, [pc, #8]	; (80a0a68 <HAL_USB_USART_Receive_Data+0xc>)
 80a0a60:	681b      	ldr	r3, [r3, #0]
 80a0a62:	699b      	ldr	r3, [r3, #24]
 80a0a64:	9301      	str	r3, [sp, #4]
 80a0a66:	bd08      	pop	{r3, pc}
 80a0a68:	080601d8 	.word	0x080601d8

080a0a6c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a6c:	b508      	push	{r3, lr}
 80a0a6e:	4b02      	ldr	r3, [pc, #8]	; (80a0a78 <HAL_USB_USART_Send_Data+0xc>)
 80a0a70:	681b      	ldr	r3, [r3, #0]
 80a0a72:	69db      	ldr	r3, [r3, #28]
 80a0a74:	9301      	str	r3, [sp, #4]
 80a0a76:	bd08      	pop	{r3, pc}
 80a0a78:	080601d8 	.word	0x080601d8

080a0a7c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0a7c:	b508      	push	{r3, lr}
 80a0a7e:	4b02      	ldr	r3, [pc, #8]	; (80a0a88 <HAL_USB_USART_Flush_Data+0xc>)
 80a0a80:	681b      	ldr	r3, [r3, #0]
 80a0a82:	6a1b      	ldr	r3, [r3, #32]
 80a0a84:	9301      	str	r3, [sp, #4]
 80a0a86:	bd08      	pop	{r3, pc}
 80a0a88:	080601d8 	.word	0x080601d8

080a0a8c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0a8c:	b508      	push	{r3, lr}
 80a0a8e:	4b02      	ldr	r3, [pc, #8]	; (80a0a98 <inet_gethostbyname+0xc>)
 80a0a90:	681b      	ldr	r3, [r3, #0]
 80a0a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0a94:	9301      	str	r3, [sp, #4]
 80a0a96:	bd08      	pop	{r3, pc}
 80a0a98:	080601c0 	.word	0x080601c0

080a0a9c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0a9c:	b508      	push	{r3, lr}
 80a0a9e:	4b02      	ldr	r3, [pc, #8]	; (80a0aa8 <set_system_mode+0xc>)
 80a0aa0:	681b      	ldr	r3, [r3, #0]
 80a0aa2:	685b      	ldr	r3, [r3, #4]
 80a0aa4:	9301      	str	r3, [sp, #4]
 80a0aa6:	bd08      	pop	{r3, pc}
 80a0aa8:	080601a4 	.word	0x080601a4

080a0aac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0aac:	b508      	push	{r3, lr}
 80a0aae:	4b02      	ldr	r3, [pc, #8]	; (80a0ab8 <system_delay_ms+0xc>)
 80a0ab0:	681b      	ldr	r3, [r3, #0]
 80a0ab2:	695b      	ldr	r3, [r3, #20]
 80a0ab4:	9301      	str	r3, [sp, #4]
 80a0ab6:	bd08      	pop	{r3, pc}
 80a0ab8:	080601a4 	.word	0x080601a4

080a0abc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0abc:	b508      	push	{r3, lr}
 80a0abe:	4b02      	ldr	r3, [pc, #8]	; (80a0ac8 <system_thread_set_state+0xc>)
 80a0ac0:	681b      	ldr	r3, [r3, #0]
 80a0ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0ac4:	9301      	str	r3, [sp, #4]
 80a0ac6:	bd08      	pop	{r3, pc}
 80a0ac8:	080601a4 	.word	0x080601a4

080a0acc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0acc:	b508      	push	{r3, lr}
 80a0ace:	4b03      	ldr	r3, [pc, #12]	; (80a0adc <system_ctrl_set_app_request_handler+0x10>)
 80a0ad0:	681b      	ldr	r3, [r3, #0]
 80a0ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0ad6:	9301      	str	r3, [sp, #4]
 80a0ad8:	bd08      	pop	{r3, pc}
 80a0ada:	0000      	.short	0x0000
 80a0adc:	080601a4 	.word	0x080601a4

080a0ae0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0ae0:	b508      	push	{r3, lr}
 80a0ae2:	4b03      	ldr	r3, [pc, #12]	; (80a0af0 <system_ctrl_set_result+0x10>)
 80a0ae4:	681b      	ldr	r3, [r3, #0]
 80a0ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0aea:	9301      	str	r3, [sp, #4]
 80a0aec:	bd08      	pop	{r3, pc}
 80a0aee:	0000      	.short	0x0000
 80a0af0:	080601a4 	.word	0x080601a4

080a0af4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0af4:	b508      	push	{r3, lr}
 80a0af6:	4b02      	ldr	r3, [pc, #8]	; (80a0b00 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0af8:	681b      	ldr	r3, [r3, #0]
 80a0afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0afc:	9301      	str	r3, [sp, #4]
 80a0afe:	bd08      	pop	{r3, pc}
 80a0b00:	080601cc 	.word	0x080601cc

080a0b04 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b04:	b508      	push	{r3, lr}
 80a0b06:	4b02      	ldr	r3, [pc, #8]	; (80a0b10 <network_connect+0xc>)
 80a0b08:	681b      	ldr	r3, [r3, #0]
 80a0b0a:	685b      	ldr	r3, [r3, #4]
 80a0b0c:	9301      	str	r3, [sp, #4]
 80a0b0e:	bd08      	pop	{r3, pc}
 80a0b10:	080601c8 	.word	0x080601c8

080a0b14 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0b14:	b508      	push	{r3, lr}
 80a0b16:	4b02      	ldr	r3, [pc, #8]	; (80a0b20 <network_connecting+0xc>)
 80a0b18:	681b      	ldr	r3, [r3, #0]
 80a0b1a:	689b      	ldr	r3, [r3, #8]
 80a0b1c:	9301      	str	r3, [sp, #4]
 80a0b1e:	bd08      	pop	{r3, pc}
 80a0b20:	080601c8 	.word	0x080601c8

080a0b24 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0b24:	b508      	push	{r3, lr}
 80a0b26:	4b02      	ldr	r3, [pc, #8]	; (80a0b30 <network_disconnect+0xc>)
 80a0b28:	681b      	ldr	r3, [r3, #0]
 80a0b2a:	68db      	ldr	r3, [r3, #12]
 80a0b2c:	9301      	str	r3, [sp, #4]
 80a0b2e:	bd08      	pop	{r3, pc}
 80a0b30:	080601c8 	.word	0x080601c8

080a0b34 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0b34:	b508      	push	{r3, lr}
 80a0b36:	4b02      	ldr	r3, [pc, #8]	; (80a0b40 <network_ready+0xc>)
 80a0b38:	681b      	ldr	r3, [r3, #0]
 80a0b3a:	691b      	ldr	r3, [r3, #16]
 80a0b3c:	9301      	str	r3, [sp, #4]
 80a0b3e:	bd08      	pop	{r3, pc}
 80a0b40:	080601c8 	.word	0x080601c8

080a0b44 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b44:	b508      	push	{r3, lr}
 80a0b46:	4b02      	ldr	r3, [pc, #8]	; (80a0b50 <network_on+0xc>)
 80a0b48:	681b      	ldr	r3, [r3, #0]
 80a0b4a:	695b      	ldr	r3, [r3, #20]
 80a0b4c:	9301      	str	r3, [sp, #4]
 80a0b4e:	bd08      	pop	{r3, pc}
 80a0b50:	080601c8 	.word	0x080601c8

080a0b54 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b54:	b508      	push	{r3, lr}
 80a0b56:	4b02      	ldr	r3, [pc, #8]	; (80a0b60 <network_off+0xc>)
 80a0b58:	681b      	ldr	r3, [r3, #0]
 80a0b5a:	699b      	ldr	r3, [r3, #24]
 80a0b5c:	9301      	str	r3, [sp, #4]
 80a0b5e:	bd08      	pop	{r3, pc}
 80a0b60:	080601c8 	.word	0x080601c8

080a0b64 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0b64:	b508      	push	{r3, lr}
 80a0b66:	4b02      	ldr	r3, [pc, #8]	; (80a0b70 <network_listen+0xc>)
 80a0b68:	681b      	ldr	r3, [r3, #0]
 80a0b6a:	69db      	ldr	r3, [r3, #28]
 80a0b6c:	9301      	str	r3, [sp, #4]
 80a0b6e:	bd08      	pop	{r3, pc}
 80a0b70:	080601c8 	.word	0x080601c8

080a0b74 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0b74:	b508      	push	{r3, lr}
 80a0b76:	4b02      	ldr	r3, [pc, #8]	; (80a0b80 <network_listening+0xc>)
 80a0b78:	681b      	ldr	r3, [r3, #0]
 80a0b7a:	6a1b      	ldr	r3, [r3, #32]
 80a0b7c:	9301      	str	r3, [sp, #4]
 80a0b7e:	bd08      	pop	{r3, pc}
 80a0b80:	080601c8 	.word	0x080601c8

080a0b84 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0b84:	b508      	push	{r3, lr}
 80a0b86:	4b02      	ldr	r3, [pc, #8]	; (80a0b90 <network_set_listen_timeout+0xc>)
 80a0b88:	681b      	ldr	r3, [r3, #0]
 80a0b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0b8c:	9301      	str	r3, [sp, #4]
 80a0b8e:	bd08      	pop	{r3, pc}
 80a0b90:	080601c8 	.word	0x080601c8

080a0b94 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0b94:	b508      	push	{r3, lr}
 80a0b96:	4b02      	ldr	r3, [pc, #8]	; (80a0ba0 <network_get_listen_timeout+0xc>)
 80a0b98:	681b      	ldr	r3, [r3, #0]
 80a0b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0b9c:	9301      	str	r3, [sp, #4]
 80a0b9e:	bd08      	pop	{r3, pc}
 80a0ba0:	080601c8 	.word	0x080601c8

080a0ba4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0ba4:	b508      	push	{r3, lr}
 80a0ba6:	4b02      	ldr	r3, [pc, #8]	; (80a0bb0 <network_is_on+0xc>)
 80a0ba8:	681b      	ldr	r3, [r3, #0]
 80a0baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0bac:	9301      	str	r3, [sp, #4]
 80a0bae:	bd08      	pop	{r3, pc}
 80a0bb0:	080601c8 	.word	0x080601c8

080a0bb4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0bb4:	b508      	push	{r3, lr}
 80a0bb6:	4b02      	ldr	r3, [pc, #8]	; (80a0bc0 <network_is_off+0xc>)
 80a0bb8:	681b      	ldr	r3, [r3, #0]
 80a0bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0bbc:	9301      	str	r3, [sp, #4]
 80a0bbe:	bd08      	pop	{r3, pc}
 80a0bc0:	080601c8 	.word	0x080601c8

080a0bc4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0bc4:	b508      	push	{r3, lr}
 80a0bc6:	4b02      	ldr	r3, [pc, #8]	; (80a0bd0 <malloc+0xc>)
 80a0bc8:	681b      	ldr	r3, [r3, #0]
 80a0bca:	681b      	ldr	r3, [r3, #0]
 80a0bcc:	9301      	str	r3, [sp, #4]
 80a0bce:	bd08      	pop	{r3, pc}
 80a0bd0:	080601a0 	.word	0x080601a0

080a0bd4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0bd4:	b508      	push	{r3, lr}
 80a0bd6:	4b02      	ldr	r3, [pc, #8]	; (80a0be0 <free+0xc>)
 80a0bd8:	681b      	ldr	r3, [r3, #0]
 80a0bda:	685b      	ldr	r3, [r3, #4]
 80a0bdc:	9301      	str	r3, [sp, #4]
 80a0bde:	bd08      	pop	{r3, pc}
 80a0be0:	080601a0 	.word	0x080601a0

080a0be4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0be4:	b508      	push	{r3, lr}
 80a0be6:	4b02      	ldr	r3, [pc, #8]	; (80a0bf0 <realloc+0xc>)
 80a0be8:	681b      	ldr	r3, [r3, #0]
 80a0bea:	689b      	ldr	r3, [r3, #8]
 80a0bec:	9301      	str	r3, [sp, #4]
 80a0bee:	bd08      	pop	{r3, pc}
 80a0bf0:	080601a0 	.word	0x080601a0

080a0bf4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0bf4:	b508      	push	{r3, lr}
 80a0bf6:	4b02      	ldr	r3, [pc, #8]	; (80a0c00 <newlib_impure_ptr_callback+0xc>)
 80a0bf8:	681b      	ldr	r3, [r3, #0]
 80a0bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0bfc:	9301      	str	r3, [sp, #4]
 80a0bfe:	bd08      	pop	{r3, pc}
 80a0c00:	080601a0 	.word	0x080601a0

080a0c04 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0c04:	2100      	movs	r1, #0
 80a0c06:	f7ff bf51 	b.w	80a0aac <system_delay_ms>

080a0c0a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a0c0a:	4770      	bx	lr

080a0c0c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c0e:	4606      	mov	r6, r0
 80a0c10:	4615      	mov	r5, r2
 80a0c12:	460c      	mov	r4, r1
 80a0c14:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0c16:	42bc      	cmp	r4, r7
 80a0c18:	d006      	beq.n	80a0c28 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0c1a:	6833      	ldr	r3, [r6, #0]
 80a0c1c:	4630      	mov	r0, r6
 80a0c1e:	689b      	ldr	r3, [r3, #8]
 80a0c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0c24:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a0c26:	e7f6      	b.n	80a0c16 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a0c28:	4628      	mov	r0, r5
 80a0c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c2c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a0c2c:	2200      	movs	r2, #0
 80a0c2e:	7c00      	ldrb	r0, [r0, #16]
 80a0c30:	f7ff be30 	b.w	80a0894 <hal_i2c_write>

080a0c34 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a0c34:	2100      	movs	r1, #0
 80a0c36:	7c00      	ldrb	r0, [r0, #16]
 80a0c38:	f7ff be34 	b.w	80a08a4 <hal_i2c_available>

080a0c3c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0c3c:	2100      	movs	r1, #0
 80a0c3e:	7c00      	ldrb	r0, [r0, #16]
 80a0c40:	f7ff be38 	b.w	80a08b4 <hal_i2c_read>

080a0c44 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0c44:	2100      	movs	r1, #0
 80a0c46:	7c00      	ldrb	r0, [r0, #16]
 80a0c48:	f7ff be3c 	b.w	80a08c4 <hal_i2c_peek>

080a0c4c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0c4c:	2100      	movs	r1, #0
 80a0c4e:	7c00      	ldrb	r0, [r0, #16]
 80a0c50:	f7ff be40 	b.w	80a08d4 <hal_i2c_flush>

080a0c54 <_ZN7TwoWireD0Ev>:
 80a0c54:	b510      	push	{r4, lr}
 80a0c56:	4604      	mov	r4, r0
 80a0c58:	2114      	movs	r1, #20
 80a0c5a:	f000 ffa9 	bl	80a1bb0 <_ZdlPvj>
 80a0c5e:	4620      	mov	r0, r4
 80a0c60:	bd10      	pop	{r4, pc}
	...

080a0c64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0c64:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0c6a:	4604      	mov	r4, r0
 80a0c6c:	4608      	mov	r0, r1
 80a0c6e:	2100      	movs	r1, #0
 80a0c70:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0c74:	4b03      	ldr	r3, [pc, #12]	; (80a0c84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a0c76:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0c78:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a0c7a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0c7c:	f7ff fe3a 	bl	80a08f4 <hal_i2c_init>
}
 80a0c80:	4620      	mov	r0, r4
 80a0c82:	bd10      	pop	{r4, pc}
 80a0c84:	080a265c 	.word	0x080a265c

080a0c88 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a0c88:	2300      	movs	r3, #0
 80a0c8a:	7c00      	ldrb	r0, [r0, #16]
 80a0c8c:	461a      	mov	r2, r3
 80a0c8e:	4619      	mov	r1, r3
 80a0c90:	f7ff bde8 	b.w	80a0864 <hal_i2c_begin>

080a0c94 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a0c94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a0c96:	2200      	movs	r2, #0
 80a0c98:	2314      	movs	r3, #20
 80a0c9a:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a0c9e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a0ca2:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a0ca4:	7c00      	ldrb	r0, [r0, #16]
 80a0ca6:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0caa:	684b      	ldr	r3, [r1, #4]
 80a0cac:	9303      	str	r3, [sp, #12]
 80a0cae:	68cb      	ldr	r3, [r1, #12]
 80a0cb0:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a0cb2:	7a0b      	ldrb	r3, [r1, #8]
 80a0cb4:	a901      	add	r1, sp, #4
 80a0cb6:	9305      	str	r3, [sp, #20]
 80a0cb8:	f7ff fe26 	bl	80a0908 <hal_i2c_request_ex>
}
 80a0cbc:	b007      	add	sp, #28
 80a0cbe:	f85d fb04 	ldr.w	pc, [sp], #4

080a0cc2 <_ZN7TwoWire11requestFromEhjh>:
{
 80a0cc2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a0cc4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a0cc6:	f88d 1000 	strb.w	r1, [sp]
 80a0cca:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a0cce:	bf18      	it	ne
 80a0cd0:	2301      	movne	r3, #1
 80a0cd2:	9103      	str	r1, [sp, #12]
 80a0cd4:	4669      	mov	r1, sp
    size_ = size;
 80a0cd6:	9201      	str	r2, [sp, #4]
 80a0cd8:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0cdc:	f7ff ffda 	bl	80a0c94 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a0ce0:	b005      	add	sp, #20
 80a0ce2:	f85d fb04 	ldr.w	pc, [sp], #4

080a0ce6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a0ce6:	2301      	movs	r3, #1
 80a0ce8:	f7ff bfeb 	b.w	80a0cc2 <_ZN7TwoWire11requestFromEhjh>

080a0cec <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a0cec:	2200      	movs	r2, #0
 80a0cee:	7c00      	ldrb	r0, [r0, #16]
 80a0cf0:	f7ff bdc0 	b.w	80a0874 <hal_i2c_begin_transmission>

080a0cf4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a0cf4:	2200      	movs	r2, #0
 80a0cf6:	7c00      	ldrb	r0, [r0, #16]
 80a0cf8:	f7ff bdc4 	b.w	80a0884 <hal_i2c_end_transmission>

080a0cfc <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a0cfc:	2101      	movs	r1, #1
 80a0cfe:	f7ff bff9 	b.w	80a0cf4 <_ZN7TwoWire15endTransmissionEh>

080a0d02 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0d02:	4770      	bx	lr

080a0d04 <_ZN9IPAddressD0Ev>:
 80a0d04:	b510      	push	{r4, lr}
 80a0d06:	4604      	mov	r4, r0
 80a0d08:	2118      	movs	r1, #24
 80a0d0a:	f000 ff51 	bl	80a1bb0 <_ZdlPvj>
 80a0d0e:	4620      	mov	r0, r4
 80a0d10:	bd10      	pop	{r4, pc}

080a0d12 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d14:	460e      	mov	r6, r1
 80a0d16:	2400      	movs	r4, #0
 80a0d18:	f100 0708 	add.w	r7, r0, #8
 80a0d1c:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0d1e:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0d22:	220a      	movs	r2, #10
 80a0d24:	4630      	mov	r0, r6
 80a0d26:	f000 f91e 	bl	80a0f66 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0d2a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0d2c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0d2e:	d101      	bne.n	80a0d34 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0d30:	4620      	mov	r0, r4
 80a0d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0d34:	2c00      	cmp	r4, #0
 80a0d36:	d0f2      	beq.n	80a0d1e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0d38:	212e      	movs	r1, #46	; 0x2e
 80a0d3a:	4630      	mov	r0, r6
 80a0d3c:	f000 f8fa 	bl	80a0f34 <_ZN5Print5printEc>
 80a0d40:	4404      	add	r4, r0
 80a0d42:	e7ec      	b.n	80a0d1e <_ZNK9IPAddress7printToER5Print+0xc>

080a0d44 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0d44:	b510      	push	{r4, lr}
 80a0d46:	4604      	mov	r4, r0
 80a0d48:	4b04      	ldr	r3, [pc, #16]	; (80a0d5c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0d4a:	2211      	movs	r2, #17
 80a0d4c:	2100      	movs	r1, #0
 80a0d4e:	f840 3b04 	str.w	r3, [r0], #4
 80a0d52:	f001 fb8b 	bl	80a246c <memset>
}
 80a0d56:	4620      	mov	r0, r4
 80a0d58:	bd10      	pop	{r4, pc}
 80a0d5a:	bf00      	nop
 80a0d5c:	080a2684 	.word	0x080a2684

080a0d60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0d60:	4603      	mov	r3, r0
 80a0d62:	4a07      	ldr	r2, [pc, #28]	; (80a0d80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0d64:	b510      	push	{r4, lr}
 80a0d66:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0d6a:	f101 0210 	add.w	r2, r1, #16
 80a0d6e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0d72:	4291      	cmp	r1, r2
 80a0d74:	f843 4b04 	str.w	r4, [r3], #4
 80a0d78:	d1f9      	bne.n	80a0d6e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0d7a:	780a      	ldrb	r2, [r1, #0]
 80a0d7c:	701a      	strb	r2, [r3, #0]
}
 80a0d7e:	bd10      	pop	{r4, pc}
 80a0d80:	080a2684 	.word	0x080a2684

080a0d84 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a0d84:	4a02      	ldr	r2, [pc, #8]	; (80a0d90 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a0d86:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0d8a:	2204      	movs	r2, #4
 80a0d8c:	7502      	strb	r2, [r0, #20]
}
 80a0d8e:	4770      	bx	lr
 80a0d90:	080a2684 	.word	0x080a2684

080a0d94 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0d94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0d96:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0d9a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0d9e:	2304      	movs	r3, #4
 80a0da0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0da4:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0da8:	6044      	str	r4, [r0, #4]
 80a0daa:	7503      	strb	r3, [r0, #20]
}
 80a0dac:	bd10      	pop	{r4, pc}
	...

080a0db0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0db2:	4d04      	ldr	r5, [pc, #16]	; (80a0dc4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0db4:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0db6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0dba:	9500      	str	r5, [sp, #0]
 80a0dbc:	f7ff ffea 	bl	80a0d94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0dc0:	b003      	add	sp, #12
 80a0dc2:	bd30      	pop	{r4, r5, pc}
 80a0dc4:	080a2684 	.word	0x080a2684

080a0dc8 <_ZN9IPAddressaSEPKh>:
{
 80a0dc8:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a0dca:	78cb      	ldrb	r3, [r1, #3]
 80a0dcc:	9300      	str	r3, [sp, #0]
 80a0dce:	788b      	ldrb	r3, [r1, #2]
 80a0dd0:	784a      	ldrb	r2, [r1, #1]
 80a0dd2:	7809      	ldrb	r1, [r1, #0]
 80a0dd4:	f7ff ffde 	bl	80a0d94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0dd8:	b002      	add	sp, #8
 80a0dda:	bd10      	pop	{r4, pc}

080a0ddc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0ddc:	4b01      	ldr	r3, [pc, #4]	; (80a0de4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0dde:	4a02      	ldr	r2, [pc, #8]	; (80a0de8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0de0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0de2:	4770      	bx	lr
 80a0de4:	20000110 	.word	0x20000110
 80a0de8:	080a2690 	.word	0x080a2690

080a0dec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0dec:	2300      	movs	r3, #0
 80a0dee:	6840      	ldr	r0, [r0, #4]
 80a0df0:	461a      	mov	r2, r3
 80a0df2:	f7ff be87 	b.w	80a0b04 <network_connect>

080a0df6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0df6:	2200      	movs	r2, #0
 80a0df8:	2102      	movs	r1, #2
 80a0dfa:	6840      	ldr	r0, [r0, #4]
 80a0dfc:	f7ff be92 	b.w	80a0b24 <network_disconnect>

080a0e00 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0e00:	2200      	movs	r2, #0
 80a0e02:	6840      	ldr	r0, [r0, #4]
 80a0e04:	4611      	mov	r1, r2
 80a0e06:	f7ff be85 	b.w	80a0b14 <network_connecting>

080a0e0a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0e0a:	2200      	movs	r2, #0
 80a0e0c:	6840      	ldr	r0, [r0, #4]
 80a0e0e:	4611      	mov	r1, r2
 80a0e10:	f7ff be90 	b.w	80a0b34 <network_ready>

080a0e14 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0e14:	2300      	movs	r3, #0
 80a0e16:	6840      	ldr	r0, [r0, #4]
 80a0e18:	461a      	mov	r2, r3
 80a0e1a:	4619      	mov	r1, r3
 80a0e1c:	f7ff be92 	b.w	80a0b44 <network_on>

080a0e20 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0e20:	2300      	movs	r3, #0
 80a0e22:	6840      	ldr	r0, [r0, #4]
 80a0e24:	461a      	mov	r2, r3
 80a0e26:	4619      	mov	r1, r3
 80a0e28:	f7ff be94 	b.w	80a0b54 <network_off>

080a0e2c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0e2c:	2100      	movs	r1, #0
 80a0e2e:	6840      	ldr	r0, [r0, #4]
 80a0e30:	f7ff beb8 	b.w	80a0ba4 <network_is_on>

080a0e34 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a0e34:	2100      	movs	r1, #0
 80a0e36:	6840      	ldr	r0, [r0, #4]
 80a0e38:	f7ff bebc 	b.w	80a0bb4 <network_is_off>

080a0e3c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0e3c:	2200      	movs	r2, #0
 80a0e3e:	6840      	ldr	r0, [r0, #4]
 80a0e40:	f081 0101 	eor.w	r1, r1, #1
 80a0e44:	f7ff be8e 	b.w	80a0b64 <network_listen>

080a0e48 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0e48:	2200      	movs	r2, #0
 80a0e4a:	6840      	ldr	r0, [r0, #4]
 80a0e4c:	f7ff be9a 	b.w	80a0b84 <network_set_listen_timeout>

080a0e50 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0e50:	2200      	movs	r2, #0
 80a0e52:	6840      	ldr	r0, [r0, #4]
 80a0e54:	4611      	mov	r1, r2
 80a0e56:	f7ff be9d 	b.w	80a0b94 <network_get_listen_timeout>

080a0e5a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0e5a:	2200      	movs	r2, #0
 80a0e5c:	6840      	ldr	r0, [r0, #4]
 80a0e5e:	4611      	mov	r1, r2
 80a0e60:	f7ff be88 	b.w	80a0b74 <network_listening>

080a0e64 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0e64:	b570      	push	{r4, r5, r6, lr}
 80a0e66:	4615      	mov	r5, r2
 80a0e68:	b08e      	sub	sp, #56	; 0x38
 80a0e6a:	4604      	mov	r4, r0
    IPAddress addr;
 80a0e6c:	a808      	add	r0, sp, #32
 80a0e6e:	f7ff ff69 	bl	80a0d44 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0e72:	2211      	movs	r2, #17
 80a0e74:	2100      	movs	r1, #0
 80a0e76:	a803      	add	r0, sp, #12
 80a0e78:	f001 faf8 	bl	80a246c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0e7c:	2600      	movs	r6, #0
 80a0e7e:	4628      	mov	r0, r5
 80a0e80:	f001 fb28 	bl	80a24d4 <strlen>
 80a0e84:	4b0a      	ldr	r3, [pc, #40]	; (80a0eb0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0e86:	9600      	str	r6, [sp, #0]
 80a0e88:	b281      	uxth	r1, r0
 80a0e8a:	685b      	ldr	r3, [r3, #4]
 80a0e8c:	4628      	mov	r0, r5
 80a0e8e:	aa03      	add	r2, sp, #12
 80a0e90:	f7ff fdfc 	bl	80a0a8c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0e94:	b130      	cbz	r0, 80a0ea4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a0e96:	4631      	mov	r1, r6
 80a0e98:	4620      	mov	r0, r4
 80a0e9a:	f7ff ff73 	bl	80a0d84 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0e9e:	4620      	mov	r0, r4
 80a0ea0:	b00e      	add	sp, #56	; 0x38
 80a0ea2:	bd70      	pop	{r4, r5, r6, pc}
 80a0ea4:	4620      	mov	r0, r4
 80a0ea6:	a903      	add	r1, sp, #12
 80a0ea8:	f7ff ff5a 	bl	80a0d60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a0eac:	e7f7      	b.n	80a0e9e <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a0eae:	bf00      	nop
 80a0eb0:	20000594 	.word	0x20000594

080a0eb4 <_ZN5spark12NetworkClass4fromEm>:
}
 80a0eb4:	4a03      	ldr	r2, [pc, #12]	; (80a0ec4 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a0eb6:	4b04      	ldr	r3, [pc, #16]	; (80a0ec8 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a0eb8:	2804      	cmp	r0, #4
 80a0eba:	bf14      	ite	ne
 80a0ebc:	4610      	movne	r0, r2
 80a0ebe:	4618      	moveq	r0, r3
 80a0ec0:	4770      	bx	lr
 80a0ec2:	bf00      	nop
 80a0ec4:	20000114 	.word	0x20000114
 80a0ec8:	20000594 	.word	0x20000594

080a0ecc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0ecc:	4b02      	ldr	r3, [pc, #8]	; (80a0ed8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0ece:	4a03      	ldr	r2, [pc, #12]	; (80a0edc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0ed0:	601a      	str	r2, [r3, #0]
 80a0ed2:	2200      	movs	r2, #0
 80a0ed4:	605a      	str	r2, [r3, #4]

} // spark
 80a0ed6:	4770      	bx	lr
 80a0ed8:	20000114 	.word	0x20000114
 80a0edc:	080a269c 	.word	0x080a269c

080a0ee0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ee2:	4606      	mov	r6, r0
 80a0ee4:	460d      	mov	r5, r1
  size_t n = 0;
 80a0ee6:	2400      	movs	r4, #0
 80a0ee8:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0eea:	42bd      	cmp	r5, r7
 80a0eec:	d00c      	beq.n	80a0f08 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0eee:	6833      	ldr	r3, [r6, #0]
 80a0ef0:	4630      	mov	r0, r6
 80a0ef2:	689b      	ldr	r3, [r3, #8]
 80a0ef4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0ef8:	4798      	blx	r3
     if (chunk>=0)
 80a0efa:	1e03      	subs	r3, r0, #0
 80a0efc:	db01      	blt.n	80a0f02 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0efe:	441c      	add	r4, r3
  while (size--) {
 80a0f00:	e7f3      	b.n	80a0eea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0f02:	2c00      	cmp	r4, #0
 80a0f04:	bf08      	it	eq
 80a0f06:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0f08:	4620      	mov	r0, r4
 80a0f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0f0c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a0f0c:	b570      	push	{r4, r5, r6, lr}
 80a0f0e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0f10:	460c      	mov	r4, r1
    }
 80a0f12:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0f14:	b149      	cbz	r1, 80a0f2a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0f16:	f001 fadd 	bl	80a24d4 <strlen>
 80a0f1a:	682b      	ldr	r3, [r5, #0]
 80a0f1c:	4602      	mov	r2, r0
 80a0f1e:	4621      	mov	r1, r4
 80a0f20:	4628      	mov	r0, r5
    }
 80a0f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0f26:	68db      	ldr	r3, [r3, #12]
 80a0f28:	4718      	bx	r3
    }
 80a0f2a:	bd70      	pop	{r4, r5, r6, pc}

080a0f2c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a0f2c:	b508      	push	{r3, lr}
  return write(str);
 80a0f2e:	f7ff ffed 	bl	80a0f0c <_ZN5Print5writeEPKc>
}
 80a0f32:	bd08      	pop	{r3, pc}

080a0f34 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a0f34:	6803      	ldr	r3, [r0, #0]
 80a0f36:	689b      	ldr	r3, [r3, #8]
 80a0f38:	4718      	bx	r3

080a0f3a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0f3a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0f3c:	210d      	movs	r1, #13
{
 80a0f3e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0f40:	f7ff fff8 	bl	80a0f34 <_ZN5Print5printEc>
  n += print('\n');
 80a0f44:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0f46:	4604      	mov	r4, r0
  n += print('\n');
 80a0f48:	4628      	mov	r0, r5
 80a0f4a:	f7ff fff3 	bl	80a0f34 <_ZN5Print5printEc>
  return n;
}
 80a0f4e:	4420      	add	r0, r4
 80a0f50:	bd38      	pop	{r3, r4, r5, pc}

080a0f52 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0f52:	b538      	push	{r3, r4, r5, lr}
 80a0f54:	4605      	mov	r5, r0
  return write(str);
 80a0f56:	f7ff ffd9 	bl	80a0f0c <_ZN5Print5writeEPKc>
 80a0f5a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a0f5c:	4628      	mov	r0, r5
 80a0f5e:	f7ff ffec 	bl	80a0f3a <_ZN5Print7printlnEv>
  return n;
}
 80a0f62:	4420      	add	r0, r4
 80a0f64:	bd38      	pop	{r3, r4, r5, pc}

080a0f66 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0f66:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0f68:	2a01      	cmp	r2, #1
 80a0f6a:	bf98      	it	ls
 80a0f6c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0f6e:	b530      	push	{r4, r5, lr}
 80a0f70:	b08b      	sub	sp, #44	; 0x2c
 80a0f72:	460c      	mov	r4, r1
  *str = '\0';
 80a0f74:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0f78:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0f7a:	4625      	mov	r5, r4
 80a0f7c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0f80:	fb04 5312 	mls	r3, r4, r2, r5
 80a0f84:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0f86:	2b09      	cmp	r3, #9
 80a0f88:	bf94      	ite	ls
 80a0f8a:	3330      	addls	r3, #48	; 0x30
 80a0f8c:	3337      	addhi	r3, #55	; 0x37
 80a0f8e:	b2db      	uxtb	r3, r3
  } while(n);
 80a0f90:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0f92:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0f96:	d9f0      	bls.n	80a0f7a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0f98:	f7ff ffb8 	bl	80a0f0c <_ZN5Print5writeEPKc>
}
 80a0f9c:	b00b      	add	sp, #44	; 0x2c
 80a0f9e:	bd30      	pop	{r4, r5, pc}

080a0fa0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0fa0:	2200      	movs	r2, #0
 80a0fa2:	4b01      	ldr	r3, [pc, #4]	; (80a0fa8 <_GLOBAL__sub_I_RGB+0x8>)
 80a0fa4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a0fa6:	4770      	bx	lr
 80a0fa8:	2000011c 	.word	0x2000011c

080a0fac <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0fac:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0fae:	2600      	movs	r6, #0
 80a0fb0:	4604      	mov	r4, r0
 80a0fb2:	460d      	mov	r5, r1
 80a0fb4:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0fb8:	f7ff fc1c 	bl	80a07f4 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0fbc:	4628      	mov	r0, r5
    _spi = spi;
 80a0fbe:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0fc0:	f7ff fcdc 	bl	80a097c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0fc4:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0fc6:	6066      	str	r6, [r4, #4]
}
 80a0fc8:	bd70      	pop	{r4, r5, r6, pc}

080a0fca <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0fca:	b510      	push	{r4, lr}
 80a0fcc:	4604      	mov	r4, r0
{
	free(buffer);
 80a0fce:	6800      	ldr	r0, [r0, #0]
 80a0fd0:	f7ff fe00 	bl	80a0bd4 <free>
}
 80a0fd4:	4620      	mov	r0, r4
 80a0fd6:	bd10      	pop	{r4, pc}

080a0fd8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0fd8:	b510      	push	{r4, lr}
 80a0fda:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0fdc:	6800      	ldr	r0, [r0, #0]
 80a0fde:	b108      	cbz	r0, 80a0fe4 <_ZN6String10invalidateEv+0xc>
 80a0fe0:	f7ff fdf8 	bl	80a0bd4 <free>
	buffer = NULL;
 80a0fe4:	2300      	movs	r3, #0
	capacity = len = 0;
 80a0fe6:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a0fea:	6023      	str	r3, [r4, #0]
}
 80a0fec:	bd10      	pop	{r4, pc}

080a0fee <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0fee:	b538      	push	{r3, r4, r5, lr}
 80a0ff0:	4604      	mov	r4, r0
 80a0ff2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0ff4:	6800      	ldr	r0, [r0, #0]
 80a0ff6:	3101      	adds	r1, #1
 80a0ff8:	f7ff fdf4 	bl	80a0be4 <realloc>
	if (newbuffer) {
 80a0ffc:	b110      	cbz	r0, 80a1004 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0ffe:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a1002:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1004:	bd38      	pop	{r3, r4, r5, pc}

080a1006 <_ZN6String7reserveEj>:
{
 80a1006:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1008:	6803      	ldr	r3, [r0, #0]
{
 80a100a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a100c:	b123      	cbz	r3, 80a1018 <_ZN6String7reserveEj+0x12>
 80a100e:	6843      	ldr	r3, [r0, #4]
 80a1010:	428b      	cmp	r3, r1
 80a1012:	d301      	bcc.n	80a1018 <_ZN6String7reserveEj+0x12>
 80a1014:	2001      	movs	r0, #1
}
 80a1016:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a1018:	4620      	mov	r0, r4
 80a101a:	f7ff ffe8 	bl	80a0fee <_ZN6String12changeBufferEj>
 80a101e:	2800      	cmp	r0, #0
 80a1020:	d0f9      	beq.n	80a1016 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a1022:	68a3      	ldr	r3, [r4, #8]
 80a1024:	2b00      	cmp	r3, #0
 80a1026:	d1f5      	bne.n	80a1014 <_ZN6String7reserveEj+0xe>
 80a1028:	6822      	ldr	r2, [r4, #0]
 80a102a:	7013      	strb	r3, [r2, #0]
 80a102c:	e7f2      	b.n	80a1014 <_ZN6String7reserveEj+0xe>

080a102e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a102e:	b570      	push	{r4, r5, r6, lr}
 80a1030:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1032:	4611      	mov	r1, r2
{
 80a1034:	4604      	mov	r4, r0
 80a1036:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1038:	f7ff ffe5 	bl	80a1006 <_ZN6String7reserveEj>
 80a103c:	b920      	cbnz	r0, 80a1048 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a103e:	4620      	mov	r0, r4
 80a1040:	f7ff ffca 	bl	80a0fd8 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a1044:	4620      	mov	r0, r4
 80a1046:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a1048:	462a      	mov	r2, r5
 80a104a:	4631      	mov	r1, r6
 80a104c:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a104e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1050:	f001 f9fe 	bl	80a2450 <memcpy>
	buffer[len] = 0;
 80a1054:	2100      	movs	r1, #0
 80a1056:	6822      	ldr	r2, [r4, #0]
 80a1058:	68a3      	ldr	r3, [r4, #8]
 80a105a:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a105c:	e7f2      	b.n	80a1044 <_ZN6String4copyEPKcj+0x16>

080a105e <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a105e:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a1060:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a1062:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1064:	460d      	mov	r5, r1
	capacity = 0;
 80a1066:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a106a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a106c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a106e:	b139      	cbz	r1, 80a1080 <_ZN6StringC1EPKc+0x22>
 80a1070:	4608      	mov	r0, r1
 80a1072:	f001 fa2f 	bl	80a24d4 <strlen>
 80a1076:	4629      	mov	r1, r5
 80a1078:	4602      	mov	r2, r0
 80a107a:	4620      	mov	r0, r4
 80a107c:	f7ff ffd7 	bl	80a102e <_ZN6String4copyEPKcj>
}
 80a1080:	4620      	mov	r0, r4
 80a1082:	bd38      	pop	{r3, r4, r5, pc}

080a1084 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1084:	b538      	push	{r3, r4, r5, lr}
 80a1086:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1088:	460c      	mov	r4, r1
 80a108a:	b149      	cbz	r1, 80a10a0 <_ZN6StringaSEPKc+0x1c>
 80a108c:	4608      	mov	r0, r1
 80a108e:	f001 fa21 	bl	80a24d4 <strlen>
 80a1092:	4621      	mov	r1, r4
 80a1094:	4602      	mov	r2, r0
 80a1096:	4628      	mov	r0, r5
 80a1098:	f7ff ffc9 	bl	80a102e <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a109c:	4628      	mov	r0, r5
 80a109e:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a10a0:	f7ff ff9a 	bl	80a0fd8 <_ZN6String10invalidateEv>
 80a10a4:	e7fa      	b.n	80a109c <_ZN6StringaSEPKc+0x18>

080a10a6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a10a6:	b570      	push	{r4, r5, r6, lr}
 80a10a8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a10aa:	460e      	mov	r6, r1
 80a10ac:	b909      	cbnz	r1, 80a10b2 <_ZN6String6concatEPKcj+0xc>
 80a10ae:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a10b0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a10b2:	b16a      	cbz	r2, 80a10d0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a10b4:	6884      	ldr	r4, [r0, #8]
 80a10b6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a10b8:	4621      	mov	r1, r4
 80a10ba:	f7ff ffa4 	bl	80a1006 <_ZN6String7reserveEj>
 80a10be:	2800      	cmp	r0, #0
 80a10c0:	d0f5      	beq.n	80a10ae <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a10c2:	6828      	ldr	r0, [r5, #0]
 80a10c4:	68ab      	ldr	r3, [r5, #8]
 80a10c6:	4631      	mov	r1, r6
 80a10c8:	4418      	add	r0, r3
 80a10ca:	f001 f9fb 	bl	80a24c4 <strcpy>
	len = newlen;
 80a10ce:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a10d0:	2001      	movs	r0, #1
 80a10d2:	e7ed      	b.n	80a10b0 <_ZN6String6concatEPKcj+0xa>

080a10d4 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a10d4:	2300      	movs	r3, #0
{
 80a10d6:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 80a10d8:	2201      	movs	r2, #1
	buf[0] = c;
 80a10da:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 80a10de:	a901      	add	r1, sp, #4
	buf[1] = 0;
 80a10e0:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a10e4:	f7ff ffdf 	bl	80a10a6 <_ZN6String6concatEPKcj>
}
 80a10e8:	b003      	add	sp, #12
 80a10ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a10f0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a10f0:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a10f2:	2000      	movs	r0, #0
 80a10f4:	4b04      	ldr	r3, [pc, #16]	; (80a1108 <_GLOBAL__sub_I_System+0x18>)
 80a10f6:	601a      	str	r2, [r3, #0]
 80a10f8:	4b04      	ldr	r3, [pc, #16]	; (80a110c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a10fa:	4a05      	ldr	r2, [pc, #20]	; (80a1110 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a10fc:	6018      	str	r0, [r3, #0]
 80a10fe:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a1100:	7198      	strb	r0, [r3, #6]
 80a1102:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1104:	f7ff bcca 	b.w	80a0a9c <set_system_mode>
 80a1108:	20000138 	.word	0x20000138
 80a110c:	2000012c 	.word	0x2000012c
 80a1110:	ffff0000 	.word	0xffff0000

080a1114 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1114:	4b02      	ldr	r3, [pc, #8]	; (80a1120 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1116:	681a      	ldr	r2, [r3, #0]
 80a1118:	4b02      	ldr	r3, [pc, #8]	; (80a1124 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a111a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a111c:	4770      	bx	lr
 80a111e:	bf00      	nop
 80a1120:	20000008 	.word	0x20000008
 80a1124:	2000013c 	.word	0x2000013c

080a1128 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a1128:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a112a:	6804      	ldr	r4, [r0, #0]
 80a112c:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a112e:	46a4      	mov	ip, r4
    }
 80a1130:	bc10      	pop	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1132:	4760      	bx	ip

080a1134 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a1134:	6803      	ldr	r3, [r0, #0]
 80a1136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1138:	4718      	bx	r3

080a113a <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a113a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a113c:	4770      	bx	lr

080a113e <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a113e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a1140:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a1142:	1a10      	subs	r0, r2, r0
 80a1144:	4770      	bx	lr

080a1146 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1146:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
 80a1148:	6803      	ldr	r3, [r0, #0]
{
 80a114a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
 80a114e:	2201      	movs	r2, #1
 80a1150:	68db      	ldr	r3, [r3, #12]
 80a1152:	f10d 0107 	add.w	r1, sp, #7
 80a1156:	4798      	blx	r3
}
 80a1158:	b003      	add	sp, #12
 80a115a:	f85d fb04 	ldr.w	pc, [sp], #4

080a115e <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a115e:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a1160:	6803      	ldr	r3, [r0, #0]
{
 80a1162:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a1164:	691b      	ldr	r3, [r3, #16]
 80a1166:	4798      	blx	r3
 80a1168:	b128      	cbz	r0, 80a1176 <_ZN3UDP4readEv+0x18>
 80a116a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a116c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a116e:	1c59      	adds	r1, r3, #1
 80a1170:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a1172:	5cd0      	ldrb	r0, [r2, r3]
}
 80a1174:	bd10      	pop	{r4, pc}
  return available() ? _buffer[_offset++] : -1;
 80a1176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a117a:	e7fb      	b.n	80a1174 <_ZN3UDP4readEv+0x16>

080a117c <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a117c:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a117e:	6803      	ldr	r3, [r0, #0]
{
 80a1180:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a1182:	691b      	ldr	r3, [r3, #16]
 80a1184:	4798      	blx	r3
 80a1186:	b118      	cbz	r0, 80a1190 <_ZN3UDP4peekEv+0x14>
 80a1188:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a118a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a118c:	5cd0      	ldrb	r0, [r2, r3]
}
 80a118e:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
 80a1190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1194:	e7fb      	b.n	80a118e <_ZN3UDP4peekEv+0x12>

080a1196 <_ZN3UDP5flushEv>:

void UDP::flush()
{
}
 80a1196:	4770      	bx	lr

080a1198 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a1198:	4603      	mov	r3, r0
 80a119a:	4608      	mov	r0, r1
 80a119c:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a119e:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a11a0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
 80a11a2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer+_offset, size);
 80a11a4:	6803      	ldr	r3, [r0, #0]
 80a11a6:	1a52      	subs	r2, r2, r1
 80a11a8:	68db      	ldr	r3, [r3, #12]
 80a11aa:	4421      	add	r1, r4
}
 80a11ac:	bc10      	pop	{r4}
    return p.write(_buffer+_offset, size);
 80a11ae:	4718      	bx	r3

080a11b0 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a11b0:	f1a0 0010 	sub.w	r0, r0, #16
 80a11b4:	f7ff bff0 	b.w	80a1198 <_ZNK3UDP7printToER5Print>

080a11b8 <_ZN3UDP5beginEtm>:
{
 80a11b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a11bc:	4616      	mov	r6, r2
    stop();
 80a11be:	6803      	ldr	r3, [r0, #0]
{
 80a11c0:	4688      	mov	r8, r1
    stop();
 80a11c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 80a11c4:	4604      	mov	r4, r0
    stop();
 80a11c6:	4798      	blx	r3
    if(Network.from(nif).ready())
 80a11c8:	4630      	mov	r0, r6
 80a11ca:	f7ff fe73 	bl	80a0eb4 <_ZN5spark12NetworkClass4fromEm>
 80a11ce:	6803      	ldr	r3, [r0, #0]
 80a11d0:	68db      	ldr	r3, [r3, #12]
 80a11d2:	4798      	blx	r3
 80a11d4:	4605      	mov	r5, r0
 80a11d6:	b188      	cbz	r0, 80a11fc <_ZN3UDP5beginEtm+0x44>
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a11d8:	2102      	movs	r1, #2
 80a11da:	4643      	mov	r3, r8
 80a11dc:	2211      	movs	r2, #17
 80a11de:	4608      	mov	r0, r1
 80a11e0:	9600      	str	r6, [sp, #0]
 80a11e2:	f7ff fba3 	bl	80a092c <socket_create>
 80a11e6:	6160      	str	r0, [r4, #20]
        if (socket_handle_valid(_sock))
 80a11e8:	f7ff fb98 	bl	80a091c <socket_handle_valid>
 80a11ec:	4607      	mov	r7, r0
 80a11ee:	b148      	cbz	r0, 80a1204 <_ZN3UDP5beginEtm+0x4c>
  _offset = 0;
 80a11f0:	2300      	movs	r3, #0
            _port = port;
 80a11f2:	f8a4 8018 	strh.w	r8, [r4, #24]
  _offset = 0;
 80a11f6:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a11f8:	8723      	strh	r3, [r4, #56]	; 0x38
            _nif = nif;
 80a11fa:	6466      	str	r6, [r4, #68]	; 0x44
}
 80a11fc:	4628      	mov	r0, r5
 80a11fe:	b002      	add	sp, #8
 80a1200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            stop();
 80a1204:	6823      	ldr	r3, [r4, #0]
 80a1206:	4620      	mov	r0, r4
 80a1208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a120a:	4798      	blx	r3
            bound = false;
 80a120c:	463d      	mov	r5, r7
 80a120e:	e7f5      	b.n	80a11fc <_ZN3UDP5beginEtm+0x44>

080a1210 <_ZN3UDP4stopEv>:
{
 80a1210:	b538      	push	{r3, r4, r5, lr}
 80a1212:	4604      	mov	r4, r0
    if (isOpen(_sock))
 80a1214:	6945      	ldr	r5, [r0, #20]
   return sd != socket_handle_invalid();
 80a1216:	f7ff fba1 	bl	80a095c <socket_handle_invalid>
    if (isOpen(_sock))
 80a121a:	4285      	cmp	r5, r0
 80a121c:	d002      	beq.n	80a1224 <_ZN3UDP4stopEv+0x14>
        socket_close(_sock);
 80a121e:	6960      	ldr	r0, [r4, #20]
 80a1220:	f7ff fb94 	bl	80a094c <socket_close>
    _sock = socket_handle_invalid();
 80a1224:	f7ff fb9a 	bl	80a095c <socket_handle_invalid>
  _offset = 0;
 80a1228:	2300      	movs	r3, #0
    _sock = socket_handle_invalid();
 80a122a:	6160      	str	r0, [r4, #20]
  _offset = 0;
 80a122c:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a122e:	8723      	strh	r3, [r4, #56]	; 0x38
}
 80a1230:	bd38      	pop	{r3, r4, r5, pc}

080a1232 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
{
 80a1232:	b510      	push	{r4, lr}
    remoteSockAddr.sa_family = AF_INET;
 80a1234:	2402      	movs	r4, #2
{
 80a1236:	b086      	sub	sp, #24
    remoteSockAddr.sa_family = AF_INET;
 80a1238:	f8ad 4008 	strh.w	r4, [sp, #8]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a123c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80a1240:	ba64      	rev16	r4, r4
 80a1242:	f8ad 400a 	strh.w	r4, [sp, #10]
    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1246:	79dc      	ldrb	r4, [r3, #7]
 80a1248:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a124c:	799c      	ldrb	r4, [r3, #6]
 80a124e:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1252:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1254:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1256:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a125a:	f88d 300f 	strb.w	r3, [sp, #15]
    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a125e:	2310      	movs	r3, #16
 80a1260:	9301      	str	r3, [sp, #4]
 80a1262:	ab02      	add	r3, sp, #8
 80a1264:	9300      	str	r3, [sp, #0]
 80a1266:	6940      	ldr	r0, [r0, #20]
 80a1268:	2300      	movs	r3, #0
 80a126a:	f7ff fb67 	bl	80a093c <socket_sendto>
}
 80a126e:	b006      	add	sp, #24
 80a1270:	bd10      	pop	{r4, pc}

080a1272 <_ZN3UDP5writeEPKhj>:
{
 80a1272:	b570      	push	{r4, r5, r6, lr}
 80a1274:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1276:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a1278:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80a127a:	b168      	cbz	r0, 80a1298 <_ZN3UDP5writeEPKhj+0x26>
 80a127c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80a127e:	1b9c      	subs	r4, r3, r6
    if (size>available)
 80a1280:	4294      	cmp	r4, r2
 80a1282:	bf28      	it	cs
 80a1284:	4614      	movcs	r4, r2
    memcpy(_buffer+_offset, buffer, size);
 80a1286:	4430      	add	r0, r6
 80a1288:	4622      	mov	r2, r4
 80a128a:	f001 f8e1 	bl	80a2450 <memcpy>
    _offset += size;
 80a128e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
}
 80a1290:	4620      	mov	r0, r4
    _offset += size;
 80a1292:	4423      	add	r3, r4
 80a1294:	86eb      	strh	r3, [r5, #54]	; 0x36
}
 80a1296:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1298:	4604      	mov	r4, r0
 80a129a:	e7f1      	b.n	80a1280 <_ZN3UDP5writeEPKhj+0xe>

080a129c <_ZN3UDP4readEPhj>:
{
 80a129c:	b570      	push	{r4, r5, r6, lr}
    if (available())
 80a129e:	6803      	ldr	r3, [r0, #0]
{
 80a12a0:	4604      	mov	r4, r0
    if (available())
 80a12a2:	691b      	ldr	r3, [r3, #16]
{
 80a12a4:	460e      	mov	r6, r1
 80a12a6:	4615      	mov	r5, r2
    if (available())
 80a12a8:	4798      	blx	r3
 80a12aa:	b190      	cbz	r0, 80a12d2 <_ZN3UDP4readEPhj+0x36>
    read = min(int(len), available());
 80a12ac:	6823      	ldr	r3, [r4, #0]
 80a12ae:	4620      	mov	r0, r4
 80a12b0:	691b      	ldr	r3, [r3, #16]
 80a12b2:	4798      	blx	r3
 80a12b4:	4285      	cmp	r5, r0
 80a12b6:	bfa8      	it	ge
 80a12b8:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a12ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a12bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a12be:	462a      	mov	r2, r5
 80a12c0:	4419      	add	r1, r3
 80a12c2:	4630      	mov	r0, r6
 80a12c4:	f001 f8c4 	bl	80a2450 <memcpy>
      _offset += read;
 80a12c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a12ca:	442b      	add	r3, r5
 80a12cc:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 80a12ce:	4628      	mov	r0, r5
 80a12d0:	bd70      	pop	{r4, r5, r6, pc}
    int read = -1;
 80a12d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return read;
 80a12d6:	e7fa      	b.n	80a12ce <_ZN3UDP4readEPhj+0x32>

080a12d8 <_ZN3UDP13receivePacketEPhjm>:
{
 80a12d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a12dc:	4604      	mov	r4, r0
 80a12de:	b08a      	sub	sp, #40	; 0x28
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a12e0:	6c40      	ldr	r0, [r0, #68]	; 0x44
{
 80a12e2:	461f      	mov	r7, r3
 80a12e4:	460d      	mov	r5, r1
 80a12e6:	4616      	mov	r6, r2
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a12e8:	f7ff fde4 	bl	80a0eb4 <_ZN5spark12NetworkClass4fromEm>
 80a12ec:	6803      	ldr	r3, [r0, #0]
 80a12ee:	68db      	ldr	r3, [r3, #12]
 80a12f0:	4798      	blx	r3
 80a12f2:	b928      	cbnz	r0, 80a1300 <_ZN3UDP13receivePacketEPhjm+0x28>
    int ret = -1;
 80a12f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
 80a12f8:	4628      	mov	r0, r5
 80a12fa:	b00a      	add	sp, #40	; 0x28
 80a12fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1300:	f8d4 8014 	ldr.w	r8, [r4, #20]
   return sd != socket_handle_invalid();
 80a1304:	f7ff fb2a 	bl	80a095c <socket_handle_invalid>
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1308:	4580      	cmp	r8, r0
 80a130a:	d0f3      	beq.n	80a12f4 <_ZN3UDP13receivePacketEPhjm+0x1c>
 80a130c:	2d00      	cmp	r5, #0
 80a130e:	d0f1      	beq.n	80a12f4 <_ZN3UDP13receivePacketEPhjm+0x1c>
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a1310:	2310      	movs	r3, #16
 80a1312:	9305      	str	r3, [sp, #20]
        ret = socket_receivefrom_ex(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen, timeout, nullptr);
 80a1314:	2300      	movs	r3, #0
 80a1316:	aa05      	add	r2, sp, #20
 80a1318:	9201      	str	r2, [sp, #4]
 80a131a:	aa06      	add	r2, sp, #24
 80a131c:	4629      	mov	r1, r5
 80a131e:	9200      	str	r2, [sp, #0]
 80a1320:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80a1324:	4632      	mov	r2, r6
 80a1326:	6960      	ldr	r0, [r4, #20]
 80a1328:	f7ff fb20 	bl	80a096c <socket_receivefrom_ex>
        if (ret >= 0)
 80a132c:	1e05      	subs	r5, r0, #0
 80a132e:	dbe3      	blt.n	80a12f8 <_ZN3UDP13receivePacketEPhjm+0x20>
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a1330:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80a1334:	f89d 301b 	ldrb.w	r3, [sp, #27]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a1338:	a907      	add	r1, sp, #28
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a133a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a133e:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a1340:	f104 001c 	add.w	r0, r4, #28
 80a1344:	f7ff fd40 	bl	80a0dc8 <_ZN9IPAddressaSEPKh>
    return ret;
 80a1348:	e7d6      	b.n	80a12f8 <_ZN3UDP13receivePacketEPhjm+0x20>
	...

080a134c <_ZN3UDP11beginPacketEPKct>:
{
 80a134c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1350:	4606      	mov	r6, r0
 80a1352:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a1354:	6c40      	ldr	r0, [r0, #68]	; 0x44
{
 80a1356:	460d      	mov	r5, r1
 80a1358:	4617      	mov	r7, r2
    if(Network.from(_nif).ready())
 80a135a:	f7ff fdab 	bl	80a0eb4 <_ZN5spark12NetworkClass4fromEm>
 80a135e:	6803      	ldr	r3, [r0, #0]
 80a1360:	68db      	ldr	r3, [r3, #12]
 80a1362:	4798      	blx	r3
 80a1364:	b1f0      	cbz	r0, 80a13a4 <_ZN3UDP11beginPacketEPKct+0x58>
        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a1366:	4628      	mov	r0, r5
 80a1368:	f001 f8b4 	bl	80a24d4 <strlen>
 80a136c:	2400      	movs	r4, #0
 80a136e:	b281      	uxth	r1, r0
 80a1370:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a1372:	4628      	mov	r0, r5
 80a1374:	9400      	str	r4, [sp, #0]
 80a1376:	aa03      	add	r2, sp, #12
 80a1378:	f7ff fb88 	bl	80a0a8c <inet_gethostbyname>
 80a137c:	b9a8      	cbnz	r0, 80a13aa <_ZN3UDP11beginPacketEPKct+0x5e>
            IPAddress remote_addr(ip_addr);
 80a137e:	a903      	add	r1, sp, #12
 80a1380:	a808      	add	r0, sp, #32
 80a1382:	f7ff fced 	bl	80a0d60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a1386:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a1388:	ac0f      	add	r4, sp, #60	; 0x3c
 80a138a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
 80a138e:	4b08      	ldr	r3, [pc, #32]	; (80a13b0 <_ZN3UDP11beginPacketEPKct+0x64>)
 80a1390:	ad09      	add	r5, sp, #36	; 0x24
 80a1392:	930e      	str	r3, [sp, #56]	; 0x38
 80a1394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1398:	682b      	ldr	r3, [r5, #0]
 80a139a:	463a      	mov	r2, r7
 80a139c:	4630      	mov	r0, r6
 80a139e:	7023      	strb	r3, [r4, #0]
 80a13a0:	a90e      	add	r1, sp, #56	; 0x38
 80a13a2:	47c0      	blx	r8
}
 80a13a4:	b014      	add	sp, #80	; 0x50
 80a13a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 0;
 80a13aa:	4620      	mov	r0, r4
 80a13ac:	e7fa      	b.n	80a13a4 <_ZN3UDP11beginPacketEPKct+0x58>
 80a13ae:	bf00      	nop
 80a13b0:	080a2684 	.word	0x080a2684

080a13b4 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
 80a13b4:	b570      	push	{r4, r5, r6, lr}
 80a13b6:	4604      	mov	r4, r0
 80a13b8:	4606      	mov	r6, r0
 80a13ba:	4b05      	ldr	r3, [pc, #20]	; (80a13d0 <_ZN3UDP8remoteIPEv+0x1c>)
 80a13bc:	f101 0520 	add.w	r5, r1, #32
 80a13c0:	f844 3b04 	str.w	r3, [r4], #4
 80a13c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a13c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a13c8:	682b      	ldr	r3, [r5, #0]
 80a13ca:	4630      	mov	r0, r6
 80a13cc:	7023      	strb	r3, [r4, #0]
 80a13ce:	bd70      	pop	{r4, r5, r6, pc}
 80a13d0:	080a2684 	.word	0x080a2684

080a13d4 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a13d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a13d6:	468c      	mov	ip, r1
 80a13d8:	4696      	mov	lr, r2
 80a13da:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a13dc:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a13de:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a13e0:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a13e2:	4a09      	ldr	r2, [pc, #36]	; (80a1408 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a13e4:	ad03      	add	r5, sp, #12
 80a13e6:	1d1c      	adds	r4, r3, #4
 80a13e8:	9202      	str	r2, [sp, #8]
 80a13ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a13ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a13ee:	6823      	ldr	r3, [r4, #0]
 80a13f0:	4672      	mov	r2, lr
 80a13f2:	702b      	strb	r3, [r5, #0]
 80a13f4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a13f8:	4661      	mov	r1, ip
 80a13fa:	9300      	str	r3, [sp, #0]
 80a13fc:	4630      	mov	r0, r6
 80a13fe:	ab02      	add	r3, sp, #8
 80a1400:	47b8      	blx	r7
    }
 80a1402:	b009      	add	sp, #36	; 0x24
 80a1404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1406:	bf00      	nop
 80a1408:	080a2684 	.word	0x080a2684

080a140c <_ZN3UDP9endPacketEv>:
{
 80a140c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a140e:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a1410:	6803      	ldr	r3, [r0, #0]
{
 80a1412:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a1414:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a1416:	4b0c      	ldr	r3, [pc, #48]	; (80a1448 <_ZN3UDP9endPacketEv+0x3c>)
 80a1418:	ad03      	add	r5, sp, #12
 80a141a:	f100 0620 	add.w	r6, r0, #32
 80a141e:	9302      	str	r3, [sp, #8]
 80a1420:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a1422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1424:	6833      	ldr	r3, [r6, #0]
 80a1426:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80a1428:	702b      	strb	r3, [r5, #0]
 80a142a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a142c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a142e:	9300      	str	r3, [sp, #0]
 80a1430:	4620      	mov	r0, r4
 80a1432:	ab02      	add	r3, sp, #8
 80a1434:	47b8      	blx	r7
 80a1436:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a1438:	6823      	ldr	r3, [r4, #0]
 80a143a:	4620      	mov	r0, r4
 80a143c:	69db      	ldr	r3, [r3, #28]
 80a143e:	4798      	blx	r3
}
 80a1440:	4628      	mov	r0, r5
 80a1442:	b009      	add	sp, #36	; 0x24
 80a1444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1446:	bf00      	nop
 80a1448:	080a2684 	.word	0x080a2684

080a144c <_ZN3UDPC1Ev>:
UDP::UDP() :
 80a144c:	b538      	push	{r3, r4, r5, lr}
 80a144e:	2500      	movs	r5, #0
 80a1450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1454:	e9c0 5301 	strd	r5, r3, [r0, #4]
        _buffer_allocated(false)
 80a1458:	4b0c      	ldr	r3, [pc, #48]	; (80a148c <_ZN3UDPC1Ev+0x40>)
UDP::UDP() :
 80a145a:	4604      	mov	r4, r0
        _buffer_allocated(false)
 80a145c:	f103 0208 	add.w	r2, r3, #8
 80a1460:	336c      	adds	r3, #108	; 0x6c
 80a1462:	6002      	str	r2, [r0, #0]
 80a1464:	6103      	str	r3, [r0, #16]
        _sock(socket_handle_invalid()),
 80a1466:	f7ff fa79 	bl	80a095c <socket_handle_invalid>
        _buffer_allocated(false)
 80a146a:	6160      	str	r0, [r4, #20]
 80a146c:	f104 001c 	add.w	r0, r4, #28
 80a1470:	f7ff fc68 	bl	80a0d44 <_ZN9IPAddressC1Ev>
 80a1474:	f44f 7300 	mov.w	r3, #512	; 0x200
}
 80a1478:	4620      	mov	r0, r4
        _buffer_allocated(false)
 80a147a:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
 80a147e:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a1480:	8725      	strh	r5, [r4, #56]	; 0x38
 80a1482:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a1484:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
 80a1488:	bd38      	pop	{r3, r4, r5, pc}
 80a148a:	bf00      	nop
 80a148c:	080a26ec 	.word	0x080a26ec

080a1490 <_ZN3UDP13releaseBufferEv>:
{
 80a1490:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a1492:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 80a1496:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a1498:	b123      	cbz	r3, 80a14a4 <_ZN3UDP13releaseBufferEv+0x14>
 80a149a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a149c:	b110      	cbz	r0, 80a14a4 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a149e:	2101      	movs	r1, #1
 80a14a0:	f000 fb86 	bl	80a1bb0 <_ZdlPvj>
    _buffer = NULL;
 80a14a4:	2300      	movs	r3, #0
 80a14a6:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a14a8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a14ac:	6423      	str	r3, [r4, #64]	; 0x40
  _offset = 0;
 80a14ae:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a14b0:	8723      	strh	r3, [r4, #56]	; 0x38
}
 80a14b2:	bd10      	pop	{r4, pc}

080a14b4 <_ZN3UDP9setBufferEjPh>:
{
 80a14b4:	b570      	push	{r4, r5, r6, lr}
 80a14b6:	4604      	mov	r4, r0
 80a14b8:	4616      	mov	r6, r2
 80a14ba:	460d      	mov	r5, r1
    releaseBuffer();
 80a14bc:	f7ff ffe8 	bl	80a1490 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
 80a14c0:	2300      	movs	r3, #0
    _buffer = buffer;
 80a14c2:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a14c4:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a14c6:	b12e      	cbz	r6, 80a14d4 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
 80a14c8:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
 80a14ca:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a14cc:	3800      	subs	r0, #0
 80a14ce:	bf18      	it	ne
 80a14d0:	2001      	movne	r0, #1
 80a14d2:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
 80a14d4:	2d00      	cmp	r5, #0
 80a14d6:	d0f8      	beq.n	80a14ca <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
 80a14d8:	4628      	mov	r0, r5
 80a14da:	f7fe fddc 	bl	80a0096 <_Znaj>
        _buffer_allocated = true;
 80a14de:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
 80a14e0:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a14e2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
 80a14e6:	2800      	cmp	r0, #0
 80a14e8:	d0ef      	beq.n	80a14ca <_ZN3UDP9setBufferEjPh+0x16>
 80a14ea:	e7ed      	b.n	80a14c8 <_ZN3UDP9setBufferEjPh+0x14>

080a14ec <_ZN3UDP11beginPacketE9IPAddresst>:
{
 80a14ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a14ee:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
 80a14f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 80a14f2:	4605      	mov	r5, r0
 80a14f4:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
 80a14f6:	b91a      	cbnz	r2, 80a1500 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a14f8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a14fa:	b109      	cbz	r1, 80a1500 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a14fc:	f7ff ffda 	bl	80a14b4 <_ZN3UDP9setBufferEjPh>
 80a1500:	f105 0620 	add.w	r6, r5, #32
 80a1504:	3404      	adds	r4, #4
 80a1506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1508:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a150a:	6823      	ldr	r3, [r4, #0]
 80a150c:	7033      	strb	r3, [r6, #0]
  _offset = 0;
 80a150e:	2300      	movs	r3, #0
}
 80a1510:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
 80a1512:	86af      	strh	r7, [r5, #52]	; 0x34
  _offset = 0;
 80a1514:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a1516:	872b      	strh	r3, [r5, #56]	; 0x38
}
 80a1518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a151a <_ZN3UDP11parsePacketEm>:
{
 80a151a:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a151c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 80a151e:	4604      	mov	r4, r0
 80a1520:	460d      	mov	r5, r1
    if (!_buffer && _buffer_size) {
 80a1522:	b91a      	cbnz	r2, 80a152c <_ZN3UDP11parsePacketEm+0x12>
 80a1524:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a1526:	b109      	cbz	r1, 80a152c <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
 80a1528:	f7ff ffc4 	bl	80a14b4 <_ZN3UDP9setBufferEjPh>
  _offset = 0;
 80a152c:	2300      	movs	r3, #0
    if (_buffer && _buffer_size) {
 80a152e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  _offset = 0;
 80a1530:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1532:	8723      	strh	r3, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
 80a1534:	b149      	cbz	r1, 80a154a <_ZN3UDP11parsePacketEm+0x30>
 80a1536:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a1538:	b13a      	cbz	r2, 80a154a <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
 80a153a:	6823      	ldr	r3, [r4, #0]
 80a153c:	4620      	mov	r0, r4
 80a153e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80a1540:	462b      	mov	r3, r5
 80a1542:	47b0      	blx	r6
        if (result>0) {
 80a1544:	2800      	cmp	r0, #0
            _total = result;
 80a1546:	bfc8      	it	gt
 80a1548:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
 80a154a:	6823      	ldr	r3, [r4, #0]
 80a154c:	4620      	mov	r0, r4
}
 80a154e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return available();
 80a1552:	691b      	ldr	r3, [r3, #16]
 80a1554:	4718      	bx	r3
	...

080a1558 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a1558:	b510      	push	{r4, lr}
 80a155a:	4604      	mov	r4, r0
 80a155c:	4b06      	ldr	r3, [pc, #24]	; (80a1578 <_ZN3UDPD1Ev+0x20>)
 80a155e:	f103 0208 	add.w	r2, r3, #8
 80a1562:	336c      	adds	r3, #108	; 0x6c
 80a1564:	6002      	str	r2, [r0, #0]
 80a1566:	6103      	str	r3, [r0, #16]
 80a1568:	f7ff fe52 	bl	80a1210 <_ZN3UDP4stopEv>
 80a156c:	4620      	mov	r0, r4
 80a156e:	f7ff ff8f 	bl	80a1490 <_ZN3UDP13releaseBufferEv>
 80a1572:	4620      	mov	r0, r4
 80a1574:	bd10      	pop	{r4, pc}
 80a1576:	bf00      	nop
 80a1578:	080a26ec 	.word	0x080a26ec

080a157c <_ZN3UDPD0Ev>:
 80a157c:	b510      	push	{r4, lr}
 80a157e:	4604      	mov	r4, r0
 80a1580:	f7ff ffea 	bl	80a1558 <_ZN3UDPD1Ev>
 80a1584:	4620      	mov	r0, r4
 80a1586:	214c      	movs	r1, #76	; 0x4c
 80a1588:	f000 fb12 	bl	80a1bb0 <_ZdlPvj>
 80a158c:	4620      	mov	r0, r4
 80a158e:	bd10      	pop	{r4, pc}

080a1590 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1590:	4770      	bx	lr

080a1592 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1592:	7441      	strb	r1, [r0, #17]
}
 80a1594:	4770      	bx	lr

080a1596 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1596:	4770      	bx	lr

080a1598 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a1598:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a159a:	7c00      	ldrb	r0, [r0, #16]
 80a159c:	f7ff fa36 	bl	80a0a0c <hal_usart_available_data_for_write>
}
 80a15a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a15a4:	bd08      	pop	{r3, pc}

080a15a6 <_ZN11USARTSerial9availableEv>:
{
 80a15a6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a15a8:	7c00      	ldrb	r0, [r0, #16]
 80a15aa:	f7ff fa07 	bl	80a09bc <hal_usart_available>
}
 80a15ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a15b2:	bd08      	pop	{r3, pc}

080a15b4 <_ZN11USARTSerial4peekEv>:
{
 80a15b4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a15b6:	7c00      	ldrb	r0, [r0, #16]
 80a15b8:	f7ff fa10 	bl	80a09dc <hal_usart_peek>
}
 80a15bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a15c0:	bd08      	pop	{r3, pc}

080a15c2 <_ZN11USARTSerial4readEv>:
{
 80a15c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a15c4:	7c00      	ldrb	r0, [r0, #16]
 80a15c6:	f7ff fa01 	bl	80a09cc <hal_usart_read>
}
 80a15ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a15ce:	bd08      	pop	{r3, pc}

080a15d0 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a15d0:	7c00      	ldrb	r0, [r0, #16]
 80a15d2:	f7ff ba0b 	b.w	80a09ec <hal_usart_flush>

080a15d6 <_ZN11USARTSerial5writeEh>:
{
 80a15d6:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a15d8:	7c46      	ldrb	r6, [r0, #17]
{
 80a15da:	4604      	mov	r4, r0
 80a15dc:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a15de:	b12e      	cbz	r6, 80a15ec <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a15e0:	4629      	mov	r1, r5
 80a15e2:	7c20      	ldrb	r0, [r4, #16]
}
 80a15e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a15e8:	f7ff b9e0 	b.w	80a09ac <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a15ec:	7c00      	ldrb	r0, [r0, #16]
 80a15ee:	f7ff fa0d 	bl	80a0a0c <hal_usart_available_data_for_write>
 80a15f2:	2800      	cmp	r0, #0
 80a15f4:	dcf4      	bgt.n	80a15e0 <_ZN11USARTSerial5writeEh+0xa>
}
 80a15f6:	4630      	mov	r0, r6
 80a15f8:	bd70      	pop	{r4, r5, r6, pc}

080a15fa <_ZN11USARTSerialD0Ev>:
 80a15fa:	b510      	push	{r4, lr}
 80a15fc:	4604      	mov	r4, r0
 80a15fe:	2114      	movs	r1, #20
 80a1600:	f000 fad6 	bl	80a1bb0 <_ZdlPvj>
 80a1604:	4620      	mov	r0, r4
 80a1606:	bd10      	pop	{r4, pc}

080a1608 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1608:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a160c:	b510      	push	{r4, lr}
 80a160e:	4604      	mov	r4, r0
 80a1610:	4608      	mov	r0, r1
 80a1612:	4611      	mov	r1, r2
 80a1614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1618:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a161c:	4a04      	ldr	r2, [pc, #16]	; (80a1630 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a161e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1620:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1622:	2201      	movs	r2, #1
 80a1624:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1626:	461a      	mov	r2, r3
 80a1628:	f7ff f9b8 	bl	80a099c <hal_usart_init>
}
 80a162c:	4620      	mov	r0, r4
 80a162e:	bd10      	pop	{r4, pc}
 80a1630:	080a2764 	.word	0x080a2764

080a1634 <_Z22__fetch_global_Serial1v>:
{
 80a1634:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1636:	4d0c      	ldr	r5, [pc, #48]	; (80a1668 <_Z22__fetch_global_Serial1v+0x34>)
 80a1638:	7829      	ldrb	r1, [r5, #0]
 80a163a:	f3bf 8f5b 	dmb	ish
 80a163e:	f011 0401 	ands.w	r4, r1, #1
 80a1642:	d10f      	bne.n	80a1664 <_Z22__fetch_global_Serial1v+0x30>
 80a1644:	4628      	mov	r0, r5
 80a1646:	f7fe fd2a 	bl	80a009e <__cxa_guard_acquire>
 80a164a:	b158      	cbz	r0, 80a1664 <_Z22__fetch_global_Serial1v+0x30>
 80a164c:	4621      	mov	r1, r4
 80a164e:	4b07      	ldr	r3, [pc, #28]	; (80a166c <_Z22__fetch_global_Serial1v+0x38>)
 80a1650:	4a07      	ldr	r2, [pc, #28]	; (80a1670 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1652:	4808      	ldr	r0, [pc, #32]	; (80a1674 <_Z22__fetch_global_Serial1v+0x40>)
 80a1654:	f7ff ffd8 	bl	80a1608 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1658:	4628      	mov	r0, r5
 80a165a:	f7fe fd25 	bl	80a00a8 <__cxa_guard_release>
 80a165e:	4806      	ldr	r0, [pc, #24]	; (80a1678 <_Z22__fetch_global_Serial1v+0x44>)
 80a1660:	f000 fef0 	bl	80a2444 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1664:	4803      	ldr	r0, [pc, #12]	; (80a1674 <_Z22__fetch_global_Serial1v+0x40>)
 80a1666:	bd38      	pop	{r3, r4, r5, pc}
 80a1668:	20000140 	.word	0x20000140
 80a166c:	200001c8 	.word	0x200001c8
 80a1670:	20000144 	.word	0x20000144
 80a1674:	2000024c 	.word	0x2000024c
 80a1678:	080a1597 	.word	0x080a1597

080a167c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a167c:	7441      	strb	r1, [r0, #17]
}
 80a167e:	4770      	bx	lr

080a1680 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1680:	4770      	bx	lr

080a1682 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1682:	4770      	bx	lr

080a1684 <_ZN9USBSerial4readEv>:
{
 80a1684:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1686:	2100      	movs	r1, #0
 80a1688:	7c00      	ldrb	r0, [r0, #16]
 80a168a:	f7ff f9e7 	bl	80a0a5c <HAL_USB_USART_Receive_Data>
}
 80a168e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1692:	bd08      	pop	{r3, pc}

080a1694 <_ZN9USBSerial4peekEv>:
{
 80a1694:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1696:	2101      	movs	r1, #1
 80a1698:	7c00      	ldrb	r0, [r0, #16]
 80a169a:	f7ff f9df 	bl	80a0a5c <HAL_USB_USART_Receive_Data>
}
 80a169e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a16a2:	bd08      	pop	{r3, pc}

080a16a4 <_ZN9USBSerial17availableForWriteEv>:
{
 80a16a4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a16a6:	7c00      	ldrb	r0, [r0, #16]
 80a16a8:	f7ff f9d0 	bl	80a0a4c <HAL_USB_USART_Available_Data_For_Write>
}
 80a16ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a16b0:	bd08      	pop	{r3, pc}

080a16b2 <_ZN9USBSerial9availableEv>:
{
 80a16b2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a16b4:	7c00      	ldrb	r0, [r0, #16]
 80a16b6:	f7ff f9c1 	bl	80a0a3c <HAL_USB_USART_Available_Data>
}
 80a16ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a16be:	bd08      	pop	{r3, pc}

080a16c0 <_ZN9USBSerial5writeEh>:
{
 80a16c0:	b538      	push	{r3, r4, r5, lr}
 80a16c2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a16c4:	7c00      	ldrb	r0, [r0, #16]
{
 80a16c6:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a16c8:	f7ff f9c0 	bl	80a0a4c <HAL_USB_USART_Available_Data_For_Write>
 80a16cc:	2800      	cmp	r0, #0
 80a16ce:	dc01      	bgt.n	80a16d4 <_ZN9USBSerial5writeEh+0x14>
 80a16d0:	7c60      	ldrb	r0, [r4, #17]
 80a16d2:	b128      	cbz	r0, 80a16e0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a16d4:	4629      	mov	r1, r5
 80a16d6:	7c20      	ldrb	r0, [r4, #16]
 80a16d8:	f7ff f9c8 	bl	80a0a6c <HAL_USB_USART_Send_Data>
 80a16dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a16e0:	bd38      	pop	{r3, r4, r5, pc}

080a16e2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a16e2:	7c00      	ldrb	r0, [r0, #16]
 80a16e4:	f7ff b9ca 	b.w	80a0a7c <HAL_USB_USART_Flush_Data>

080a16e8 <_ZN9USBSerialD0Ev>:
 80a16e8:	b510      	push	{r4, lr}
 80a16ea:	4604      	mov	r4, r0
 80a16ec:	2114      	movs	r1, #20
 80a16ee:	f000 fa5f 	bl	80a1bb0 <_ZdlPvj>
 80a16f2:	4620      	mov	r0, r4
 80a16f4:	bd10      	pop	{r4, pc}

080a16f6 <__tcf_1>:
 80a16f6:	4770      	bx	lr

080a16f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a16f8:	b510      	push	{r4, lr}
 80a16fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a16fe:	4604      	mov	r4, r0
 80a1700:	4608      	mov	r0, r1
 80a1702:	2100      	movs	r1, #0
 80a1704:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1708:	4b04      	ldr	r3, [pc, #16]	; (80a171c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a170a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a170c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a170e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1710:	4611      	mov	r1, r2
  _blocking = true;
 80a1712:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1714:	f7ff f982 	bl	80a0a1c <HAL_USB_USART_Init>
}
 80a1718:	4620      	mov	r0, r4
 80a171a:	bd10      	pop	{r4, pc}
 80a171c:	080a2794 	.word	0x080a2794

080a1720 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1720:	2200      	movs	r2, #0
 80a1722:	7c00      	ldrb	r0, [r0, #16]
 80a1724:	f7ff b982 	b.w	80a0a2c <HAL_USB_USART_Begin>

080a1728 <_Z19acquireSerialBufferv>:
{
 80a1728:	b510      	push	{r4, lr}
 80a172a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a172c:	2214      	movs	r2, #20
 80a172e:	2100      	movs	r1, #0
 80a1730:	f000 fe9c 	bl	80a246c <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a1734:	4b05      	ldr	r3, [pc, #20]	; (80a174c <_Z19acquireSerialBufferv+0x24>)
}
 80a1736:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1738:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a173a:	4b05      	ldr	r3, [pc, #20]	; (80a1750 <_Z19acquireSerialBufferv+0x28>)
 80a173c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a173e:	f240 1301 	movw	r3, #257	; 0x101
 80a1742:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1744:	2381      	movs	r3, #129	; 0x81
 80a1746:	8223      	strh	r3, [r4, #16]
}
 80a1748:	bd10      	pop	{r4, pc}
 80a174a:	bf00      	nop
 80a174c:	20000290 	.word	0x20000290
 80a1750:	20000391 	.word	0x20000391

080a1754 <_Z16_fetch_usbserialv>:
{
 80a1754:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1756:	4d0e      	ldr	r5, [pc, #56]	; (80a1790 <_Z16_fetch_usbserialv+0x3c>)
{
 80a1758:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a175a:	a801      	add	r0, sp, #4
 80a175c:	f7ff ffe4 	bl	80a1728 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1760:	7829      	ldrb	r1, [r5, #0]
 80a1762:	f3bf 8f5b 	dmb	ish
 80a1766:	f011 0401 	ands.w	r4, r1, #1
 80a176a:	d10e      	bne.n	80a178a <_Z16_fetch_usbserialv+0x36>
 80a176c:	4628      	mov	r0, r5
 80a176e:	f7fe fc96 	bl	80a009e <__cxa_guard_acquire>
 80a1772:	b150      	cbz	r0, 80a178a <_Z16_fetch_usbserialv+0x36>
 80a1774:	4621      	mov	r1, r4
 80a1776:	aa01      	add	r2, sp, #4
 80a1778:	4806      	ldr	r0, [pc, #24]	; (80a1794 <_Z16_fetch_usbserialv+0x40>)
 80a177a:	f7ff ffbd 	bl	80a16f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a177e:	4628      	mov	r0, r5
 80a1780:	f7fe fc92 	bl	80a00a8 <__cxa_guard_release>
 80a1784:	4804      	ldr	r0, [pc, #16]	; (80a1798 <_Z16_fetch_usbserialv+0x44>)
 80a1786:	f000 fe5d 	bl	80a2444 <atexit>
	return _usbserial;
}
 80a178a:	4802      	ldr	r0, [pc, #8]	; (80a1794 <_Z16_fetch_usbserialv+0x40>)
 80a178c:	b007      	add	sp, #28
 80a178e:	bd30      	pop	{r4, r5, pc}
 80a1790:	20000260 	.word	0x20000260
 80a1794:	20000268 	.word	0x20000268
 80a1798:	080a1681 	.word	0x080a1681

080a179c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a179c:	b510      	push	{r4, lr}
 80a179e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a17a0:	2214      	movs	r2, #20
 80a17a2:	2100      	movs	r1, #0
 80a17a4:	f000 fe62 	bl	80a246c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a17a8:	4b05      	ldr	r3, [pc, #20]	; (80a17c0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a17aa:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a17ac:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a17ae:	4b05      	ldr	r3, [pc, #20]	; (80a17c4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a17b0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a17b2:	f240 1301 	movw	r3, #257	; 0x101
 80a17b6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a17b8:	2381      	movs	r3, #129	; 0x81
 80a17ba:	8223      	strh	r3, [r4, #16]
}
 80a17bc:	bd10      	pop	{r4, pc}
 80a17be:	bf00      	nop
 80a17c0:	20000412 	.word	0x20000412
 80a17c4:	20000513 	.word	0x20000513

080a17c8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a17c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a17ca:	4c0e      	ldr	r4, [pc, #56]	; (80a1804 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a17cc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a17ce:	a801      	add	r0, sp, #4
 80a17d0:	f7ff ffe4 	bl	80a179c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a17d4:	7823      	ldrb	r3, [r4, #0]
 80a17d6:	f3bf 8f5b 	dmb	ish
 80a17da:	07db      	lsls	r3, r3, #31
 80a17dc:	d40e      	bmi.n	80a17fc <_Z17_fetch_usbserial1v+0x34>
 80a17de:	4620      	mov	r0, r4
 80a17e0:	f7fe fc5d 	bl	80a009e <__cxa_guard_acquire>
 80a17e4:	b150      	cbz	r0, 80a17fc <_Z17_fetch_usbserial1v+0x34>
 80a17e6:	2101      	movs	r1, #1
 80a17e8:	aa01      	add	r2, sp, #4
 80a17ea:	4807      	ldr	r0, [pc, #28]	; (80a1808 <_Z17_fetch_usbserial1v+0x40>)
 80a17ec:	f7ff ff84 	bl	80a16f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a17f0:	4620      	mov	r0, r4
 80a17f2:	f7fe fc59 	bl	80a00a8 <__cxa_guard_release>
 80a17f6:	4805      	ldr	r0, [pc, #20]	; (80a180c <_Z17_fetch_usbserial1v+0x44>)
 80a17f8:	f000 fe24 	bl	80a2444 <atexit>
  return _usbserial1;
}
 80a17fc:	4802      	ldr	r0, [pc, #8]	; (80a1808 <_Z17_fetch_usbserial1v+0x40>)
 80a17fe:	b006      	add	sp, #24
 80a1800:	bd10      	pop	{r4, pc}
 80a1802:	bf00      	nop
 80a1804:	20000264 	.word	0x20000264
 80a1808:	2000027c 	.word	0x2000027c
 80a180c:	080a16f7 	.word	0x080a16f7

080a1810 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a1810:	2200      	movs	r2, #0
 80a1812:	6840      	ldr	r0, [r0, #4]
 80a1814:	4611      	mov	r1, r2
 80a1816:	f7ff b98d 	b.w	80a0b34 <network_ready>

080a181a <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a181a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a181c:	4615      	mov	r5, r2
 80a181e:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a1820:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a1822:	460e      	mov	r6, r1
 80a1824:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a1826:	2100      	movs	r1, #0
 80a1828:	a803      	add	r0, sp, #12
 80a182a:	f000 fe1f 	bl	80a246c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a182e:	4628      	mov	r0, r5
 80a1830:	f000 fe50 	bl	80a24d4 <strlen>
 80a1834:	2700      	movs	r7, #0
 80a1836:	b281      	uxth	r1, r0
 80a1838:	6873      	ldr	r3, [r6, #4]
 80a183a:	4628      	mov	r0, r5
 80a183c:	9700      	str	r7, [sp, #0]
 80a183e:	aa03      	add	r2, sp, #12
 80a1840:	f7ff f924 	bl	80a0a8c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1844:	b130      	cbz	r0, 80a1854 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a1846:	4639      	mov	r1, r7
 80a1848:	4620      	mov	r0, r4
 80a184a:	f7ff fa9b 	bl	80a0d84 <_ZN9IPAddressC1Em>
    }
 80a184e:	4620      	mov	r0, r4
 80a1850:	b009      	add	sp, #36	; 0x24
 80a1852:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1854:	4620      	mov	r0, r4
 80a1856:	a903      	add	r1, sp, #12
 80a1858:	f7ff fa82 	bl	80a0d60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a185c:	e7f7      	b.n	80a184e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a185e <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a185e:	2200      	movs	r2, #0
 80a1860:	6840      	ldr	r0, [r0, #4]
 80a1862:	4611      	mov	r1, r2
 80a1864:	f7ff b986 	b.w	80a0b74 <network_listening>

080a1868 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1868:	2200      	movs	r2, #0
 80a186a:	6840      	ldr	r0, [r0, #4]
 80a186c:	4611      	mov	r1, r2
 80a186e:	f7ff b991 	b.w	80a0b94 <network_get_listen_timeout>

080a1872 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1872:	2200      	movs	r2, #0
 80a1874:	6840      	ldr	r0, [r0, #4]
 80a1876:	f7ff b985 	b.w	80a0b84 <network_set_listen_timeout>

080a187a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a187a:	2200      	movs	r2, #0
 80a187c:	6840      	ldr	r0, [r0, #4]
 80a187e:	f081 0101 	eor.w	r1, r1, #1
 80a1882:	f7ff b96f 	b.w	80a0b64 <network_listen>

080a1886 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a1886:	2300      	movs	r3, #0
 80a1888:	6840      	ldr	r0, [r0, #4]
 80a188a:	461a      	mov	r2, r3
 80a188c:	4619      	mov	r1, r3
 80a188e:	f7ff b961 	b.w	80a0b54 <network_off>

080a1892 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a1892:	2300      	movs	r3, #0
 80a1894:	6840      	ldr	r0, [r0, #4]
 80a1896:	461a      	mov	r2, r3
 80a1898:	4619      	mov	r1, r3
 80a189a:	f7ff b953 	b.w	80a0b44 <network_on>

080a189e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a189e:	2200      	movs	r2, #0
 80a18a0:	6840      	ldr	r0, [r0, #4]
 80a18a2:	4611      	mov	r1, r2
 80a18a4:	f7ff b936 	b.w	80a0b14 <network_connecting>

080a18a8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a18a8:	2200      	movs	r2, #0
 80a18aa:	2102      	movs	r1, #2
 80a18ac:	6840      	ldr	r0, [r0, #4]
 80a18ae:	f7ff b939 	b.w	80a0b24 <network_disconnect>

080a18b2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a18b2:	2300      	movs	r3, #0
 80a18b4:	6840      	ldr	r0, [r0, #4]
 80a18b6:	461a      	mov	r2, r3
 80a18b8:	f7ff b924 	b.w	80a0b04 <network_connect>

080a18bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a18bc:	2204      	movs	r2, #4
 80a18be:	4b02      	ldr	r3, [pc, #8]	; (80a18c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a18c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a18c2:	4a02      	ldr	r2, [pc, #8]	; (80a18cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a18c4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a18c6:	4770      	bx	lr
 80a18c8:	20000594 	.word	0x20000594
 80a18cc:	080a27c4 	.word	0x080a27c4

080a18d0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a18d0:	4b01      	ldr	r3, [pc, #4]	; (80a18d8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a18d2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a18d4:	4770      	bx	lr
 80a18d6:	bf00      	nop
 80a18d8:	2000000c 	.word	0x2000000c

080a18dc <serialEventRun>:
{
 80a18dc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a18de:	4b13      	ldr	r3, [pc, #76]	; (80a192c <serialEventRun+0x50>)
 80a18e0:	b143      	cbz	r3, 80a18f4 <serialEventRun+0x18>
 80a18e2:	f7ff ff37 	bl	80a1754 <_Z16_fetch_usbserialv>
 80a18e6:	6803      	ldr	r3, [r0, #0]
 80a18e8:	691b      	ldr	r3, [r3, #16]
 80a18ea:	4798      	blx	r3
 80a18ec:	2800      	cmp	r0, #0
 80a18ee:	dd01      	ble.n	80a18f4 <serialEventRun+0x18>
        serialEvent();
 80a18f0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a18f4:	4b0e      	ldr	r3, [pc, #56]	; (80a1930 <serialEventRun+0x54>)
 80a18f6:	b143      	cbz	r3, 80a190a <serialEventRun+0x2e>
 80a18f8:	f7ff fe9c 	bl	80a1634 <_Z22__fetch_global_Serial1v>
 80a18fc:	6803      	ldr	r3, [r0, #0]
 80a18fe:	691b      	ldr	r3, [r3, #16]
 80a1900:	4798      	blx	r3
 80a1902:	2800      	cmp	r0, #0
 80a1904:	dd01      	ble.n	80a190a <serialEventRun+0x2e>
        serialEvent1();
 80a1906:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a190a:	4b0a      	ldr	r3, [pc, #40]	; (80a1934 <serialEventRun+0x58>)
 80a190c:	b10b      	cbz	r3, 80a1912 <serialEventRun+0x36>
 80a190e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1912:	4b09      	ldr	r3, [pc, #36]	; (80a1938 <serialEventRun+0x5c>)
 80a1914:	b143      	cbz	r3, 80a1928 <serialEventRun+0x4c>
 80a1916:	f7ff ff57 	bl	80a17c8 <_Z17_fetch_usbserial1v>
 80a191a:	6803      	ldr	r3, [r0, #0]
 80a191c:	691b      	ldr	r3, [r3, #16]
 80a191e:	4798      	blx	r3
 80a1920:	2800      	cmp	r0, #0
 80a1922:	dd01      	ble.n	80a1928 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1924:	f3af 8000 	nop.w
}
 80a1928:	bd08      	pop	{r3, pc}
 80a192a:	bf00      	nop
	...

080a193c <_post_loop>:
{
 80a193c:	b508      	push	{r3, lr}
	serialEventRun();
 80a193e:	f7ff ffcd 	bl	80a18dc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1942:	f7fe ff6f 	bl	80a0824 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1946:	4b01      	ldr	r3, [pc, #4]	; (80a194c <_post_loop+0x10>)
 80a1948:	6018      	str	r0, [r3, #0]
}
 80a194a:	bd08      	pop	{r3, pc}
 80a194c:	200005b4 	.word	0x200005b4

080a1950 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1950:	4805      	ldr	r0, [pc, #20]	; (80a1968 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a1952:	4a06      	ldr	r2, [pc, #24]	; (80a196c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a1954:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1956:	1a12      	subs	r2, r2, r0
 80a1958:	4905      	ldr	r1, [pc, #20]	; (80a1970 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a195a:	f000 fd79 	bl	80a2450 <memcpy>
    __backup_sram_signature = signature;
 80a195e:	4b05      	ldr	r3, [pc, #20]	; (80a1974 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a1960:	4a05      	ldr	r2, [pc, #20]	; (80a1978 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a1962:	601a      	str	r2, [r3, #0]
}
 80a1964:	bd08      	pop	{r3, pc}
 80a1966:	bf00      	nop
 80a1968:	40024000 	.word	0x40024000
 80a196c:	40024004 	.word	0x40024004
 80a1970:	080a2820 	.word	0x080a2820
 80a1974:	40024000 	.word	0x40024000
 80a1978:	9a271c1e 	.word	0x9a271c1e

080a197c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a197c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a197e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1980:	461a      	mov	r2, r3
 80a1982:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1986:	9300      	str	r3, [sp, #0]
 80a1988:	f7ff f8aa 	bl	80a0ae0 <system_ctrl_set_result>
}
 80a198c:	b003      	add	sp, #12
 80a198e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1994 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1994:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1996:	8843      	ldrh	r3, [r0, #2]
 80a1998:	2b0a      	cmp	r3, #10
 80a199a:	d008      	beq.n	80a19ae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a199c:	2b50      	cmp	r3, #80	; 0x50
 80a199e:	d10b      	bne.n	80a19b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a19a0:	4b09      	ldr	r3, [pc, #36]	; (80a19c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a19a2:	681b      	ldr	r3, [r3, #0]
 80a19a4:	b14b      	cbz	r3, 80a19ba <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a19a6:	b003      	add	sp, #12
 80a19a8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a19ac:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a19ae:	f7ff ffe5 	bl	80a197c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a19b2:	b003      	add	sp, #12
 80a19b4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a19b8:	2300      	movs	r3, #0
 80a19ba:	461a      	mov	r2, r3
 80a19bc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a19c0:	9300      	str	r3, [sp, #0]
 80a19c2:	f7ff f88d 	bl	80a0ae0 <system_ctrl_set_result>
}
 80a19c6:	e7f4      	b.n	80a19b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a19c8:	200005a0 	.word	0x200005a0

080a19cc <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a19cc:	2100      	movs	r1, #0
{
 80a19ce:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a19d0:	4811      	ldr	r0, [pc, #68]	; (80a1a18 <module_user_init_hook+0x4c>)
 80a19d2:	f7ff f90f 	bl	80a0bf4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a19d6:	4b11      	ldr	r3, [pc, #68]	; (80a1a1c <module_user_init_hook+0x50>)
 80a19d8:	681a      	ldr	r2, [r3, #0]
 80a19da:	4b11      	ldr	r3, [pc, #68]	; (80a1a20 <module_user_init_hook+0x54>)
 80a19dc:	429a      	cmp	r2, r3
 80a19de:	bf0c      	ite	eq
 80a19e0:	2201      	moveq	r2, #1
 80a19e2:	2200      	movne	r2, #0
 80a19e4:	4b0f      	ldr	r3, [pc, #60]	; (80a1a24 <module_user_init_hook+0x58>)
 80a19e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a19e8:	d001      	beq.n	80a19ee <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a19ea:	f7ff ffb1 	bl	80a1950 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a19ee:	f7fe ff11 	bl	80a0814 <HAL_RNG_GetRandomNumber>
 80a19f2:	4604      	mov	r4, r0
    srand(seed);
 80a19f4:	f000 fd42 	bl	80a247c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a19f8:	4b0b      	ldr	r3, [pc, #44]	; (80a1a28 <module_user_init_hook+0x5c>)
 80a19fa:	b113      	cbz	r3, 80a1a02 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a19fc:	4620      	mov	r0, r4
 80a19fe:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1a02:	2100      	movs	r1, #0
 80a1a04:	4808      	ldr	r0, [pc, #32]	; (80a1a28 <module_user_init_hook+0x5c>)
 80a1a06:	f7ff f875 	bl	80a0af4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1a0e:	2100      	movs	r1, #0
 80a1a10:	4806      	ldr	r0, [pc, #24]	; (80a1a2c <module_user_init_hook+0x60>)
 80a1a12:	f7ff b85b 	b.w	80a0acc <system_ctrl_set_app_request_handler>
 80a1a16:	bf00      	nop
 80a1a18:	080a18d1 	.word	0x080a18d1
 80a1a1c:	40024000 	.word	0x40024000
 80a1a20:	9a271c1e 	.word	0x9a271c1e
 80a1a24:	2000059c 	.word	0x2000059c
 80a1a28:	00000000 	.word	0x00000000
 80a1a2c:	080a1995 	.word	0x080a1995

080a1a30 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1a30:	4b02      	ldr	r3, [pc, #8]	; (80a1a3c <__tcf_0+0xc>)
 80a1a32:	6898      	ldr	r0, [r3, #8]
 80a1a34:	b108      	cbz	r0, 80a1a3a <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a1a36:	f7fe bee5 	b.w	80a0804 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a1a3a:	4770      	bx	lr
 80a1a3c:	200005a8 	.word	0x200005a8

080a1a40 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a1a40:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a1a42:	b570      	push	{r4, r5, r6, lr}
 80a1a44:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a1a46:	d901      	bls.n	80a1a4c <pinAvailable+0xc>
    return false;
 80a1a48:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a1a4a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1a4c:	f1a0 030d 	sub.w	r3, r0, #13
 80a1a50:	2b02      	cmp	r3, #2
 80a1a52:	d90b      	bls.n	80a1a6c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a1a54:	2801      	cmp	r0, #1
 80a1a56:	d824      	bhi.n	80a1aa2 <pinAvailable+0x62>
 80a1a58:	f000 f878 	bl	80a1b4c <_Z19__fetch_global_Wirev>
 80a1a5c:	2100      	movs	r1, #0
 80a1a5e:	7c00      	ldrb	r0, [r0, #16]
 80a1a60:	f7fe ff40 	bl	80a08e4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1a64:	f080 0001 	eor.w	r0, r0, #1
 80a1a68:	b2c0      	uxtb	r0, r0
 80a1a6a:	e7ee      	b.n	80a1a4a <pinAvailable+0xa>
 80a1a6c:	4e12      	ldr	r6, [pc, #72]	; (80a1ab8 <pinAvailable+0x78>)
 80a1a6e:	7831      	ldrb	r1, [r6, #0]
 80a1a70:	f3bf 8f5b 	dmb	ish
 80a1a74:	f011 0501 	ands.w	r5, r1, #1
 80a1a78:	d10d      	bne.n	80a1a96 <pinAvailable+0x56>
 80a1a7a:	4630      	mov	r0, r6
 80a1a7c:	f7fe fb0f 	bl	80a009e <__cxa_guard_acquire>
 80a1a80:	b148      	cbz	r0, 80a1a96 <pinAvailable+0x56>
 80a1a82:	4629      	mov	r1, r5
 80a1a84:	480d      	ldr	r0, [pc, #52]	; (80a1abc <pinAvailable+0x7c>)
 80a1a86:	f7ff fa91 	bl	80a0fac <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1a8a:	4630      	mov	r0, r6
 80a1a8c:	f7fe fb0c 	bl	80a00a8 <__cxa_guard_release>
 80a1a90:	480b      	ldr	r0, [pc, #44]	; (80a1ac0 <pinAvailable+0x80>)
 80a1a92:	f000 fcd7 	bl	80a2444 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1a96:	4b09      	ldr	r3, [pc, #36]	; (80a1abc <pinAvailable+0x7c>)
 80a1a98:	7818      	ldrb	r0, [r3, #0]
 80a1a9a:	f7fe ff77 	bl	80a098c <hal_spi_is_enabled>
 80a1a9e:	2800      	cmp	r0, #0
 80a1aa0:	d1d2      	bne.n	80a1a48 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1aa2:	3c12      	subs	r4, #18
 80a1aa4:	2c01      	cmp	r4, #1
 80a1aa6:	d805      	bhi.n	80a1ab4 <pinAvailable+0x74>
 80a1aa8:	f7ff fdc4 	bl	80a1634 <_Z22__fetch_global_Serial1v>
 80a1aac:	7c00      	ldrb	r0, [r0, #16]
 80a1aae:	f7fe ffa5 	bl	80a09fc <hal_usart_is_enabled>
 80a1ab2:	e7d7      	b.n	80a1a64 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a1ab4:	2001      	movs	r0, #1
 80a1ab6:	e7c8      	b.n	80a1a4a <pinAvailable+0xa>
 80a1ab8:	200005a4 	.word	0x200005a4
 80a1abc:	200005a8 	.word	0x200005a8
 80a1ac0:	080a1a31 	.word	0x080a1a31

080a1ac4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1ac4:	2817      	cmp	r0, #23
{
 80a1ac6:	b538      	push	{r3, r4, r5, lr}
 80a1ac8:	4604      	mov	r4, r0
 80a1aca:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1acc:	d80a      	bhi.n	80a1ae4 <pinMode+0x20>
 80a1ace:	29ff      	cmp	r1, #255	; 0xff
 80a1ad0:	d008      	beq.n	80a1ae4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a1ad2:	f7ff ffb5 	bl	80a1a40 <pinAvailable>
 80a1ad6:	b128      	cbz	r0, 80a1ae4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a1ad8:	4629      	mov	r1, r5
 80a1ada:	4620      	mov	r0, r4
}
 80a1adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a1ae0:	f7fe bea8 	b.w	80a0834 <HAL_Pin_Mode>
}
 80a1ae4:	bd38      	pop	{r3, r4, r5, pc}

080a1ae6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1ae6:	b538      	push	{r3, r4, r5, lr}
 80a1ae8:	4604      	mov	r4, r0
 80a1aea:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1aec:	f7fe feaa 	bl	80a0844 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1af0:	28ff      	cmp	r0, #255	; 0xff
 80a1af2:	d010      	beq.n	80a1b16 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a1af4:	2806      	cmp	r0, #6
 80a1af6:	d804      	bhi.n	80a1b02 <digitalWrite+0x1c>
 80a1af8:	234d      	movs	r3, #77	; 0x4d
 80a1afa:	fa23 f000 	lsr.w	r0, r3, r0
 80a1afe:	07c3      	lsls	r3, r0, #31
 80a1b00:	d409      	bmi.n	80a1b16 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1b02:	4620      	mov	r0, r4
 80a1b04:	f7ff ff9c 	bl	80a1a40 <pinAvailable>
 80a1b08:	b128      	cbz	r0, 80a1b16 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1b0a:	4629      	mov	r1, r5
 80a1b0c:	4620      	mov	r0, r4
}
 80a1b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a1b12:	f7fe be9f 	b.w	80a0854 <HAL_GPIO_Write>
}
 80a1b16:	bd38      	pop	{r3, r4, r5, pc}

080a1b18 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1b18:	4770      	bx	lr
	...

080a1b1c <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a1b1c:	2300      	movs	r3, #0
{
 80a1b1e:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1b20:	2520      	movs	r5, #32
 80a1b22:	8043      	strh	r3, [r0, #2]
 80a1b24:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1b26:	4e08      	ldr	r6, [pc, #32]	; (80a1b48 <_Z17acquireWireBufferv+0x2c>)
{
 80a1b28:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a1b2a:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1b2c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a1b2e:	6085      	str	r5, [r0, #8]
 80a1b30:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1b32:	4628      	mov	r0, r5
 80a1b34:	f000 f83e 	bl	80a1bb4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1b38:	4631      	mov	r1, r6
	};
 80a1b3a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1b3c:	4628      	mov	r0, r5
 80a1b3e:	f000 f839 	bl	80a1bb4 <_ZnajRKSt9nothrow_t>
	};
 80a1b42:	60e0      	str	r0, [r4, #12]
}
 80a1b44:	4620      	mov	r0, r4
 80a1b46:	bd70      	pop	{r4, r5, r6, pc}
 80a1b48:	080a27f8 	.word	0x080a27f8

080a1b4c <_Z19__fetch_global_Wirev>:
{
 80a1b4c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1b4e:	4d0e      	ldr	r5, [pc, #56]	; (80a1b88 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a1b50:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1b52:	7829      	ldrb	r1, [r5, #0]
 80a1b54:	f3bf 8f5b 	dmb	ish
 80a1b58:	f011 0401 	ands.w	r4, r1, #1
 80a1b5c:	d111      	bne.n	80a1b82 <_Z19__fetch_global_Wirev+0x36>
 80a1b5e:	4628      	mov	r0, r5
 80a1b60:	f7fe fa9d 	bl	80a009e <__cxa_guard_acquire>
 80a1b64:	b168      	cbz	r0, 80a1b82 <_Z19__fetch_global_Wirev+0x36>
 80a1b66:	a801      	add	r0, sp, #4
 80a1b68:	f7ff ffd8 	bl	80a1b1c <_Z17acquireWireBufferv>
 80a1b6c:	4621      	mov	r1, r4
 80a1b6e:	aa01      	add	r2, sp, #4
 80a1b70:	4806      	ldr	r0, [pc, #24]	; (80a1b8c <_Z19__fetch_global_Wirev+0x40>)
 80a1b72:	f7ff f877 	bl	80a0c64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a1b76:	4628      	mov	r0, r5
 80a1b78:	f7fe fa96 	bl	80a00a8 <__cxa_guard_release>
 80a1b7c:	4804      	ldr	r0, [pc, #16]	; (80a1b90 <_Z19__fetch_global_Wirev+0x44>)
 80a1b7e:	f000 fc61 	bl	80a2444 <atexit>
	return wire;
}
 80a1b82:	4802      	ldr	r0, [pc, #8]	; (80a1b8c <_Z19__fetch_global_Wirev+0x40>)
 80a1b84:	b007      	add	sp, #28
 80a1b86:	bd30      	pop	{r4, r5, pc}
 80a1b88:	200005b8 	.word	0x200005b8
 80a1b8c:	200005bc 	.word	0x200005bc
 80a1b90:	080a1b19 	.word	0x080a1b19

080a1b94 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1b94:	2300      	movs	r3, #0
 80a1b96:	b507      	push	{r0, r1, r2, lr}
 80a1b98:	461a      	mov	r2, r3
 80a1b9a:	4619      	mov	r1, r3
 80a1b9c:	9300      	str	r3, [sp, #0]
 80a1b9e:	4803      	ldr	r0, [pc, #12]	; (80a1bac <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a1ba0:	f7ff f906 	bl	80a0db0 <_ZN9IPAddressC1Ehhhh>
 80a1ba4:	b003      	add	sp, #12
 80a1ba6:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1baa:	bf00      	nop
 80a1bac:	200005d0 	.word	0x200005d0

080a1bb0 <_ZdlPvj>:
 80a1bb0:	f7fe ba73 	b.w	80a009a <_ZdlPv>

080a1bb4 <_ZnajRKSt9nothrow_t>:
 80a1bb4:	f7fe ba6f 	b.w	80a0096 <_Znaj>

080a1bb8 <__aeabi_drsub>:
 80a1bb8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1bbc:	e002      	b.n	80a1bc4 <__adddf3>
 80a1bbe:	bf00      	nop

080a1bc0 <__aeabi_dsub>:
 80a1bc0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1bc4 <__adddf3>:
 80a1bc4:	b530      	push	{r4, r5, lr}
 80a1bc6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1bca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1bce:	ea94 0f05 	teq	r4, r5
 80a1bd2:	bf08      	it	eq
 80a1bd4:	ea90 0f02 	teqeq	r0, r2
 80a1bd8:	bf1f      	itttt	ne
 80a1bda:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1bde:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1be2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1be6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1bea:	f000 80e2 	beq.w	80a1db2 <__adddf3+0x1ee>
 80a1bee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1bf2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1bf6:	bfb8      	it	lt
 80a1bf8:	426d      	neglt	r5, r5
 80a1bfa:	dd0c      	ble.n	80a1c16 <__adddf3+0x52>
 80a1bfc:	442c      	add	r4, r5
 80a1bfe:	ea80 0202 	eor.w	r2, r0, r2
 80a1c02:	ea81 0303 	eor.w	r3, r1, r3
 80a1c06:	ea82 0000 	eor.w	r0, r2, r0
 80a1c0a:	ea83 0101 	eor.w	r1, r3, r1
 80a1c0e:	ea80 0202 	eor.w	r2, r0, r2
 80a1c12:	ea81 0303 	eor.w	r3, r1, r3
 80a1c16:	2d36      	cmp	r5, #54	; 0x36
 80a1c18:	bf88      	it	hi
 80a1c1a:	bd30      	pophi	{r4, r5, pc}
 80a1c1c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1c20:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1c24:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1c28:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1c2c:	d002      	beq.n	80a1c34 <__adddf3+0x70>
 80a1c2e:	4240      	negs	r0, r0
 80a1c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1c34:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1c38:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1c3c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1c40:	d002      	beq.n	80a1c48 <__adddf3+0x84>
 80a1c42:	4252      	negs	r2, r2
 80a1c44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1c48:	ea94 0f05 	teq	r4, r5
 80a1c4c:	f000 80a7 	beq.w	80a1d9e <__adddf3+0x1da>
 80a1c50:	f1a4 0401 	sub.w	r4, r4, #1
 80a1c54:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1c58:	db0d      	blt.n	80a1c76 <__adddf3+0xb2>
 80a1c5a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1c5e:	fa22 f205 	lsr.w	r2, r2, r5
 80a1c62:	1880      	adds	r0, r0, r2
 80a1c64:	f141 0100 	adc.w	r1, r1, #0
 80a1c68:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1c6c:	1880      	adds	r0, r0, r2
 80a1c6e:	fa43 f305 	asr.w	r3, r3, r5
 80a1c72:	4159      	adcs	r1, r3
 80a1c74:	e00e      	b.n	80a1c94 <__adddf3+0xd0>
 80a1c76:	f1a5 0520 	sub.w	r5, r5, #32
 80a1c7a:	f10e 0e20 	add.w	lr, lr, #32
 80a1c7e:	2a01      	cmp	r2, #1
 80a1c80:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1c84:	bf28      	it	cs
 80a1c86:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1c8a:	fa43 f305 	asr.w	r3, r3, r5
 80a1c8e:	18c0      	adds	r0, r0, r3
 80a1c90:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1c94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1c98:	d507      	bpl.n	80a1caa <__adddf3+0xe6>
 80a1c9a:	f04f 0e00 	mov.w	lr, #0
 80a1c9e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1ca2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1ca6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1caa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1cae:	d31b      	bcc.n	80a1ce8 <__adddf3+0x124>
 80a1cb0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1cb4:	d30c      	bcc.n	80a1cd0 <__adddf3+0x10c>
 80a1cb6:	0849      	lsrs	r1, r1, #1
 80a1cb8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1cbc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1cc0:	f104 0401 	add.w	r4, r4, #1
 80a1cc4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1cc8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1ccc:	f080 809a 	bcs.w	80a1e04 <__adddf3+0x240>
 80a1cd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1cd4:	bf08      	it	eq
 80a1cd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1cda:	f150 0000 	adcs.w	r0, r0, #0
 80a1cde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1ce2:	ea41 0105 	orr.w	r1, r1, r5
 80a1ce6:	bd30      	pop	{r4, r5, pc}
 80a1ce8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1cec:	4140      	adcs	r0, r0
 80a1cee:	eb41 0101 	adc.w	r1, r1, r1
 80a1cf2:	3c01      	subs	r4, #1
 80a1cf4:	bf28      	it	cs
 80a1cf6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a1cfa:	d2e9      	bcs.n	80a1cd0 <__adddf3+0x10c>
 80a1cfc:	f091 0f00 	teq	r1, #0
 80a1d00:	bf04      	itt	eq
 80a1d02:	4601      	moveq	r1, r0
 80a1d04:	2000      	moveq	r0, #0
 80a1d06:	fab1 f381 	clz	r3, r1
 80a1d0a:	bf08      	it	eq
 80a1d0c:	3320      	addeq	r3, #32
 80a1d0e:	f1a3 030b 	sub.w	r3, r3, #11
 80a1d12:	f1b3 0220 	subs.w	r2, r3, #32
 80a1d16:	da0c      	bge.n	80a1d32 <__adddf3+0x16e>
 80a1d18:	320c      	adds	r2, #12
 80a1d1a:	dd08      	ble.n	80a1d2e <__adddf3+0x16a>
 80a1d1c:	f102 0c14 	add.w	ip, r2, #20
 80a1d20:	f1c2 020c 	rsb	r2, r2, #12
 80a1d24:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1d28:	fa21 f102 	lsr.w	r1, r1, r2
 80a1d2c:	e00c      	b.n	80a1d48 <__adddf3+0x184>
 80a1d2e:	f102 0214 	add.w	r2, r2, #20
 80a1d32:	bfd8      	it	le
 80a1d34:	f1c2 0c20 	rsble	ip, r2, #32
 80a1d38:	fa01 f102 	lsl.w	r1, r1, r2
 80a1d3c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1d40:	bfdc      	itt	le
 80a1d42:	ea41 010c 	orrle.w	r1, r1, ip
 80a1d46:	4090      	lslle	r0, r2
 80a1d48:	1ae4      	subs	r4, r4, r3
 80a1d4a:	bfa2      	ittt	ge
 80a1d4c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1d50:	4329      	orrge	r1, r5
 80a1d52:	bd30      	popge	{r4, r5, pc}
 80a1d54:	ea6f 0404 	mvn.w	r4, r4
 80a1d58:	3c1f      	subs	r4, #31
 80a1d5a:	da1c      	bge.n	80a1d96 <__adddf3+0x1d2>
 80a1d5c:	340c      	adds	r4, #12
 80a1d5e:	dc0e      	bgt.n	80a1d7e <__adddf3+0x1ba>
 80a1d60:	f104 0414 	add.w	r4, r4, #20
 80a1d64:	f1c4 0220 	rsb	r2, r4, #32
 80a1d68:	fa20 f004 	lsr.w	r0, r0, r4
 80a1d6c:	fa01 f302 	lsl.w	r3, r1, r2
 80a1d70:	ea40 0003 	orr.w	r0, r0, r3
 80a1d74:	fa21 f304 	lsr.w	r3, r1, r4
 80a1d78:	ea45 0103 	orr.w	r1, r5, r3
 80a1d7c:	bd30      	pop	{r4, r5, pc}
 80a1d7e:	f1c4 040c 	rsb	r4, r4, #12
 80a1d82:	f1c4 0220 	rsb	r2, r4, #32
 80a1d86:	fa20 f002 	lsr.w	r0, r0, r2
 80a1d8a:	fa01 f304 	lsl.w	r3, r1, r4
 80a1d8e:	ea40 0003 	orr.w	r0, r0, r3
 80a1d92:	4629      	mov	r1, r5
 80a1d94:	bd30      	pop	{r4, r5, pc}
 80a1d96:	fa21 f004 	lsr.w	r0, r1, r4
 80a1d9a:	4629      	mov	r1, r5
 80a1d9c:	bd30      	pop	{r4, r5, pc}
 80a1d9e:	f094 0f00 	teq	r4, #0
 80a1da2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1da6:	bf06      	itte	eq
 80a1da8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1dac:	3401      	addeq	r4, #1
 80a1dae:	3d01      	subne	r5, #1
 80a1db0:	e74e      	b.n	80a1c50 <__adddf3+0x8c>
 80a1db2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1db6:	bf18      	it	ne
 80a1db8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1dbc:	d029      	beq.n	80a1e12 <__adddf3+0x24e>
 80a1dbe:	ea94 0f05 	teq	r4, r5
 80a1dc2:	bf08      	it	eq
 80a1dc4:	ea90 0f02 	teqeq	r0, r2
 80a1dc8:	d005      	beq.n	80a1dd6 <__adddf3+0x212>
 80a1dca:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1dce:	bf04      	itt	eq
 80a1dd0:	4619      	moveq	r1, r3
 80a1dd2:	4610      	moveq	r0, r2
 80a1dd4:	bd30      	pop	{r4, r5, pc}
 80a1dd6:	ea91 0f03 	teq	r1, r3
 80a1dda:	bf1e      	ittt	ne
 80a1ddc:	2100      	movne	r1, #0
 80a1dde:	2000      	movne	r0, #0
 80a1de0:	bd30      	popne	{r4, r5, pc}
 80a1de2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1de6:	d105      	bne.n	80a1df4 <__adddf3+0x230>
 80a1de8:	0040      	lsls	r0, r0, #1
 80a1dea:	4149      	adcs	r1, r1
 80a1dec:	bf28      	it	cs
 80a1dee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1df2:	bd30      	pop	{r4, r5, pc}
 80a1df4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1df8:	bf3c      	itt	cc
 80a1dfa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1dfe:	bd30      	popcc	{r4, r5, pc}
 80a1e00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1e04:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1e08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1e0c:	f04f 0000 	mov.w	r0, #0
 80a1e10:	bd30      	pop	{r4, r5, pc}
 80a1e12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1e16:	bf1a      	itte	ne
 80a1e18:	4619      	movne	r1, r3
 80a1e1a:	4610      	movne	r0, r2
 80a1e1c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1e20:	bf1c      	itt	ne
 80a1e22:	460b      	movne	r3, r1
 80a1e24:	4602      	movne	r2, r0
 80a1e26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1e2a:	bf06      	itte	eq
 80a1e2c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1e30:	ea91 0f03 	teqeq	r1, r3
 80a1e34:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1e38:	bd30      	pop	{r4, r5, pc}
 80a1e3a:	bf00      	nop

080a1e3c <__aeabi_ui2d>:
 80a1e3c:	f090 0f00 	teq	r0, #0
 80a1e40:	bf04      	itt	eq
 80a1e42:	2100      	moveq	r1, #0
 80a1e44:	4770      	bxeq	lr
 80a1e46:	b530      	push	{r4, r5, lr}
 80a1e48:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1e4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1e50:	f04f 0500 	mov.w	r5, #0
 80a1e54:	f04f 0100 	mov.w	r1, #0
 80a1e58:	e750      	b.n	80a1cfc <__adddf3+0x138>
 80a1e5a:	bf00      	nop

080a1e5c <__aeabi_i2d>:
 80a1e5c:	f090 0f00 	teq	r0, #0
 80a1e60:	bf04      	itt	eq
 80a1e62:	2100      	moveq	r1, #0
 80a1e64:	4770      	bxeq	lr
 80a1e66:	b530      	push	{r4, r5, lr}
 80a1e68:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1e6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1e70:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1e74:	bf48      	it	mi
 80a1e76:	4240      	negmi	r0, r0
 80a1e78:	f04f 0100 	mov.w	r1, #0
 80a1e7c:	e73e      	b.n	80a1cfc <__adddf3+0x138>
 80a1e7e:	bf00      	nop

080a1e80 <__aeabi_f2d>:
 80a1e80:	0042      	lsls	r2, r0, #1
 80a1e82:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1e86:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1e8a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1e8e:	bf1f      	itttt	ne
 80a1e90:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1e94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1e98:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1e9c:	4770      	bxne	lr
 80a1e9e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a1ea2:	bf08      	it	eq
 80a1ea4:	4770      	bxeq	lr
 80a1ea6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a1eaa:	bf04      	itt	eq
 80a1eac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a1eb0:	4770      	bxeq	lr
 80a1eb2:	b530      	push	{r4, r5, lr}
 80a1eb4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1eb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1ebc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1ec0:	e71c      	b.n	80a1cfc <__adddf3+0x138>
 80a1ec2:	bf00      	nop

080a1ec4 <__aeabi_ul2d>:
 80a1ec4:	ea50 0201 	orrs.w	r2, r0, r1
 80a1ec8:	bf08      	it	eq
 80a1eca:	4770      	bxeq	lr
 80a1ecc:	b530      	push	{r4, r5, lr}
 80a1ece:	f04f 0500 	mov.w	r5, #0
 80a1ed2:	e00a      	b.n	80a1eea <__aeabi_l2d+0x16>

080a1ed4 <__aeabi_l2d>:
 80a1ed4:	ea50 0201 	orrs.w	r2, r0, r1
 80a1ed8:	bf08      	it	eq
 80a1eda:	4770      	bxeq	lr
 80a1edc:	b530      	push	{r4, r5, lr}
 80a1ede:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1ee2:	d502      	bpl.n	80a1eea <__aeabi_l2d+0x16>
 80a1ee4:	4240      	negs	r0, r0
 80a1ee6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1eea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1eee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1ef2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1ef6:	f43f aed8 	beq.w	80a1caa <__adddf3+0xe6>
 80a1efa:	f04f 0203 	mov.w	r2, #3
 80a1efe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1f02:	bf18      	it	ne
 80a1f04:	3203      	addne	r2, #3
 80a1f06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1f0a:	bf18      	it	ne
 80a1f0c:	3203      	addne	r2, #3
 80a1f0e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1f12:	f1c2 0320 	rsb	r3, r2, #32
 80a1f16:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1f1a:	fa20 f002 	lsr.w	r0, r0, r2
 80a1f1e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1f22:	ea40 000e 	orr.w	r0, r0, lr
 80a1f26:	fa21 f102 	lsr.w	r1, r1, r2
 80a1f2a:	4414      	add	r4, r2
 80a1f2c:	e6bd      	b.n	80a1caa <__adddf3+0xe6>
 80a1f2e:	bf00      	nop

080a1f30 <__aeabi_dmul>:
 80a1f30:	b570      	push	{r4, r5, r6, lr}
 80a1f32:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1f36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1f3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1f3e:	bf1d      	ittte	ne
 80a1f40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1f44:	ea94 0f0c 	teqne	r4, ip
 80a1f48:	ea95 0f0c 	teqne	r5, ip
 80a1f4c:	f000 f8de 	bleq	80a210c <__aeabi_dmul+0x1dc>
 80a1f50:	442c      	add	r4, r5
 80a1f52:	ea81 0603 	eor.w	r6, r1, r3
 80a1f56:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1f5a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1f5e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1f62:	bf18      	it	ne
 80a1f64:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1f68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1f70:	d038      	beq.n	80a1fe4 <__aeabi_dmul+0xb4>
 80a1f72:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1f76:	f04f 0500 	mov.w	r5, #0
 80a1f7a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a1f7e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1f82:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1f86:	f04f 0600 	mov.w	r6, #0
 80a1f8a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a1f8e:	f09c 0f00 	teq	ip, #0
 80a1f92:	bf18      	it	ne
 80a1f94:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1f98:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1f9c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1fa0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1fa4:	d204      	bcs.n	80a1fb0 <__aeabi_dmul+0x80>
 80a1fa6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1faa:	416d      	adcs	r5, r5
 80a1fac:	eb46 0606 	adc.w	r6, r6, r6
 80a1fb0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1fb4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1fb8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1fbc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1fc0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1fc4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1fc8:	bf88      	it	hi
 80a1fca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1fce:	d81e      	bhi.n	80a200e <__aeabi_dmul+0xde>
 80a1fd0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1fd4:	bf08      	it	eq
 80a1fd6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1fda:	f150 0000 	adcs.w	r0, r0, #0
 80a1fde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1fe2:	bd70      	pop	{r4, r5, r6, pc}
 80a1fe4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1fe8:	ea46 0101 	orr.w	r1, r6, r1
 80a1fec:	ea40 0002 	orr.w	r0, r0, r2
 80a1ff0:	ea81 0103 	eor.w	r1, r1, r3
 80a1ff4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1ff8:	bfc2      	ittt	gt
 80a1ffa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1ffe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2002:	bd70      	popgt	{r4, r5, r6, pc}
 80a2004:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2008:	f04f 0e00 	mov.w	lr, #0
 80a200c:	3c01      	subs	r4, #1
 80a200e:	f300 80ab 	bgt.w	80a2168 <__aeabi_dmul+0x238>
 80a2012:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2016:	bfde      	ittt	le
 80a2018:	2000      	movle	r0, #0
 80a201a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a201e:	bd70      	pople	{r4, r5, r6, pc}
 80a2020:	f1c4 0400 	rsb	r4, r4, #0
 80a2024:	3c20      	subs	r4, #32
 80a2026:	da35      	bge.n	80a2094 <__aeabi_dmul+0x164>
 80a2028:	340c      	adds	r4, #12
 80a202a:	dc1b      	bgt.n	80a2064 <__aeabi_dmul+0x134>
 80a202c:	f104 0414 	add.w	r4, r4, #20
 80a2030:	f1c4 0520 	rsb	r5, r4, #32
 80a2034:	fa00 f305 	lsl.w	r3, r0, r5
 80a2038:	fa20 f004 	lsr.w	r0, r0, r4
 80a203c:	fa01 f205 	lsl.w	r2, r1, r5
 80a2040:	ea40 0002 	orr.w	r0, r0, r2
 80a2044:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2048:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a204c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2050:	fa21 f604 	lsr.w	r6, r1, r4
 80a2054:	eb42 0106 	adc.w	r1, r2, r6
 80a2058:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a205c:	bf08      	it	eq
 80a205e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2062:	bd70      	pop	{r4, r5, r6, pc}
 80a2064:	f1c4 040c 	rsb	r4, r4, #12
 80a2068:	f1c4 0520 	rsb	r5, r4, #32
 80a206c:	fa00 f304 	lsl.w	r3, r0, r4
 80a2070:	fa20 f005 	lsr.w	r0, r0, r5
 80a2074:	fa01 f204 	lsl.w	r2, r1, r4
 80a2078:	ea40 0002 	orr.w	r0, r0, r2
 80a207c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2080:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2084:	f141 0100 	adc.w	r1, r1, #0
 80a2088:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a208c:	bf08      	it	eq
 80a208e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2092:	bd70      	pop	{r4, r5, r6, pc}
 80a2094:	f1c4 0520 	rsb	r5, r4, #32
 80a2098:	fa00 f205 	lsl.w	r2, r0, r5
 80a209c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a20a0:	fa20 f304 	lsr.w	r3, r0, r4
 80a20a4:	fa01 f205 	lsl.w	r2, r1, r5
 80a20a8:	ea43 0302 	orr.w	r3, r3, r2
 80a20ac:	fa21 f004 	lsr.w	r0, r1, r4
 80a20b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a20b4:	fa21 f204 	lsr.w	r2, r1, r4
 80a20b8:	ea20 0002 	bic.w	r0, r0, r2
 80a20bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a20c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a20c4:	bf08      	it	eq
 80a20c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a20ca:	bd70      	pop	{r4, r5, r6, pc}
 80a20cc:	f094 0f00 	teq	r4, #0
 80a20d0:	d10f      	bne.n	80a20f2 <__aeabi_dmul+0x1c2>
 80a20d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a20d6:	0040      	lsls	r0, r0, #1
 80a20d8:	eb41 0101 	adc.w	r1, r1, r1
 80a20dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a20e0:	bf08      	it	eq
 80a20e2:	3c01      	subeq	r4, #1
 80a20e4:	d0f7      	beq.n	80a20d6 <__aeabi_dmul+0x1a6>
 80a20e6:	ea41 0106 	orr.w	r1, r1, r6
 80a20ea:	f095 0f00 	teq	r5, #0
 80a20ee:	bf18      	it	ne
 80a20f0:	4770      	bxne	lr
 80a20f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a20f6:	0052      	lsls	r2, r2, #1
 80a20f8:	eb43 0303 	adc.w	r3, r3, r3
 80a20fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2100:	bf08      	it	eq
 80a2102:	3d01      	subeq	r5, #1
 80a2104:	d0f7      	beq.n	80a20f6 <__aeabi_dmul+0x1c6>
 80a2106:	ea43 0306 	orr.w	r3, r3, r6
 80a210a:	4770      	bx	lr
 80a210c:	ea94 0f0c 	teq	r4, ip
 80a2110:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2114:	bf18      	it	ne
 80a2116:	ea95 0f0c 	teqne	r5, ip
 80a211a:	d00c      	beq.n	80a2136 <__aeabi_dmul+0x206>
 80a211c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2120:	bf18      	it	ne
 80a2122:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2126:	d1d1      	bne.n	80a20cc <__aeabi_dmul+0x19c>
 80a2128:	ea81 0103 	eor.w	r1, r1, r3
 80a212c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2130:	f04f 0000 	mov.w	r0, #0
 80a2134:	bd70      	pop	{r4, r5, r6, pc}
 80a2136:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a213a:	bf06      	itte	eq
 80a213c:	4610      	moveq	r0, r2
 80a213e:	4619      	moveq	r1, r3
 80a2140:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2144:	d019      	beq.n	80a217a <__aeabi_dmul+0x24a>
 80a2146:	ea94 0f0c 	teq	r4, ip
 80a214a:	d102      	bne.n	80a2152 <__aeabi_dmul+0x222>
 80a214c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2150:	d113      	bne.n	80a217a <__aeabi_dmul+0x24a>
 80a2152:	ea95 0f0c 	teq	r5, ip
 80a2156:	d105      	bne.n	80a2164 <__aeabi_dmul+0x234>
 80a2158:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a215c:	bf1c      	itt	ne
 80a215e:	4610      	movne	r0, r2
 80a2160:	4619      	movne	r1, r3
 80a2162:	d10a      	bne.n	80a217a <__aeabi_dmul+0x24a>
 80a2164:	ea81 0103 	eor.w	r1, r1, r3
 80a2168:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a216c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2170:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2174:	f04f 0000 	mov.w	r0, #0
 80a2178:	bd70      	pop	{r4, r5, r6, pc}
 80a217a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a217e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2182:	bd70      	pop	{r4, r5, r6, pc}

080a2184 <__aeabi_ddiv>:
 80a2184:	b570      	push	{r4, r5, r6, lr}
 80a2186:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a218a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a218e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2192:	bf1d      	ittte	ne
 80a2194:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2198:	ea94 0f0c 	teqne	r4, ip
 80a219c:	ea95 0f0c 	teqne	r5, ip
 80a21a0:	f000 f8a7 	bleq	80a22f2 <__aeabi_ddiv+0x16e>
 80a21a4:	eba4 0405 	sub.w	r4, r4, r5
 80a21a8:	ea81 0e03 	eor.w	lr, r1, r3
 80a21ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a21b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a21b4:	f000 8088 	beq.w	80a22c8 <__aeabi_ddiv+0x144>
 80a21b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a21bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a21c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a21c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a21c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a21cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a21d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a21d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a21d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a21dc:	429d      	cmp	r5, r3
 80a21de:	bf08      	it	eq
 80a21e0:	4296      	cmpeq	r6, r2
 80a21e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a21e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a21ea:	d202      	bcs.n	80a21f2 <__aeabi_ddiv+0x6e>
 80a21ec:	085b      	lsrs	r3, r3, #1
 80a21ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80a21f2:	1ab6      	subs	r6, r6, r2
 80a21f4:	eb65 0503 	sbc.w	r5, r5, r3
 80a21f8:	085b      	lsrs	r3, r3, #1
 80a21fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a21fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2202:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2206:	ebb6 0e02 	subs.w	lr, r6, r2
 80a220a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a220e:	bf22      	ittt	cs
 80a2210:	1ab6      	subcs	r6, r6, r2
 80a2212:	4675      	movcs	r5, lr
 80a2214:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2218:	085b      	lsrs	r3, r3, #1
 80a221a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a221e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2222:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2226:	bf22      	ittt	cs
 80a2228:	1ab6      	subcs	r6, r6, r2
 80a222a:	4675      	movcs	r5, lr
 80a222c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2230:	085b      	lsrs	r3, r3, #1
 80a2232:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2236:	ebb6 0e02 	subs.w	lr, r6, r2
 80a223a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a223e:	bf22      	ittt	cs
 80a2240:	1ab6      	subcs	r6, r6, r2
 80a2242:	4675      	movcs	r5, lr
 80a2244:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2248:	085b      	lsrs	r3, r3, #1
 80a224a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a224e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2252:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2256:	bf22      	ittt	cs
 80a2258:	1ab6      	subcs	r6, r6, r2
 80a225a:	4675      	movcs	r5, lr
 80a225c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2260:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2264:	d018      	beq.n	80a2298 <__aeabi_ddiv+0x114>
 80a2266:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a226a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a226e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2272:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2276:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a227a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a227e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2282:	d1c0      	bne.n	80a2206 <__aeabi_ddiv+0x82>
 80a2284:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2288:	d10b      	bne.n	80a22a2 <__aeabi_ddiv+0x11e>
 80a228a:	ea41 0100 	orr.w	r1, r1, r0
 80a228e:	f04f 0000 	mov.w	r0, #0
 80a2292:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2296:	e7b6      	b.n	80a2206 <__aeabi_ddiv+0x82>
 80a2298:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a229c:	bf04      	itt	eq
 80a229e:	4301      	orreq	r1, r0
 80a22a0:	2000      	moveq	r0, #0
 80a22a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a22a6:	bf88      	it	hi
 80a22a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a22ac:	f63f aeaf 	bhi.w	80a200e <__aeabi_dmul+0xde>
 80a22b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80a22b4:	bf04      	itt	eq
 80a22b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a22ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a22be:	f150 0000 	adcs.w	r0, r0, #0
 80a22c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a22c6:	bd70      	pop	{r4, r5, r6, pc}
 80a22c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a22cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a22d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a22d4:	bfc2      	ittt	gt
 80a22d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a22da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a22de:	bd70      	popgt	{r4, r5, r6, pc}
 80a22e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a22e4:	f04f 0e00 	mov.w	lr, #0
 80a22e8:	3c01      	subs	r4, #1
 80a22ea:	e690      	b.n	80a200e <__aeabi_dmul+0xde>
 80a22ec:	ea45 0e06 	orr.w	lr, r5, r6
 80a22f0:	e68d      	b.n	80a200e <__aeabi_dmul+0xde>
 80a22f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a22f6:	ea94 0f0c 	teq	r4, ip
 80a22fa:	bf08      	it	eq
 80a22fc:	ea95 0f0c 	teqeq	r5, ip
 80a2300:	f43f af3b 	beq.w	80a217a <__aeabi_dmul+0x24a>
 80a2304:	ea94 0f0c 	teq	r4, ip
 80a2308:	d10a      	bne.n	80a2320 <__aeabi_ddiv+0x19c>
 80a230a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a230e:	f47f af34 	bne.w	80a217a <__aeabi_dmul+0x24a>
 80a2312:	ea95 0f0c 	teq	r5, ip
 80a2316:	f47f af25 	bne.w	80a2164 <__aeabi_dmul+0x234>
 80a231a:	4610      	mov	r0, r2
 80a231c:	4619      	mov	r1, r3
 80a231e:	e72c      	b.n	80a217a <__aeabi_dmul+0x24a>
 80a2320:	ea95 0f0c 	teq	r5, ip
 80a2324:	d106      	bne.n	80a2334 <__aeabi_ddiv+0x1b0>
 80a2326:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a232a:	f43f aefd 	beq.w	80a2128 <__aeabi_dmul+0x1f8>
 80a232e:	4610      	mov	r0, r2
 80a2330:	4619      	mov	r1, r3
 80a2332:	e722      	b.n	80a217a <__aeabi_dmul+0x24a>
 80a2334:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2338:	bf18      	it	ne
 80a233a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a233e:	f47f aec5 	bne.w	80a20cc <__aeabi_dmul+0x19c>
 80a2342:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2346:	f47f af0d 	bne.w	80a2164 <__aeabi_dmul+0x234>
 80a234a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a234e:	f47f aeeb 	bne.w	80a2128 <__aeabi_dmul+0x1f8>
 80a2352:	e712      	b.n	80a217a <__aeabi_dmul+0x24a>

080a2354 <__aeabi_d2iz>:
 80a2354:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2358:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a235c:	d215      	bcs.n	80a238a <__aeabi_d2iz+0x36>
 80a235e:	d511      	bpl.n	80a2384 <__aeabi_d2iz+0x30>
 80a2360:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2364:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2368:	d912      	bls.n	80a2390 <__aeabi_d2iz+0x3c>
 80a236a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a236e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2372:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2376:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a237a:	fa23 f002 	lsr.w	r0, r3, r2
 80a237e:	bf18      	it	ne
 80a2380:	4240      	negne	r0, r0
 80a2382:	4770      	bx	lr
 80a2384:	f04f 0000 	mov.w	r0, #0
 80a2388:	4770      	bx	lr
 80a238a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a238e:	d105      	bne.n	80a239c <__aeabi_d2iz+0x48>
 80a2390:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a2394:	bf08      	it	eq
 80a2396:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a239a:	4770      	bx	lr
 80a239c:	f04f 0000 	mov.w	r0, #0
 80a23a0:	4770      	bx	lr
 80a23a2:	bf00      	nop

080a23a4 <__aeabi_d2f>:
 80a23a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a23a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a23ac:	bf24      	itt	cs
 80a23ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a23b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a23b6:	d90d      	bls.n	80a23d4 <__aeabi_d2f+0x30>
 80a23b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a23bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a23c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a23c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a23c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a23cc:	bf08      	it	eq
 80a23ce:	f020 0001 	biceq.w	r0, r0, #1
 80a23d2:	4770      	bx	lr
 80a23d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a23d8:	d121      	bne.n	80a241e <__aeabi_d2f+0x7a>
 80a23da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a23de:	bfbc      	itt	lt
 80a23e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a23e4:	4770      	bxlt	lr
 80a23e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a23ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a23ee:	f1c2 0218 	rsb	r2, r2, #24
 80a23f2:	f1c2 0c20 	rsb	ip, r2, #32
 80a23f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80a23fa:	fa20 f002 	lsr.w	r0, r0, r2
 80a23fe:	bf18      	it	ne
 80a2400:	f040 0001 	orrne.w	r0, r0, #1
 80a2404:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2408:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a240c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a2410:	ea40 000c 	orr.w	r0, r0, ip
 80a2414:	fa23 f302 	lsr.w	r3, r3, r2
 80a2418:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a241c:	e7cc      	b.n	80a23b8 <__aeabi_d2f+0x14>
 80a241e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a2422:	d107      	bne.n	80a2434 <__aeabi_d2f+0x90>
 80a2424:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a2428:	bf1e      	ittt	ne
 80a242a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a242e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a2432:	4770      	bxne	lr
 80a2434:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a2438:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a243c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2440:	4770      	bx	lr
 80a2442:	bf00      	nop

080a2444 <atexit>:
 80a2444:	2300      	movs	r3, #0
 80a2446:	4601      	mov	r1, r0
 80a2448:	461a      	mov	r2, r3
 80a244a:	4618      	mov	r0, r3
 80a244c:	f000 b84a 	b.w	80a24e4 <__register_exitproc>

080a2450 <memcpy>:
 80a2450:	440a      	add	r2, r1
 80a2452:	4291      	cmp	r1, r2
 80a2454:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a2458:	d100      	bne.n	80a245c <memcpy+0xc>
 80a245a:	4770      	bx	lr
 80a245c:	b510      	push	{r4, lr}
 80a245e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2462:	4291      	cmp	r1, r2
 80a2464:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2468:	d1f9      	bne.n	80a245e <memcpy+0xe>
 80a246a:	bd10      	pop	{r4, pc}

080a246c <memset>:
 80a246c:	4603      	mov	r3, r0
 80a246e:	4402      	add	r2, r0
 80a2470:	4293      	cmp	r3, r2
 80a2472:	d100      	bne.n	80a2476 <memset+0xa>
 80a2474:	4770      	bx	lr
 80a2476:	f803 1b01 	strb.w	r1, [r3], #1
 80a247a:	e7f9      	b.n	80a2470 <memset+0x4>

080a247c <srand>:
 80a247c:	b538      	push	{r3, r4, r5, lr}
 80a247e:	4b0d      	ldr	r3, [pc, #52]	; (80a24b4 <srand+0x38>)
 80a2480:	4604      	mov	r4, r0
 80a2482:	681d      	ldr	r5, [r3, #0]
 80a2484:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2486:	b97b      	cbnz	r3, 80a24a8 <srand+0x2c>
 80a2488:	2018      	movs	r0, #24
 80a248a:	f7fe fb9b 	bl	80a0bc4 <malloc>
 80a248e:	4a0a      	ldr	r2, [pc, #40]	; (80a24b8 <srand+0x3c>)
 80a2490:	4b0a      	ldr	r3, [pc, #40]	; (80a24bc <srand+0x40>)
 80a2492:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2494:	e9c0 2300 	strd	r2, r3, [r0]
 80a2498:	4b09      	ldr	r3, [pc, #36]	; (80a24c0 <srand+0x44>)
 80a249a:	2201      	movs	r2, #1
 80a249c:	6083      	str	r3, [r0, #8]
 80a249e:	230b      	movs	r3, #11
 80a24a0:	8183      	strh	r3, [r0, #12]
 80a24a2:	2300      	movs	r3, #0
 80a24a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a24a8:	2200      	movs	r2, #0
 80a24aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a24ac:	611c      	str	r4, [r3, #16]
 80a24ae:	615a      	str	r2, [r3, #20]
 80a24b0:	bd38      	pop	{r3, r4, r5, pc}
 80a24b2:	bf00      	nop
 80a24b4:	2000000c 	.word	0x2000000c
 80a24b8:	abcd330e 	.word	0xabcd330e
 80a24bc:	e66d1234 	.word	0xe66d1234
 80a24c0:	0005deec 	.word	0x0005deec

080a24c4 <strcpy>:
 80a24c4:	4603      	mov	r3, r0
 80a24c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a24ca:	f803 2b01 	strb.w	r2, [r3], #1
 80a24ce:	2a00      	cmp	r2, #0
 80a24d0:	d1f9      	bne.n	80a24c6 <strcpy+0x2>
 80a24d2:	4770      	bx	lr

080a24d4 <strlen>:
 80a24d4:	4603      	mov	r3, r0
 80a24d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a24da:	2a00      	cmp	r2, #0
 80a24dc:	d1fb      	bne.n	80a24d6 <strlen+0x2>
 80a24de:	1a18      	subs	r0, r3, r0
 80a24e0:	3801      	subs	r0, #1
 80a24e2:	4770      	bx	lr

080a24e4 <__register_exitproc>:
 80a24e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a24e8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a25a8 <__register_exitproc+0xc4>
 80a24ec:	4606      	mov	r6, r0
 80a24ee:	f8d8 0000 	ldr.w	r0, [r8]
 80a24f2:	461f      	mov	r7, r3
 80a24f4:	460d      	mov	r5, r1
 80a24f6:	4691      	mov	r9, r2
 80a24f8:	f000 f858 	bl	80a25ac <__retarget_lock_acquire_recursive>
 80a24fc:	4b26      	ldr	r3, [pc, #152]	; (80a2598 <__register_exitproc+0xb4>)
 80a24fe:	681c      	ldr	r4, [r3, #0]
 80a2500:	b934      	cbnz	r4, 80a2510 <__register_exitproc+0x2c>
 80a2502:	4c26      	ldr	r4, [pc, #152]	; (80a259c <__register_exitproc+0xb8>)
 80a2504:	601c      	str	r4, [r3, #0]
 80a2506:	4b26      	ldr	r3, [pc, #152]	; (80a25a0 <__register_exitproc+0xbc>)
 80a2508:	b113      	cbz	r3, 80a2510 <__register_exitproc+0x2c>
 80a250a:	681b      	ldr	r3, [r3, #0]
 80a250c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a2510:	6863      	ldr	r3, [r4, #4]
 80a2512:	2b1f      	cmp	r3, #31
 80a2514:	dd07      	ble.n	80a2526 <__register_exitproc+0x42>
 80a2516:	f8d8 0000 	ldr.w	r0, [r8]
 80a251a:	f000 f849 	bl	80a25b0 <__retarget_lock_release_recursive>
 80a251e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2526:	b35e      	cbz	r6, 80a2580 <__register_exitproc+0x9c>
 80a2528:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a252c:	b988      	cbnz	r0, 80a2552 <__register_exitproc+0x6e>
 80a252e:	4b1d      	ldr	r3, [pc, #116]	; (80a25a4 <__register_exitproc+0xc0>)
 80a2530:	b923      	cbnz	r3, 80a253c <__register_exitproc+0x58>
 80a2532:	f8d8 0000 	ldr.w	r0, [r8]
 80a2536:	f000 f83a 	bl	80a25ae <__retarget_lock_release>
 80a253a:	e7f0      	b.n	80a251e <__register_exitproc+0x3a>
 80a253c:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a2540:	f7fe fb40 	bl	80a0bc4 <malloc>
 80a2544:	2800      	cmp	r0, #0
 80a2546:	d0f4      	beq.n	80a2532 <__register_exitproc+0x4e>
 80a2548:	2300      	movs	r3, #0
 80a254a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a254e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a2552:	2201      	movs	r2, #1
 80a2554:	6863      	ldr	r3, [r4, #4]
 80a2556:	2e02      	cmp	r6, #2
 80a2558:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a255c:	fa02 f203 	lsl.w	r2, r2, r3
 80a2560:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a2564:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a2568:	ea43 0302 	orr.w	r3, r3, r2
 80a256c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a2570:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a2574:	bf02      	ittt	eq
 80a2576:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a257a:	431a      	orreq	r2, r3
 80a257c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a2580:	6863      	ldr	r3, [r4, #4]
 80a2582:	f8d8 0000 	ldr.w	r0, [r8]
 80a2586:	1c5a      	adds	r2, r3, #1
 80a2588:	3302      	adds	r3, #2
 80a258a:	6062      	str	r2, [r4, #4]
 80a258c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a2590:	f000 f80e 	bl	80a25b0 <__retarget_lock_release_recursive>
 80a2594:	2000      	movs	r0, #0
 80a2596:	e7c4      	b.n	80a2522 <__register_exitproc+0x3e>
 80a2598:	20000674 	.word	0x20000674
 80a259c:	200005e8 	.word	0x200005e8
 80a25a0:	00000000 	.word	0x00000000
 80a25a4:	080a0bc5 	.word	0x080a0bc5
 80a25a8:	20000070 	.word	0x20000070

080a25ac <__retarget_lock_acquire_recursive>:
 80a25ac:	4770      	bx	lr

080a25ae <__retarget_lock_release>:
 80a25ae:	4770      	bx	lr

080a25b0 <__retarget_lock_release_recursive>:
 80a25b0:	4770      	bx	lr

080a25b2 <link_code_end>:
	...

080a25b4 <dynalib_user>:
 80a25b4:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a25c4:	0000 0000 504d 3655 3530 2030 6f63 6e6e     ....MPU6050 conn
 80a25d4:	6365 6974 6e6f 7320 6375 6563 7373 7566     ection successfu
 80a25e4:	006c 504d 3655 3530 2030 6f63 6e6e 6365     l.MPU6050 connec
 80a25f4:	6974 6e6f 6620 6961 656c 0064 6e49 7469     tion failed.Init
 80a2604:	6169 696c 697a 676e 4920 4332 6420 7665     ializing I2C dev
 80a2614:	6369 7365 2e2e 002e 6554 7473 6e69 2067     ices....Testing 
 80a2624:	6564 6976 6563 6320 6e6f 656e 7463 6f69     device connectio
 80a2634:	736e 2e2e 002e 6957 6946 6320 6e6f 656e     ns....WiFi conne
 80a2644:	7463 6465 2f00 616d 6978 656d 0000 0000     cted./maxime....

080a2654 <_ZTV7TwoWire>:
	...
 80a265c:	0c0b 080a 0c55 080a 0c2d 080a 0c0d 080a     ....U...-.......
 80a266c:	0c35 080a 0c3d 080a 0c45 080a 0c4d 080a     5...=...E...M...

080a267c <_ZTV9IPAddress>:
	...
 80a2684:	0d13 080a 0d03 080a 0d05 080a 7061 0070     ............app.

080a2694 <_ZTVN5spark12NetworkClassE>:
	...
 80a269c:	0ded 080a 0df7 080a 0e01 080a 0e0b 080a     ................
 80a26ac:	0e15 080a 0e21 080a 0e2d 080a 0e35 080a     ....!...-...5...
 80a26bc:	0e3d 080a 0e49 080a 0e51 080a 0e5b 080a     =...I...Q...[...
 80a26cc:	0e65 080a 5925 252d 2d6d 6425 2554 3a48     e...%Y-%m-%dT%H:
 80a26dc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a26ec <_ZTV3UDP>:
	...
 80a26f4:	1559 080a 157d 080a 1147 080a 1273 080a     Y...}...G...s...
 80a2704:	113f 080a 115f 080a 117d 080a 1197 080a     ?..._...}.......
 80a2714:	11b9 080a 1211 080a 1233 080a 13d5 080a     ........3.......
 80a2724:	12d9 080a 1129 080a 14ed 080a 134d 080a     ....).......M...
 80a2734:	140d 080a 151b 080a 129d 080a 1135 080a     ............5...
 80a2744:	13b5 080a 113b 080a 1199 080a fff0 ffff     ....;...........
 80a2754:	0000 0000 11b1 080a                         ........

080a275c <_ZTV11USARTSerial>:
	...
 80a2764:	1591 080a 15fb 080a 15d7 080a 0ee1 080a     ................
 80a2774:	15a7 080a 15c3 080a 15b5 080a 15d1 080a     ................
 80a2784:	1593 080a 1599 080a                         ........

080a278c <_ZTV9USBSerial>:
	...
 80a2794:	1683 080a 16e9 080a 16c1 080a 0ee1 080a     ................
 80a27a4:	16b3 080a 1685 080a 1695 080a 16e3 080a     ................
 80a27b4:	16a5 080a 167d 080a                         ....}...

080a27bc <_ZTVN5spark9WiFiClassE>:
	...
 80a27c4:	18b3 080a 18a9 080a 189f 080a 1811 080a     ................
 80a27d4:	1893 080a 1887 080a 0e2d 080a 0e35 080a     ........-...5...
 80a27e4:	187b 080a 1873 080a 1869 080a 185f 080a     {...s...i..._...
 80a27f4:	181b 080a                                   ....

080a27f8 <_ZSt7nothrow>:
	...

080a27f9 <link_const_variable_data_end>:
 80a27f9:	00          	.byte	0x00
	...

080a27fc <link_constructors_location>:
 80a27fc:	080a027d 	.word	0x080a027d
 80a2800:	080a0ddd 	.word	0x080a0ddd
 80a2804:	080a0ecd 	.word	0x080a0ecd
 80a2808:	080a0fa1 	.word	0x080a0fa1
 80a280c:	080a10f1 	.word	0x080a10f1
 80a2810:	080a1115 	.word	0x080a1115
 80a2814:	080a18bd 	.word	0x080a18bd
 80a2818:	080a1b95 	.word	0x080a1b95

080a281c <link_constructors_end>:
 80a281c:	00000000 	.word	0x00000000
