
/Users/maximegordon/Desktop/ParticleMG/maxime-harness/target/2.2.0/argon/maxime-harness.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002a04  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6a20  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e498  000d6a24  0001e498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002e4  2003e50c  2003e50c  0002e50c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6a98  000d6a98  00026a98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6ac0  000d6ac0  00026ac0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0015eb6c  00000000  00000000  00026ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00016d5b  00000000  00000000  00185630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002f502  00000000  00000000  0019c38b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003070  00000000  00000000  001cb88d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007948  00000000  00000000  001ce8fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000389f2  00000000  00000000  001d6245  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003c81e  00000000  00000000  0020ec37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00108e0f  00000000  00000000  0024b455  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008548  00000000  00000000  00354264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 faf3 	bl	d6618 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fafb 	bl	d6634 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e498 	.word	0x2003e498
   d4048:	000d6a24 	.word	0x000d6a24
   d404c:	2003e50c 	.word	0x2003e50c
   d4050:	2003e50c 	.word	0x2003e50c
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fdb3 	bl	d5bc8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d69fc 	.word	0x000d69fc
   d407c:	000d6a20 	.word	0x000d6a20

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b814 	b.w	d40ac <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f873 	bl	d4170 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bd53 	b.w	d5b38 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 bdbd 	b.w	d4c10 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 bdc3 	b.w	d4c20 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr
	...

000d40ac <setup>:
//setup()
//join I2C bus
//start Serial communication
//blink LED to show its sending 
//initialize UDP communication
void setup() {
   d40ac:	b538      	push	{r3, r4, r5, lr}
    // join I2C bus (I2Cdev library doesn't do this automatically)
    #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
   d40ae:	f001 fe3f 	bl	d5d30 <_Z19__fetch_global_Wirev>
   d40b2:	f000 fe55 	bl	d4d60 <_ZN7TwoWire5beginEv>
    #endif

    // initialize serial communication
    // (38400 chosen because it works as well at 8MHz as it does at 16MHz, but
    // it's really up to you depending on your project)
    Serial.begin(38400);
   d40b6:	f001 fcb9 	bl	d5a2c <_Z16_fetch_usbserialv>
   d40ba:	f44f 4116 	mov.w	r1, #38400	; 0x9600
   d40be:	f001 fca9 	bl	d5a14 <_ZN9USBSerial5beginEl>

    // initialize device
    Serial.println("Initializing I2C devices...");
   d40c2:	f001 fcb3 	bl	d5a2c <_Z16_fetch_usbserialv>
   d40c6:	4920      	ldr	r1, [pc, #128]	; (d4148 <setup+0x9c>)
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d40c8:	4d20      	ldr	r5, [pc, #128]	; (d414c <setup+0xa0>)
   d40ca:	f001 f80e 	bl	d50ea <_ZN5Print7printlnEPKc>
    accelgyro.initialize();
   d40ce:	4820      	ldr	r0, [pc, #128]	; (d4150 <setup+0xa4>)
   d40d0:	f000 fa5b 	bl	d458a <_ZN7MPU605010initializeEv>

    // verify connection
    Serial.println("Testing device connections...");
   d40d4:	f001 fcaa 	bl	d5a2c <_Z16_fetch_usbserialv>
   d40d8:	491e      	ldr	r1, [pc, #120]	; (d4154 <setup+0xa8>)
   d40da:	f001 f806 	bl	d50ea <_ZN5Print7printlnEPKc>
    Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
   d40de:	f001 fca5 	bl	d5a2c <_Z16_fetch_usbserialv>
   d40e2:	4604      	mov	r4, r0
   d40e4:	481a      	ldr	r0, [pc, #104]	; (d4150 <setup+0xa4>)
   d40e6:	f000 fa77 	bl	d45d8 <_ZN7MPU605014testConnectionEv>
   d40ea:	4a1b      	ldr	r2, [pc, #108]	; (d4158 <setup+0xac>)
   d40ec:	491b      	ldr	r1, [pc, #108]	; (d415c <setup+0xb0>)
   d40ee:	2800      	cmp	r0, #0
   d40f0:	bf18      	it	ne
   d40f2:	4611      	movne	r1, r2
   d40f4:	4620      	mov	r0, r4
   d40f6:	f000 fff8 	bl	d50ea <_ZN5Print7printlnEPKc>

    // configure Arduino LED for
    pinMode(LED_PIN, OUTPUT);
   d40fa:	2101      	movs	r1, #1
   d40fc:	2007      	movs	r0, #7
   d40fe:	f001 fdd3 	bl	d5ca8 <pinMode>

     // Serial.begin(115200);
    udp.begin(0);//necessary even for sending only.
   d4102:	2200      	movs	r2, #0
   d4104:	4816      	ldr	r0, [pc, #88]	; (d4160 <setup+0xb4>)
    while (!WiFi.ready())
    {
        delay(500);
        Serial.print(".");
   d4106:	4c17      	ldr	r4, [pc, #92]	; (d4164 <setup+0xb8>)
    udp.begin(0);//necessary even for sending only.
   d4108:	4611      	mov	r1, r2
   d410a:	f001 f923 	bl	d5354 <_ZN3UDP5beginEtm>
   d410e:	2200      	movs	r2, #0
   d4110:	6868      	ldr	r0, [r5, #4]
   d4112:	4611      	mov	r1, r2
   d4114:	f000 fd34 	bl	d4b80 <network_ready>
    while (!WiFi.ready())
   d4118:	b948      	cbnz	r0, d412e <setup+0x82>
        delay(500);
   d411a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d411e:	f000 fd97 	bl	d4c50 <delay>
        Serial.print(".");
   d4122:	f001 fc83 	bl	d5a2c <_Z16_fetch_usbserialv>
   d4126:	4621      	mov	r1, r4
   d4128:	f000 ffcc 	bl	d50c4 <_ZN5Print5printEPKc>
    while (!WiFi.ready())
   d412c:	e7ef      	b.n	d410e <setup+0x62>
    }
    Serial.println("");
   d412e:	f001 fc7d 	bl	d5a2c <_Z16_fetch_usbserialv>
   d4132:	490d      	ldr	r1, [pc, #52]	; (d4168 <setup+0xbc>)
   d4134:	f000 ffd9 	bl	d50ea <_ZN5Print7printlnEPKc>
    Serial.println("WiFi connected");
   d4138:	f001 fc78 	bl	d5a2c <_Z16_fetch_usbserialv>
}
   d413c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println("WiFi connected");
   d4140:	490a      	ldr	r1, [pc, #40]	; (d416c <setup+0xc0>)
   d4142:	f000 bfd2 	b.w	d50ea <_ZN5Print7printlnEPKc>
   d4146:	bf00      	nop
   d4148:	000d67c4 	.word	0x000d67c4
   d414c:	2003e71c 	.word	0x2003e71c
   d4150:	2003e524 	.word	0x2003e524
   d4154:	000d67e0 	.word	0x000d67e0
   d4158:	000d678c 	.word	0x000d678c
   d415c:	000d67aa 	.word	0x000d67aa
   d4160:	2003e55c 	.word	0x2003e55c
   d4164:	000d67de 	.word	0x000d67de
   d4168:	000d67df 	.word	0x000d67df
   d416c:	000d67fe 	.word	0x000d67fe

000d4170 <loop>:
//
//read acceleration from the sensor 
//send accel values via OSC
//blink LED to show its sending 
//
void loop() {
   d4170:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4172:	b0a1      	sub	sp, #132	; 0x84
    // read raw accel/gyro measurements from device
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
   d4174:	4b30      	ldr	r3, [pc, #192]	; (d4238 <loop+0xc8>)
   d4176:	4f31      	ldr	r7, [pc, #196]	; (d423c <loop+0xcc>)
   d4178:	4c31      	ldr	r4, [pc, #196]	; (d4240 <loop+0xd0>)
   d417a:	4d32      	ldr	r5, [pc, #200]	; (d4244 <loop+0xd4>)
   d417c:	9302      	str	r3, [sp, #8]
   d417e:	4b32      	ldr	r3, [pc, #200]	; (d4248 <loop+0xd8>)
   d4180:	9301      	str	r3, [sp, #4]
   d4182:	4b32      	ldr	r3, [pc, #200]	; (d424c <loop+0xdc>)
   d4184:	9300      	str	r3, [sp, #0]
   d4186:	4622      	mov	r2, r4
   d4188:	463b      	mov	r3, r7
   d418a:	4629      	mov	r1, r5
   d418c:	4830      	ldr	r0, [pc, #192]	; (d4250 <loop+0xe0>)
    
    //divide by 16384 according to datasheet of sensor (see https://howtomechatronics.com/tutorials/arduino/arduino-and-mpu6050-accelerometer-and-gyroscope-tutorial/)
    AccX = ax/ 16384.0;
   d418e:	4e31      	ldr	r6, [pc, #196]	; (d4254 <loop+0xe4>)
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
   d4190:	f000 f9b6 	bl	d4500 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>
    AccX = ax/ 16384.0;
   d4194:	f9b5 0000 	ldrsh.w	r0, [r5]
    AccY = ay/ 16384.0;
   d4198:	4d2f      	ldr	r5, [pc, #188]	; (d4258 <loop+0xe8>)
    AccX = ax/ 16384.0;
   d419a:	f001 ff43 	bl	d6024 <__aeabi_i2d>
   d419e:	4b2f      	ldr	r3, [pc, #188]	; (d425c <loop+0xec>)
   d41a0:	2200      	movs	r2, #0
   d41a2:	f001 ffa9 	bl	d60f8 <__aeabi_dmul>
   d41a6:	f002 f9e1 	bl	d656c <__aeabi_d2f>
   d41aa:	6030      	str	r0, [r6, #0]
    AccY = ay/ 16384.0;
   d41ac:	f9b4 0000 	ldrsh.w	r0, [r4]
    AccZ= az/16384.0;
   d41b0:	4c2b      	ldr	r4, [pc, #172]	; (d4260 <loop+0xf0>)
    AccY = ay/ 16384.0;
   d41b2:	f001 ff37 	bl	d6024 <__aeabi_i2d>
   d41b6:	4b29      	ldr	r3, [pc, #164]	; (d425c <loop+0xec>)
   d41b8:	2200      	movs	r2, #0
   d41ba:	f001 ff9d 	bl	d60f8 <__aeabi_dmul>
   d41be:	f002 f9d5 	bl	d656c <__aeabi_d2f>
   d41c2:	6028      	str	r0, [r5, #0]
    AccZ= az/16384.0;
   d41c4:	f9b7 0000 	ldrsh.w	r0, [r7]
   d41c8:	f001 ff2c 	bl	d6024 <__aeabi_i2d>
   d41cc:	2200      	movs	r2, #0
   d41ce:	4b23      	ldr	r3, [pc, #140]	; (d425c <loop+0xec>)
   d41d0:	f001 ff92 	bl	d60f8 <__aeabi_dmul>
   d41d4:	f002 f9ca 	bl	d656c <__aeabi_d2f>
    // GyroX = gx/ 131.0;
    // GyroY = gy/ 131.0;
    // GyroZ= gz/ 131.0;;

    // blink LED to indicate activity
    blinkState = !blinkState;
   d41d8:	4b22      	ldr	r3, [pc, #136]	; (d4264 <loop+0xf4>)
    AccZ= az/16384.0;
   d41da:	6020      	str	r0, [r4, #0]
    blinkState = !blinkState;
   d41dc:	7819      	ldrb	r1, [r3, #0]
    digitalWrite(LED_PIN, blinkState);
   d41de:	2007      	movs	r0, #7
    blinkState = !blinkState;
   d41e0:	f081 0101 	eor.w	r1, r1, #1
   d41e4:	7019      	strb	r1, [r3, #0]
    digitalWrite(LED_PIN, blinkState);
   d41e6:	f001 fd70 	bl	d5cca <digitalWrite>
    
    //SEND OSC (to Max) 
    OSCMessage outMessage("/maxime");
   d41ea:	491f      	ldr	r1, [pc, #124]	; (d4268 <loop+0xf8>)
   d41ec:	a80b      	add	r0, sp, #44	; 0x2c
   d41ee:	f000 fa03 	bl	d45f8 <_ZN10OSCMessageC1EPKc>
    outMessage.addFloat(AccX);
   d41f2:	ed96 0a00 	vldr	s0, [r6]
   d41f6:	a80b      	add	r0, sp, #44	; 0x2c
   d41f8:	f000 fa3d 	bl	d4676 <_ZN10OSCMessage8addFloatEf>
    outMessage.addFloat(AccY);
   d41fc:	ed95 0a00 	vldr	s0, [r5]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4200:	4d1a      	ldr	r5, [pc, #104]	; (d426c <loop+0xfc>)
   d4202:	a80b      	add	r0, sp, #44	; 0x2c
   d4204:	f000 fa37 	bl	d4676 <_ZN10OSCMessage8addFloatEf>
    outMessage.addFloat(AccZ);
   d4208:	ed94 0a00 	vldr	s0, [r4]
   d420c:	a80b      	add	r0, sp, #44	; 0x2c
   d420e:	f000 fa32 	bl	d4676 <_ZN10OSCMessage8addFloatEf>
   d4212:	4b17      	ldr	r3, [pc, #92]	; (d4270 <loop+0x100>)
   d4214:	9305      	str	r3, [sp, #20]
   d4216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4218:	ac06      	add	r4, sp, #24
   d421a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d421c:	682b      	ldr	r3, [r5, #0]
   d421e:	7023      	strb	r3, [r4, #0]
    outMessage.send(udp,outIp,outPort);
   d4220:	4b14      	ldr	r3, [pc, #80]	; (d4274 <loop+0x104>)
   d4222:	4915      	ldr	r1, [pc, #84]	; (d4278 <loop+0x108>)
   d4224:	681b      	ldr	r3, [r3, #0]
   d4226:	aa05      	add	r2, sp, #20
   d4228:	a80b      	add	r0, sp, #44	; 0x2c
   d422a:	f000 fa4f 	bl	d46cc <_ZN10OSCMessage4sendER3UDP9IPAddressj>
    OSCMessage outMessage("/maxime");
   d422e:	a80b      	add	r0, sp, #44	; 0x2c
   d4230:	f000 fa04 	bl	d463c <_ZN10OSCMessageD1Ev>
};
   d4234:	b021      	add	sp, #132	; 0x84
   d4236:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4238:	2003e540 	.word	0x2003e540
   d423c:	2003e538 	.word	0x2003e538
   d4240:	2003e536 	.word	0x2003e536
   d4244:	2003e534 	.word	0x2003e534
   d4248:	2003e53e 	.word	0x2003e53e
   d424c:	2003e53c 	.word	0x2003e53c
   d4250:	2003e524 	.word	0x2003e524
   d4254:	2003e50c 	.word	0x2003e50c
   d4258:	2003e510 	.word	0x2003e510
   d425c:	3f100000 	.word	0x3f100000
   d4260:	2003e514 	.word	0x2003e514
   d4264:	2003e53a 	.word	0x2003e53a
   d4268:	000d680d 	.word	0x000d680d
   d426c:	2003e548 	.word	0x2003e548
   d4270:	000d6884 	.word	0x000d6884
   d4274:	2003e498 	.word	0x2003e498
   d4278:	2003e55c 	.word	0x2003e55c

000d427c <_GLOBAL__sub_I_SystemMode>:
   d427c:	b507      	push	{r0, r1, r2, lr}
SYSTEM_THREAD(ENABLED);
   d427e:	2100      	movs	r1, #0
   d4280:	2001      	movs	r0, #1
   d4282:	f000 fc41 	bl	d4b08 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4286:	4b0e      	ldr	r3, [pc, #56]	; (d42c0 <_GLOBAL__sub_I_SystemMode+0x44>)
   d4288:	2200      	movs	r2, #0
   d428a:	601a      	str	r2, [r3, #0]
   d428c:	809a      	strh	r2, [r3, #4]
    SleepResult() {}
   d428e:	719a      	strb	r2, [r3, #6]
   d4290:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   d4294:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4296:	2001      	movs	r0, #1
   d4298:	f000 fc26 	bl	d4ae8 <set_system_mode>
UDP udp;
   d429c:	4809      	ldr	r0, [pc, #36]	; (d42c4 <_GLOBAL__sub_I_SystemMode+0x48>)
   d429e:	f001 fa4b 	bl	d5738 <_ZN3UDPC1Ev>
IPAddress outIp(192, 168, 1, 106); //your computer IP//Need to reconfigure for each new wifi network ! 
   d42a2:	236a      	movs	r3, #106	; 0x6a
   d42a4:	9300      	str	r3, [sp, #0]
   d42a6:	22a8      	movs	r2, #168	; 0xa8
   d42a8:	2301      	movs	r3, #1
   d42aa:	21c0      	movs	r1, #192	; 0xc0
   d42ac:	4806      	ldr	r0, [pc, #24]	; (d42c8 <_GLOBAL__sub_I_SystemMode+0x4c>)
   d42ae:	f000 fe13 	bl	d4ed8 <_ZN9IPAddressC1Ehhhh>
MPU6050 accelgyro;
   d42b2:	4806      	ldr	r0, [pc, #24]	; (d42cc <_GLOBAL__sub_I_SystemMode+0x50>)
};
   d42b4:	b003      	add	sp, #12
   d42b6:	f85d eb04 	ldr.w	lr, [sp], #4
MPU6050 accelgyro;
   d42ba:	f000 b907 	b.w	d44cc <_ZN7MPU6050C1Ev>
   d42be:	bf00      	nop
   d42c0:	2003e518 	.word	0x2003e518
   d42c4:	2003e55c 	.word	0x2003e55c
   d42c8:	2003e544 	.word	0x2003e544
   d42cc:	2003e524 	.word	0x2003e524

000d42d0 <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
   d42d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42d4:	4616      	mov	r6, r2
   d42d6:	469b      	mov	fp, r3
   d42d8:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
   d42dc:	4607      	mov	r7, r0
   d42de:	468a      	mov	sl, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42e0:	f000 fa9a 	bl	d4818 <HAL_Timer_Get_Milli_Seconds>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d42e4:	2e20      	cmp	r6, #32
   d42e6:	4633      	mov	r3, r6
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
   d42e8:	f04f 0500 	mov.w	r5, #0
   d42ec:	bfa8      	it	ge
   d42ee:	2320      	movge	r3, #32
   d42f0:	4681      	mov	r9, r0
    int8_t count = 0;
   d42f2:	462c      	mov	r4, r5
   d42f4:	9301      	str	r3, [sp, #4]
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
   d42f6:	42b5      	cmp	r5, r6
   d42f8:	d23a      	bcs.n	d4370 <_ZN6I2Cdev9readBytesEhhhPht+0xa0>
                Wire.beginTransmission(devAddr);
   d42fa:	f001 fd19 	bl	d5d30 <_Z19__fetch_global_Wirev>
   d42fe:	4639      	mov	r1, r7
   d4300:	f000 fd60 	bl	d4dc4 <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
   d4304:	f001 fd14 	bl	d5d30 <_Z19__fetch_global_Wirev>
   d4308:	6803      	ldr	r3, [r0, #0]
   d430a:	4651      	mov	r1, sl
   d430c:	689b      	ldr	r3, [r3, #8]
   d430e:	4798      	blx	r3
                Wire.endTransmission();
   d4310:	f001 fd0e 	bl	d5d30 <_Z19__fetch_global_Wirev>
   d4314:	f000 fd5e 	bl	d4dd4 <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
   d4318:	f001 fd0a 	bl	d5d30 <_Z19__fetch_global_Wirev>
   d431c:	4639      	mov	r1, r7
   d431e:	f000 fd51 	bl	d4dc4 <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
   d4322:	f001 fd05 	bl	d5d30 <_Z19__fetch_global_Wirev>
   d4326:	1b72      	subs	r2, r6, r5
   d4328:	2a20      	cmp	r2, #32
   d432a:	bfa8      	it	ge
   d432c:	2220      	movge	r2, #32
   d432e:	b2d2      	uxtb	r2, r2
   d4330:	4639      	mov	r1, r7
   d4332:	f000 fd44 	bl	d4dbe <_ZN7TwoWire11requestFromEhj>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
   d4336:	f001 fcfb 	bl	d5d30 <_Z19__fetch_global_Wirev>
   d433a:	6803      	ldr	r3, [r0, #0]
   d433c:	691b      	ldr	r3, [r3, #16]
   d433e:	4798      	blx	r3
   d4340:	b190      	cbz	r0, d4368 <_ZN6I2Cdev9readBytesEhhhPht+0x98>
   d4342:	f1b8 0f00 	cmp.w	r8, #0
   d4346:	d109      	bne.n	d435c <_ZN6I2Cdev9readBytesEhhhPht+0x8c>
                    data[count] = Wire.read();
   d4348:	f001 fcf2 	bl	d5d30 <_Z19__fetch_global_Wirev>
   d434c:	6803      	ldr	r3, [r0, #0]
   d434e:	695b      	ldr	r3, [r3, #20]
   d4350:	4798      	blx	r3
   d4352:	f80b 0004 	strb.w	r0, [fp, r4]
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
   d4356:	3401      	adds	r4, #1
   d4358:	b264      	sxtb	r4, r4
   d435a:	e7ec      	b.n	d4336 <_ZN6I2Cdev9readBytesEhhhPht+0x66>
   d435c:	f000 fa5c 	bl	d4818 <HAL_Timer_Get_Milli_Seconds>
   d4360:	eba0 0009 	sub.w	r0, r0, r9
   d4364:	4540      	cmp	r0, r8
   d4366:	d3ef      	bcc.n	d4348 <_ZN6I2Cdev9readBytesEhhhPht+0x78>
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
   d4368:	9b01      	ldr	r3, [sp, #4]
   d436a:	441d      	add	r5, r3
   d436c:	b2ed      	uxtb	r5, r5
   d436e:	e7c2      	b.n	d42f6 <_ZN6I2Cdev9readBytesEhhhPht+0x26>
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
   d4370:	f1b8 0f00 	cmp.w	r8, #0
   d4374:	d009      	beq.n	d438a <_ZN6I2Cdev9readBytesEhhhPht+0xba>
   d4376:	f000 fa4f 	bl	d4818 <HAL_Timer_Get_Milli_Seconds>
   d437a:	eba0 0009 	sub.w	r0, r0, r9
   d437e:	4540      	cmp	r0, r8
   d4380:	d303      	bcc.n	d438a <_ZN6I2Cdev9readBytesEhhhPht+0xba>
   d4382:	42b4      	cmp	r4, r6
   d4384:	bfb8      	it	lt
   d4386:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
   d438a:	4620      	mov	r0, r4
   d438c:	b003      	add	sp, #12
   d438e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4392 <_ZN6I2Cdev8readByteEhhPht>:
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
   d4392:	b507      	push	{r0, r1, r2, lr}
    return readBytes(devAddr, regAddr, 1, data, timeout);
   d4394:	9300      	str	r3, [sp, #0]
   d4396:	4613      	mov	r3, r2
   d4398:	2201      	movs	r2, #1
   d439a:	f7ff ff99 	bl	d42d0 <_ZN6I2Cdev9readBytesEhhhPht>
}
   d439e:	b003      	add	sp, #12
   d43a0:	f85d fb04 	ldr.w	pc, [sp], #4

000d43a4 <_ZN6I2Cdev8readBitsEhhhhPht>:
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
   d43a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43a6:	4614      	mov	r4, r2
   d43a8:	461d      	mov	r5, r3
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
   d43aa:	f10d 0207 	add.w	r2, sp, #7
   d43ae:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d43b2:	f7ff ffee 	bl	d4392 <_ZN6I2Cdev8readByteEhhPht>
   d43b6:	b160      	cbz	r0, d43d2 <_ZN6I2Cdev8readBitsEhhhhPht+0x2e>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d43b8:	2201      	movs	r2, #1
   d43ba:	fa02 f305 	lsl.w	r3, r2, r5
   d43be:	1b61      	subs	r1, r4, r5
        b &= mask;
   d43c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d43c4:	3101      	adds	r1, #1
   d43c6:	3b01      	subs	r3, #1
   d43c8:	408b      	lsls	r3, r1
        b >>= (bitStart - length + 1);
   d43ca:	4013      	ands	r3, r2
   d43cc:	9a06      	ldr	r2, [sp, #24]
   d43ce:	410b      	asrs	r3, r1
   d43d0:	7013      	strb	r3, [r2, #0]
}
   d43d2:	b003      	add	sp, #12
   d43d4:	bd30      	pop	{r4, r5, pc}

000d43d6 <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
   d43d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d43d8:	4607      	mov	r7, r0
   d43da:	4615      	mov	r5, r2
   d43dc:	461c      	mov	r4, r3
   d43de:	460e      	mov	r6, r1
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif
    uint8_t status = 0;
	#if defined (PARTICLE)
        Wire.beginTransmission(devAddr);
   d43e0:	f001 fca6 	bl	d5d30 <_Z19__fetch_global_Wirev>
   d43e4:	4639      	mov	r1, r7
   d43e6:	f000 fced 	bl	d4dc4 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
   d43ea:	f001 fca1 	bl	d5d30 <_Z19__fetch_global_Wirev>
   d43ee:	6803      	ldr	r3, [r0, #0]
   d43f0:	4631      	mov	r1, r6
   d43f2:	689b      	ldr	r3, [r3, #8]
   d43f4:	4798      	blx	r3
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
   d43f6:	4425      	add	r5, r4
   d43f8:	42ac      	cmp	r4, r5
   d43fa:	d007      	beq.n	d440c <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
        #ifdef I2CDEV_SERIAL_DEBUG
            Serial.print(data[i], HEX);
            if (i + 1 < length) Serial.print(" ");
        #endif
		#if defined (PARTICLE)
            Wire.write((uint8_t) data[i]);
   d43fc:	f001 fc98 	bl	d5d30 <_Z19__fetch_global_Wirev>
   d4400:	6803      	ldr	r3, [r0, #0]
   d4402:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4406:	689b      	ldr	r3, [r3, #8]
   d4408:	4798      	blx	r3
    for (uint8_t i = 0; i < length; i++) {
   d440a:	e7f5      	b.n	d43f8 <_ZN6I2Cdev10writeBytesEhhhPh+0x22>
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
            Fastwire::write((uint8_t) data[i]);
        #endif
    }
	#if defined (PARTICLE)
        status = Wire.endTransmission();
   d440c:	f001 fc90 	bl	d5d30 <_Z19__fetch_global_Wirev>
   d4410:	f000 fce0 	bl	d4dd4 <_ZN7TwoWire15endTransmissionEv>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
   d4414:	fab0 f080 	clz	r0, r0
   d4418:	0940      	lsrs	r0, r0, #5
   d441a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d441c <_ZN6I2Cdev9writeByteEhhh>:
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
   d441c:	b507      	push	{r0, r1, r2, lr}
   d441e:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeBytes(devAddr, regAddr, 1, &data);
   d4422:	f10d 0307 	add.w	r3, sp, #7
   d4426:	2201      	movs	r2, #1
   d4428:	f7ff ffd5 	bl	d43d6 <_ZN6I2Cdev10writeBytesEhhhPh>
}
   d442c:	b003      	add	sp, #12
   d442e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4434 <_ZN6I2Cdev8writeBitEhhhh>:
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
   d4434:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4438:	461f      	mov	r7, r3
    readByte(devAddr, regAddr, &b);
   d443a:	4b0f      	ldr	r3, [pc, #60]	; (d4478 <_ZN6I2Cdev8writeBitEhhhh+0x44>)
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
   d443c:	4690      	mov	r8, r2
   d443e:	2401      	movs	r4, #1
    readByte(devAddr, regAddr, &b);
   d4440:	f10d 0207 	add.w	r2, sp, #7
   d4444:	881b      	ldrh	r3, [r3, #0]
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
   d4446:	4605      	mov	r5, r0
   d4448:	460e      	mov	r6, r1
    readByte(devAddr, regAddr, &b);
   d444a:	f7ff ffa2 	bl	d4392 <_ZN6I2Cdev8readByteEhhPht>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
   d444e:	fa04 f208 	lsl.w	r2, r4, r8
   d4452:	b252      	sxtb	r2, r2
   d4454:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d4458:	b157      	cbz	r7, d4470 <_ZN6I2Cdev8writeBitEhhhh+0x3c>
   d445a:	4322      	orrs	r2, r4
   d445c:	b2d2      	uxtb	r2, r2
    return writeByte(devAddr, regAddr, b);
   d445e:	4631      	mov	r1, r6
   d4460:	4628      	mov	r0, r5
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
   d4462:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeByte(devAddr, regAddr, b);
   d4466:	f7ff ffd9 	bl	d441c <_ZN6I2Cdev9writeByteEhhh>
}
   d446a:	b002      	add	sp, #8
   d446c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
   d4470:	ea24 0202 	bic.w	r2, r4, r2
   d4474:	e7f3      	b.n	d445e <_ZN6I2Cdev8writeBitEhhhh+0x2a>
   d4476:	bf00      	nop
   d4478:	2003e49c 	.word	0x2003e49c

000d447c <_ZN6I2Cdev9writeBitsEhhhhh>:
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
   d447c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d447e:	461f      	mov	r7, r3
    if (readByte(devAddr, regAddr, &b) != 0) {
   d4480:	4b11      	ldr	r3, [pc, #68]	; (d44c8 <_ZN6I2Cdev9writeBitsEhhhhh+0x4c>)
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
   d4482:	4616      	mov	r6, r2
    if (readByte(devAddr, regAddr, &b) != 0) {
   d4484:	881b      	ldrh	r3, [r3, #0]
   d4486:	f10d 0207 	add.w	r2, sp, #7
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
   d448a:	4604      	mov	r4, r0
   d448c:	460d      	mov	r5, r1
    if (readByte(devAddr, regAddr, &b) != 0) {
   d448e:	f7ff ff80 	bl	d4392 <_ZN6I2Cdev8readByteEhhPht>
   d4492:	b1b8      	cbz	r0, d44c4 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d4494:	2201      	movs	r2, #1
   d4496:	fa02 f307 	lsl.w	r3, r2, r7
   d449a:	1bf1      	subs	r1, r6, r7
        data <<= (bitStart - length + 1); // shift data into correct position
   d449c:	f89d 2020 	ldrb.w	r2, [sp, #32]
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d44a0:	3101      	adds	r1, #1
   d44a2:	3b01      	subs	r3, #1
   d44a4:	408b      	lsls	r3, r1
        data <<= (bitStart - length + 1); // shift data into correct position
   d44a6:	fa02 f101 	lsl.w	r1, r2, r1
        b &= ~(mask); // zero all important bits in existing byte
   d44aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
        data <<= (bitStart - length + 1); // shift data into correct position
   d44ae:	b2c9      	uxtb	r1, r1
        b &= ~(mask); // zero all important bits in existing byte
   d44b0:	ea22 0203 	bic.w	r2, r2, r3
        data &= mask; // zero all non-important bits in data
   d44b4:	400b      	ands	r3, r1
        b |= data; // combine data with existing byte
   d44b6:	431a      	orrs	r2, r3
        return writeByte(devAddr, regAddr, b);
   d44b8:	4629      	mov	r1, r5
   d44ba:	4620      	mov	r0, r4
        b |= data; // combine data with existing byte
   d44bc:	f88d 2007 	strb.w	r2, [sp, #7]
        return writeByte(devAddr, regAddr, b);
   d44c0:	f7ff ffac 	bl	d441c <_ZN6I2Cdev9writeByteEhhh>
}
   d44c4:	b003      	add	sp, #12
   d44c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44c8:	2003e49c 	.word	0x2003e49c

000d44cc <_ZN7MPU6050C1Ev>:

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
    devAddr = MPU6050_DEFAULT_ADDRESS;
   d44cc:	2368      	movs	r3, #104	; 0x68
   d44ce:	7003      	strb	r3, [r0, #0]
}
   d44d0:	4770      	bx	lr

000d44d2 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
   d44d2:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
   d44d4:	2302      	movs	r3, #2
   d44d6:	7800      	ldrb	r0, [r0, #0]
   d44d8:	9100      	str	r1, [sp, #0]
   d44da:	2204      	movs	r2, #4
   d44dc:	211b      	movs	r1, #27
   d44de:	f7ff ffcd 	bl	d447c <_ZN6I2Cdev9writeBitsEhhhhh>
}
   d44e2:	b003      	add	sp, #12
   d44e4:	f85d fb04 	ldr.w	pc, [sp], #4

000d44e8 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
   d44e8:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
   d44ea:	2302      	movs	r3, #2
   d44ec:	7800      	ldrb	r0, [r0, #0]
   d44ee:	9100      	str	r1, [sp, #0]
   d44f0:	2204      	movs	r2, #4
   d44f2:	211c      	movs	r1, #28
   d44f4:	f7ff ffc2 	bl	d447c <_ZN6I2Cdev9writeBitsEhhhhh>
}
   d44f8:	b003      	add	sp, #12
   d44fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4500 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>:
 * @param gz 16-bit signed integer container for gyroscope Z-axis value
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d4500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4502:	4616      	mov	r6, r2
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d4504:	4a17      	ldr	r2, [pc, #92]	; (d4564 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_+0x64>)
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d4506:	461d      	mov	r5, r3
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d4508:	4603      	mov	r3, r0
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d450a:	4604      	mov	r4, r0
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d450c:	8812      	ldrh	r2, [r2, #0]
   d450e:	f813 0b01 	ldrb.w	r0, [r3], #1
   d4512:	9200      	str	r2, [sp, #0]
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d4514:	460f      	mov	r7, r1
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d4516:	220e      	movs	r2, #14
   d4518:	213b      	movs	r1, #59	; 0x3b
   d451a:	f7ff fed9 	bl	d42d0 <_ZN6I2Cdev9readBytesEhhhPht>
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
   d451e:	7862      	ldrb	r2, [r4, #1]
   d4520:	78a3      	ldrb	r3, [r4, #2]
   d4522:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4526:	803b      	strh	r3, [r7, #0]
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
   d4528:	78e2      	ldrb	r2, [r4, #3]
   d452a:	7923      	ldrb	r3, [r4, #4]
   d452c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4530:	8033      	strh	r3, [r6, #0]
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
   d4532:	7962      	ldrb	r2, [r4, #5]
   d4534:	79a3      	ldrb	r3, [r4, #6]
   d4536:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d453a:	802b      	strh	r3, [r5, #0]
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
   d453c:	7a62      	ldrb	r2, [r4, #9]
   d453e:	7aa3      	ldrb	r3, [r4, #10]
   d4540:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4544:	9a08      	ldr	r2, [sp, #32]
   d4546:	8013      	strh	r3, [r2, #0]
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
   d4548:	7ae2      	ldrb	r2, [r4, #11]
   d454a:	7b23      	ldrb	r3, [r4, #12]
   d454c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4550:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d4552:	8013      	strh	r3, [r2, #0]
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
   d4554:	7b62      	ldrb	r2, [r4, #13]
   d4556:	7ba3      	ldrb	r3, [r4, #14]
   d4558:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d455c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d455e:	8013      	strh	r3, [r2, #0]
}
   d4560:	b003      	add	sp, #12
   d4562:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4564:	2003e49c 	.word	0x2003e49c

000d4568 <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
   d4568:	460b      	mov	r3, r1
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
   d456a:	7800      	ldrb	r0, [r0, #0]
   d456c:	2206      	movs	r2, #6
   d456e:	216b      	movs	r1, #107	; 0x6b
   d4570:	f7ff bf60 	b.w	d4434 <_ZN6I2Cdev8writeBitEhhhh>

000d4574 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
   d4574:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
   d4576:	2303      	movs	r3, #3
   d4578:	7800      	ldrb	r0, [r0, #0]
   d457a:	9100      	str	r1, [sp, #0]
   d457c:	2202      	movs	r2, #2
   d457e:	216b      	movs	r1, #107	; 0x6b
   d4580:	f7ff ff7c 	bl	d447c <_ZN6I2Cdev9writeBitsEhhhhh>
}
   d4584:	b003      	add	sp, #12
   d4586:	f85d fb04 	ldr.w	pc, [sp], #4

000d458a <_ZN7MPU605010initializeEv>:
void MPU6050::initialize() {
   d458a:	b510      	push	{r4, lr}
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
   d458c:	2101      	movs	r1, #1
void MPU6050::initialize() {
   d458e:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
   d4590:	f7ff fff0 	bl	d4574 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
   d4594:	4620      	mov	r0, r4
   d4596:	2100      	movs	r1, #0
   d4598:	f7ff ff9b 	bl	d44d2 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
   d459c:	4620      	mov	r0, r4
   d459e:	2100      	movs	r1, #0
   d45a0:	f7ff ffa2 	bl	d44e8 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
   d45a4:	4620      	mov	r0, r4
   d45a6:	2100      	movs	r1, #0
}
   d45a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
   d45ac:	f7ff bfdc 	b.w	d4568 <_ZN7MPU605015setSleepEnabledEb>

000d45b0 <_ZN7MPU605011getDeviceIDEv>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
   d45b0:	b513      	push	{r0, r1, r4, lr}
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
   d45b2:	4603      	mov	r3, r0
   d45b4:	4a07      	ldr	r2, [pc, #28]	; (d45d4 <_ZN7MPU605011getDeviceIDEv+0x24>)
uint8_t MPU6050::getDeviceID() {
   d45b6:	4604      	mov	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
   d45b8:	8812      	ldrh	r2, [r2, #0]
   d45ba:	f813 0b01 	ldrb.w	r0, [r3], #1
   d45be:	e9cd 3200 	strd	r3, r2, [sp]
   d45c2:	2306      	movs	r3, #6
   d45c4:	461a      	mov	r2, r3
   d45c6:	2175      	movs	r1, #117	; 0x75
   d45c8:	f7ff feec 	bl	d43a4 <_ZN6I2Cdev8readBitsEhhhhPht>
    return buffer[0];
}
   d45cc:	7860      	ldrb	r0, [r4, #1]
   d45ce:	b002      	add	sp, #8
   d45d0:	bd10      	pop	{r4, pc}
   d45d2:	bf00      	nop
   d45d4:	2003e49c 	.word	0x2003e49c

000d45d8 <_ZN7MPU605014testConnectionEv>:
bool MPU6050::testConnection() {
   d45d8:	b508      	push	{r3, lr}
    return getDeviceID() == 0x34;
   d45da:	f7ff ffe9 	bl	d45b0 <_ZN7MPU605011getDeviceIDEv>
}
   d45de:	f1a0 0334 	sub.w	r3, r0, #52	; 0x34
   d45e2:	4258      	negs	r0, r3
   d45e4:	4158      	adcs	r0, r3
   d45e6:	bd08      	pop	{r3, pc}

000d45e8 <_ZN10OSCMessage12setupMessageEv>:
    outputAddress = address;
}

void OSCMessage::setupMessage()
{
    incomingBuffer = NULL;
   d45e8:	2300      	movs	r3, #0
    inputDatas = NULL;
    incomingBufferSize = 0;
    
    outputDatas = NULL;
    outputDatasSize = 0;
   d45ea:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
    incomingBuffer = NULL;
   d45ee:	6003      	str	r3, [r0, #0]
    inputDatas = NULL;
   d45f0:	6283      	str	r3, [r0, #40]	; 0x28
    incomingBufferSize = 0;
   d45f2:	6043      	str	r3, [r0, #4]
}
   d45f4:	4770      	bx	lr
	...

000d45f8 <_ZN10OSCMessageC1EPKc>:
OSCMessage::OSCMessage(const char * address)
   d45f8:	b570      	push	{r4, r5, r6, lr}
   d45fa:	4604      	mov	r4, r0
   d45fc:	460d      	mov	r5, r1
   d45fe:	3008      	adds	r0, #8
   d4600:	490d      	ldr	r1, [pc, #52]	; (d4638 <_ZN10OSCMessageC1EPKc+0x40>)
   d4602:	f000 fdf6 	bl	d51f2 <_ZN6StringC1EPKc>
   d4606:	f104 062c 	add.w	r6, r4, #44	; 0x2c
   d460a:	490b      	ldr	r1, [pc, #44]	; (d4638 <_ZN10OSCMessageC1EPKc+0x40>)
   d460c:	f104 0018 	add.w	r0, r4, #24
   d4610:	f000 fdef 	bl	d51f2 <_ZN6StringC1EPKc>
   d4614:	4908      	ldr	r1, [pc, #32]	; (d4638 <_ZN10OSCMessageC1EPKc+0x40>)
   d4616:	4630      	mov	r0, r6
   d4618:	f000 fdeb 	bl	d51f2 <_ZN6StringC1EPKc>
   d461c:	4906      	ldr	r1, [pc, #24]	; (d4638 <_ZN10OSCMessageC1EPKc+0x40>)
   d461e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4622:	f000 fde6 	bl	d51f2 <_ZN6StringC1EPKc>
    setupMessage();
   d4626:	4620      	mov	r0, r4
   d4628:	f7ff ffde 	bl	d45e8 <_ZN10OSCMessage12setupMessageEv>
    outputAddress = address;
   d462c:	4629      	mov	r1, r5
   d462e:	4630      	mov	r0, r6
   d4630:	f000 fdf3 	bl	d521a <_ZN6StringaSEPKc>
}
   d4634:	4620      	mov	r0, r4
   d4636:	bd70      	pop	{r4, r5, r6, pc}
   d4638:	000d67df 	.word	0x000d67df

000d463c <_ZN10OSCMessageD1Ev>:

//DESTRUCTOR
OSCMessage::~OSCMessage()
   d463c:	b510      	push	{r4, lr}
   d463e:	4604      	mov	r4, r0
{
    free(incomingBuffer);
   d4640:	6800      	ldr	r0, [r0, #0]
   d4642:	f000 faed 	bl	d4c20 <free>
    free(inputDatas);
   d4646:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4648:	f000 faea 	bl	d4c20 <free>
    free(outputDatas);
   d464c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d464e:	f000 fae7 	bl	d4c20 <free>
OSCMessage::~OSCMessage()
   d4652:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4656:	f000 fd81 	bl	d515c <_ZN6StringD1Ev>
   d465a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d465e:	f000 fd7d 	bl	d515c <_ZN6StringD1Ev>
   d4662:	f104 0018 	add.w	r0, r4, #24
   d4666:	f000 fd79 	bl	d515c <_ZN6StringD1Ev>
   d466a:	f104 0008 	add.w	r0, r4, #8
   d466e:	f000 fd75 	bl	d515c <_ZN6StringD1Ev>
}
   d4672:	4620      	mov	r0, r4
   d4674:	bd10      	pop	{r4, pc}

000d4676 <_ZN10OSCMessage8addFloatEf>:
        outputTypes.concat('i');
    }
}

void OSCMessage::addFloat(float value)
{
   d4676:	b538      	push	{r3, r4, r5, lr}
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d4678:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
   d467a:	4604      	mov	r4, r0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d467c:	3104      	adds	r1, #4
   d467e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
   d4680:	ee10 5a10 	vmov	r5, s0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d4684:	f000 fad4 	bl	d4c30 <realloc>
   d4688:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (outputDatas != NULL)
   d468a:	b1e8      	cbz	r0, d46c8 <_ZN10OSCMessage8addFloatEf+0x52>
        union {
            float f;
            char b[4];
        } u;
        u.f = value;
        outputDatas[outputDatasSize] = u.b[3];
   d468c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d468e:	f3c5 6107 	ubfx	r1, r5, #24, #8
   d4692:	5481      	strb	r1, [r0, r2]
        outputDatas[outputDatasSize+1] = u.b[2];
   d4694:	e9d4 2113 	ldrd	r2, r1, [r4, #76]	; 0x4c
   d4698:	440a      	add	r2, r1
   d469a:	f3c5 4107 	ubfx	r1, r5, #16, #8
   d469e:	7051      	strb	r1, [r2, #1]
        outputDatas[outputDatasSize+2] = u.b[1];
   d46a0:	e9d4 2113 	ldrd	r2, r1, [r4, #76]	; 0x4c
   d46a4:	440a      	add	r2, r1
   d46a6:	f3c5 2107 	ubfx	r1, r5, #8, #8
   d46aa:	7091      	strb	r1, [r2, #2]
        outputDatas[outputDatasSize+3] = u.b[0];
   d46ac:	e9d4 2113 	ldrd	r2, r1, [r4, #76]	; 0x4c
   d46b0:	440a      	add	r2, r1
        outputDatasSize += 4;
        outputTypes.concat('f');
   d46b2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        outputDatas[outputDatasSize+3] = u.b[0];
   d46b6:	70d5      	strb	r5, [r2, #3]
        outputDatasSize += 4;
   d46b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d46ba:	3304      	adds	r3, #4
   d46bc:	6523      	str	r3, [r4, #80]	; 0x50
        outputTypes.concat('f');
   d46be:	2166      	movs	r1, #102	; 0x66
    }
}
   d46c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        outputTypes.concat('f');
   d46c4:	f000 bdd2 	b.w	d526c <_ZN6String6concatEc>
}
   d46c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d46cc <_ZN10OSCMessage4sendER3UDP9IPAddressj>:
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
   d46cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d46d0:	b08b      	sub	sp, #44	; 0x2c
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	String & operator = (String &&rval);
	String & operator = (StringSumHelper &&rval);
	#endif

        operator const char*() const { return c_str(); }
   d46d2:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
   d46d6:	af00      	add	r7, sp, #0
   d46d8:	4680      	mov	r8, r0
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d46da:	4648      	mov	r0, r9
{
   d46dc:	460d      	mov	r5, r1
   d46de:	e9c7 3202 	strd	r3, r2, [r7, #8]
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d46e2:	f001 ffdb 	bl	d669c <strlen>
   d46e6:	4606      	mov	r6, r0
   d46e8:	3003      	adds	r0, #3
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
   d46ea:	0880      	lsrs	r0, r0, #2
   d46ec:	f001 fc8a 	bl	d6004 <__aeabi_ui2d>
   d46f0:	4b3f      	ldr	r3, [pc, #252]	; (d47f0 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x124>)
   d46f2:	2200      	movs	r2, #0
   d46f4:	f001 fb4a 	bl	d5d8c <__adddf3>
   d46f8:	f001 ff10 	bl	d651c <__aeabi_d2iz>
   d46fc:	f8d8 a03c 	ldr.w	sl, [r8, #60]	; 0x3c
    int addresszeroCount = addressBitCount-strlen(outputAddress);
   d4700:	ebc6 0680 	rsb	r6, r6, r0, lsl #2
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d4704:	0084      	lsls	r4, r0, #2
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
   d4706:	4650      	mov	r0, sl
   d4708:	f001 ffc8 	bl	d669c <strlen>
    int outputBufferSize = addressBitCount+1;//address+padding+comma
   d470c:	3401      	adds	r4, #1
    outputBufferSize += strlen(outputTypes);
   d470e:	4683      	mov	fp, r0
   d4710:	4404      	add	r4, r0
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
   d4712:	3001      	adds	r0, #1
   d4714:	0880      	lsrs	r0, r0, #2
   d4716:	f001 fc75 	bl	d6004 <__aeabi_ui2d>
   d471a:	4b35      	ldr	r3, [pc, #212]	; (d47f0 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x124>)
   d471c:	2200      	movs	r2, #0
   d471e:	f001 fb35 	bl	d5d8c <__adddf3>
   d4722:	f001 fefb 	bl	d651c <__aeabi_d2iz>
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
   d4726:	f1cb 0303 	rsb	r3, fp, #3
   d472a:	eb03 0b80 	add.w	fp, r3, r0, lsl #2
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
    outputBufferSize += outputDatasSize;
   d472e:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
   d4732:	603b      	str	r3, [r7, #0]
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
   d4734:	445c      	add	r4, fp
    outputBufferSize += outputDatasSize;
   d4736:	441c      	add	r4, r3
    //Serial.print ("bufferSize : ");  Serial.println(outputBufferSize);
    uint8_t nullChar = '\0';
    
    char outputBuffer[outputBufferSize];
   d4738:	1de2      	adds	r2, r4, #7
   d473a:	f022 0207 	bic.w	r2, r2, #7
   d473e:	ebad 0d02 	sub.w	sp, sp, r2
    memset(outputBuffer,nullChar,outputBufferSize);
   d4742:	2100      	movs	r1, #0
   d4744:	4622      	mov	r2, r4
   d4746:	4668      	mov	r0, sp
   d4748:	f001 ff74 	bl	d6634 <memset>
    memcpy(&outputBuffer[0],outputAddress,strlen(outputAddress));
   d474c:	4648      	mov	r0, r9
   d474e:	f001 ffa5 	bl	d669c <strlen>
   d4752:	4649      	mov	r1, r9
   d4754:	4602      	mov	r2, r0
   d4756:	4668      	mov	r0, sp
   d4758:	f001 ff5e 	bl	d6618 <memcpy>
    outputBuffer[strlen(outputAddress)+addresszeroCount] = ',';
   d475c:	4648      	mov	r0, r9
   d475e:	f001 ff9d 	bl	d669c <strlen>
   d4762:	eb0d 0206 	add.w	r2, sp, r6
   d4766:	212c      	movs	r1, #44	; 0x2c
   d4768:	5411      	strb	r1, [r2, r0]
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1],outputTypes,strlen(outputTypes));
   d476a:	4648      	mov	r0, r9
   d476c:	f001 ff96 	bl	d669c <strlen>
   d4770:	6078      	str	r0, [r7, #4]
   d4772:	4650      	mov	r0, sl
   d4774:	f001 ff92 	bl	d669c <strlen>
   d4778:	6879      	ldr	r1, [r7, #4]
   d477a:	3101      	adds	r1, #1
   d477c:	4602      	mov	r2, r0
   d477e:	1988      	adds	r0, r1, r6
   d4780:	4468      	add	r0, sp
   d4782:	4651      	mov	r1, sl
   d4784:	f001 ff48 	bl	d6618 <memcpy>
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1+strlen(outputTypes)+outputTypesZerosCount],outputDatas,outputDatasSize);
   d4788:	4648      	mov	r0, r9
   d478a:	f001 ff87 	bl	d669c <strlen>
   d478e:	4681      	mov	r9, r0
   d4790:	4650      	mov	r0, sl
   d4792:	f001 ff83 	bl	d669c <strlen>
   d4796:	4448      	add	r0, r9
   d4798:	3001      	adds	r0, #1
   d479a:	683b      	ldr	r3, [r7, #0]
   d479c:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
   d47a0:	4430      	add	r0, r6
   d47a2:	4458      	add	r0, fp
   d47a4:	461a      	mov	r2, r3
   d47a6:	4468      	add	r0, sp
   d47a8:	f001 ff36 	bl	d6618 <memcpy>
    
    udp.beginPacket(remoteIP,outPort);
   d47ac:	682b      	ldr	r3, [r5, #0]
   d47ae:	68fe      	ldr	r6, [r7, #12]
   d47b0:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d47b4:	4b0f      	ldr	r3, [pc, #60]	; (d47f4 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
   d47b6:	613b      	str	r3, [r7, #16]
   d47b8:	3604      	adds	r6, #4
   d47ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d47bc:	f107 0c14 	add.w	ip, r7, #20
   d47c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d47c4:	6833      	ldr	r3, [r6, #0]
   d47c6:	f88c 3000 	strb.w	r3, [ip]
   d47ca:	893a      	ldrh	r2, [r7, #8]
   d47cc:	f107 0110 	add.w	r1, r7, #16
   d47d0:	4628      	mov	r0, r5
   d47d2:	47c0      	blx	r8
    udp.write((uint8_t *)&outputBuffer,outputBufferSize);
   d47d4:	682b      	ldr	r3, [r5, #0]
   d47d6:	4622      	mov	r2, r4
   d47d8:	4669      	mov	r1, sp
   d47da:	68db      	ldr	r3, [r3, #12]
   d47dc:	4628      	mov	r0, r5
   d47de:	4798      	blx	r3
    udp.endPacket();
   d47e0:	682b      	ldr	r3, [r5, #0]
   d47e2:	4628      	mov	r0, r5
   d47e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d47e6:	4798      	blx	r3
}
   d47e8:	372c      	adds	r7, #44	; 0x2c
   d47ea:	46bd      	mov	sp, r7
   d47ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d47f0:	3fe00000 	.word	0x3fe00000
   d47f4:	000d6884 	.word	0x000d6884

000d47f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <os_mutex_recursive_create+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030248 	.word	0x00030248

000d4808 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <HAL_RNG_GetRandomNumber+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	685b      	ldr	r3, [r3, #4]
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030218 	.word	0x00030218

000d4818 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	695b      	ldr	r3, [r3, #20]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030218 	.word	0x00030218

000d4828 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <HAL_Pin_Mode+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	689b      	ldr	r3, [r3, #8]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	0003022c 	.word	0x0003022c

000d4838 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <HAL_Get_Pin_Mode+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	68db      	ldr	r3, [r3, #12]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	0003022c 	.word	0x0003022c

000d4848 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <HAL_GPIO_Write+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	691b      	ldr	r3, [r3, #16]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	0003022c 	.word	0x0003022c

000d4858 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <hal_i2c_begin+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	68db      	ldr	r3, [r3, #12]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	00030228 	.word	0x00030228

000d4868 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <hal_i2c_begin_transmission+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	699b      	ldr	r3, [r3, #24]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	00030228 	.word	0x00030228

000d4878 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <hal_i2c_end_transmission+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	69db      	ldr	r3, [r3, #28]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	00030228 	.word	0x00030228

000d4888 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <hal_i2c_write+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	6a1b      	ldr	r3, [r3, #32]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	00030228 	.word	0x00030228

000d4898 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <hal_i2c_available+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030228 	.word	0x00030228

000d48a8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <hal_i2c_read+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030228 	.word	0x00030228

000d48b8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <hal_i2c_peek+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030228 	.word	0x00030228

000d48c8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <hal_i2c_flush+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030228 	.word	0x00030228

000d48d8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <hal_i2c_is_enabled+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030228 	.word	0x00030228

000d48e8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <hal_i2c_init+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030228 	.word	0x00030228

000d48f8 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <hal_i2c_request_ex+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030228 	.word	0x00030228

000d4908 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <if_index_to_name+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	695b      	ldr	r3, [r3, #20]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	0003026c 	.word	0x0003026c

000d4918 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <inet_inet_ntop+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	695b      	ldr	r3, [r3, #20]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030264 	.word	0x00030264

000d4928 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <inet_htonl+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6a1b      	ldr	r3, [r3, #32]
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030264 	.word	0x00030264

000d4938 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <inet_ntohs+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030264 	.word	0x00030264

000d4948 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <inet_htons+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030264 	.word	0x00030264

000d4958 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <netdb_freeaddrinfo+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	689b      	ldr	r3, [r3, #8]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030268 	.word	0x00030268

000d4968 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <netdb_getaddrinfo+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	68db      	ldr	r3, [r3, #12]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030268 	.word	0x00030268

000d4978 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <sock_bind+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	685b      	ldr	r3, [r3, #4]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030238 	.word	0x00030238

000d4988 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <sock_setsockopt+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	699b      	ldr	r3, [r3, #24]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	00030238 	.word	0x00030238

000d4998 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <sock_close+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	69db      	ldr	r3, [r3, #28]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	00030238 	.word	0x00030238

000d49a8 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <sock_recvfrom+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	00030238 	.word	0x00030238

000d49b8 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <sock_sendto+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	00030238 	.word	0x00030238

000d49c8 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <sock_socket+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	00030238 	.word	0x00030238

000d49d8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <hal_spi_init+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	69db      	ldr	r3, [r3, #28]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	00030230 	.word	0x00030230

000d49e8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <hal_spi_is_enabled+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	6a1b      	ldr	r3, [r3, #32]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	00030230 	.word	0x00030230

000d49f8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <hal_usart_init+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	681b      	ldr	r3, [r3, #0]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	0003023c 	.word	0x0003023c

000d4a08 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <hal_usart_write+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	68db      	ldr	r3, [r3, #12]
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	0003023c 	.word	0x0003023c

000d4a18 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <hal_usart_available+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	691b      	ldr	r3, [r3, #16]
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	0003023c 	.word	0x0003023c

000d4a28 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <hal_usart_read+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	695b      	ldr	r3, [r3, #20]
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	0003023c 	.word	0x0003023c

000d4a38 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <hal_usart_peek+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	699b      	ldr	r3, [r3, #24]
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	0003023c 	.word	0x0003023c

000d4a48 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <hal_usart_flush+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	69db      	ldr	r3, [r3, #28]
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	0003023c 	.word	0x0003023c

000d4a58 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <hal_usart_is_enabled+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	6a1b      	ldr	r3, [r3, #32]
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	0003023c 	.word	0x0003023c

000d4a68 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <hal_usart_available_data_for_write+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	0003023c 	.word	0x0003023c

000d4a78 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <HAL_USB_USART_Init+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	681b      	ldr	r3, [r3, #0]
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	0003024c 	.word	0x0003024c

000d4a88 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <HAL_USB_USART_Begin+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	685b      	ldr	r3, [r3, #4]
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	0003024c 	.word	0x0003024c

000d4a98 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <HAL_USB_USART_Available_Data+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	691b      	ldr	r3, [r3, #16]
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	0003024c 	.word	0x0003024c

000d4aa8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	695b      	ldr	r3, [r3, #20]
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	0003024c 	.word	0x0003024c

000d4ab8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <HAL_USB_USART_Receive_Data+0xc>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	699b      	ldr	r3, [r3, #24]
   d4ac0:	9301      	str	r3, [sp, #4]
   d4ac2:	bd08      	pop	{r3, pc}
   d4ac4:	0003024c 	.word	0x0003024c

000d4ac8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <HAL_USB_USART_Send_Data+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	69db      	ldr	r3, [r3, #28]
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	0003024c 	.word	0x0003024c

000d4ad8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b02      	ldr	r3, [pc, #8]	; (d4ae4 <HAL_USB_USART_Flush_Data+0xc>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	6a1b      	ldr	r3, [r3, #32]
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	0003024c 	.word	0x0003024c

000d4ae8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4ae8:	b508      	push	{r3, lr}
   d4aea:	4b02      	ldr	r3, [pc, #8]	; (d4af4 <set_system_mode+0xc>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	685b      	ldr	r3, [r3, #4]
   d4af0:	9301      	str	r3, [sp, #4]
   d4af2:	bd08      	pop	{r3, pc}
   d4af4:	00030220 	.word	0x00030220

000d4af8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4af8:	b508      	push	{r3, lr}
   d4afa:	4b02      	ldr	r3, [pc, #8]	; (d4b04 <system_delay_ms+0xc>)
   d4afc:	681b      	ldr	r3, [r3, #0]
   d4afe:	695b      	ldr	r3, [r3, #20]
   d4b00:	9301      	str	r3, [sp, #4]
   d4b02:	bd08      	pop	{r3, pc}
   d4b04:	00030220 	.word	0x00030220

000d4b08 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4b08:	b508      	push	{r3, lr}
   d4b0a:	4b02      	ldr	r3, [pc, #8]	; (d4b14 <system_thread_set_state+0xc>)
   d4b0c:	681b      	ldr	r3, [r3, #0]
   d4b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b10:	9301      	str	r3, [sp, #4]
   d4b12:	bd08      	pop	{r3, pc}
   d4b14:	00030220 	.word	0x00030220

000d4b18 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b18:	b508      	push	{r3, lr}
   d4b1a:	4b03      	ldr	r3, [pc, #12]	; (d4b28 <system_ctrl_set_app_request_handler+0x10>)
   d4b1c:	681b      	ldr	r3, [r3, #0]
   d4b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b22:	9301      	str	r3, [sp, #4]
   d4b24:	bd08      	pop	{r3, pc}
   d4b26:	0000      	.short	0x0000
   d4b28:	00030220 	.word	0x00030220

000d4b2c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b03      	ldr	r3, [pc, #12]	; (d4b3c <system_ctrl_set_result+0x10>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b36:	9301      	str	r3, [sp, #4]
   d4b38:	bd08      	pop	{r3, pc}
   d4b3a:	0000      	.short	0x0000
   d4b3c:	00030220 	.word	0x00030220

000d4b40 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030244 	.word	0x00030244

000d4b50 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <network_connect+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	685b      	ldr	r3, [r3, #4]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	00030240 	.word	0x00030240

000d4b60 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <network_connecting+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	689b      	ldr	r3, [r3, #8]
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	00030240 	.word	0x00030240

000d4b70 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <network_disconnect+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	68db      	ldr	r3, [r3, #12]
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	00030240 	.word	0x00030240

000d4b80 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <network_ready+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	691b      	ldr	r3, [r3, #16]
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	00030240 	.word	0x00030240

000d4b90 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <network_on+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	695b      	ldr	r3, [r3, #20]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030240 	.word	0x00030240

000d4ba0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <network_off+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	699b      	ldr	r3, [r3, #24]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	00030240 	.word	0x00030240

000d4bb0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <network_listen+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	69db      	ldr	r3, [r3, #28]
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	00030240 	.word	0x00030240

000d4bc0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <network_listening+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	6a1b      	ldr	r3, [r3, #32]
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	00030240 	.word	0x00030240

000d4bd0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <network_set_listen_timeout+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	00030240 	.word	0x00030240

000d4be0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <network_get_listen_timeout+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	00030240 	.word	0x00030240

000d4bf0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <network_is_on+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	00030240 	.word	0x00030240

000d4c00 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <network_is_off+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	00030240 	.word	0x00030240

000d4c10 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <malloc+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	681b      	ldr	r3, [r3, #0]
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	0003021c 	.word	0x0003021c

000d4c20 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c20:	b508      	push	{r3, lr}
   d4c22:	4b02      	ldr	r3, [pc, #8]	; (d4c2c <free+0xc>)
   d4c24:	681b      	ldr	r3, [r3, #0]
   d4c26:	685b      	ldr	r3, [r3, #4]
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	0003021c 	.word	0x0003021c

000d4c30 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4c30:	b508      	push	{r3, lr}
   d4c32:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <realloc+0xc>)
   d4c34:	681b      	ldr	r3, [r3, #0]
   d4c36:	689b      	ldr	r3, [r3, #8]
   d4c38:	9301      	str	r3, [sp, #4]
   d4c3a:	bd08      	pop	{r3, pc}
   d4c3c:	0003021c 	.word	0x0003021c

000d4c40 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4c40:	b508      	push	{r3, lr}
   d4c42:	4b02      	ldr	r3, [pc, #8]	; (d4c4c <newlib_impure_ptr_callback+0xc>)
   d4c44:	681b      	ldr	r3, [r3, #0]
   d4c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	bd08      	pop	{r3, pc}
   d4c4c:	0003021c 	.word	0x0003021c

000d4c50 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4c50:	2100      	movs	r1, #0
   d4c52:	f7ff bf51 	b.w	d4af8 <system_delay_ms>
	...

000d4c58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c58:	4802      	ldr	r0, [pc, #8]	; (d4c64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4c5a:	2300      	movs	r3, #0
   d4c5c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4c5e:	f7ff bdcb 	b.w	d47f8 <os_mutex_recursive_create>
   d4c62:	bf00      	nop
   d4c64:	2003e5a8 	.word	0x2003e5a8

000d4c68 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c68:	2200      	movs	r2, #0
   d4c6a:	6840      	ldr	r0, [r0, #4]
   d4c6c:	4611      	mov	r1, r2
   d4c6e:	f7ff bfa7 	b.w	d4bc0 <network_listening>

000d4c72 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4c72:	2200      	movs	r2, #0
   d4c74:	6840      	ldr	r0, [r0, #4]
   d4c76:	4611      	mov	r1, r2
   d4c78:	f7ff bfb2 	b.w	d4be0 <network_get_listen_timeout>

000d4c7c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4c7c:	6840      	ldr	r0, [r0, #4]
   d4c7e:	2200      	movs	r2, #0
   d4c80:	f7ff bfa6 	b.w	d4bd0 <network_set_listen_timeout>

000d4c84 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c84:	6840      	ldr	r0, [r0, #4]
   d4c86:	2200      	movs	r2, #0
   d4c88:	f081 0101 	eor.w	r1, r1, #1
   d4c8c:	f7ff bf90 	b.w	d4bb0 <network_listen>

000d4c90 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4c90:	2300      	movs	r3, #0
   d4c92:	6840      	ldr	r0, [r0, #4]
   d4c94:	461a      	mov	r2, r3
   d4c96:	4619      	mov	r1, r3
   d4c98:	f7ff bf82 	b.w	d4ba0 <network_off>

000d4c9c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4c9c:	2300      	movs	r3, #0
   d4c9e:	6840      	ldr	r0, [r0, #4]
   d4ca0:	461a      	mov	r2, r3
   d4ca2:	4619      	mov	r1, r3
   d4ca4:	f7ff bf74 	b.w	d4b90 <network_on>

000d4ca8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ca8:	2200      	movs	r2, #0
   d4caa:	6840      	ldr	r0, [r0, #4]
   d4cac:	4611      	mov	r1, r2
   d4cae:	f7ff bf67 	b.w	d4b80 <network_ready>

000d4cb2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4cb2:	2200      	movs	r2, #0
   d4cb4:	6840      	ldr	r0, [r0, #4]
   d4cb6:	4611      	mov	r1, r2
   d4cb8:	f7ff bf52 	b.w	d4b60 <network_connecting>

000d4cbc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4cbc:	6840      	ldr	r0, [r0, #4]
   d4cbe:	2200      	movs	r2, #0
   d4cc0:	2102      	movs	r1, #2
   d4cc2:	f7ff bf55 	b.w	d4b70 <network_disconnect>

000d4cc6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4cc6:	2300      	movs	r3, #0
   d4cc8:	6840      	ldr	r0, [r0, #4]
   d4cca:	461a      	mov	r2, r3
   d4ccc:	f7ff bf40 	b.w	d4b50 <network_connect>

000d4cd0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4cd0:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4cd2:	2203      	movs	r2, #3
   d4cd4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4cd6:	4a02      	ldr	r2, [pc, #8]	; (d4ce0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4cd8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4cda:	4770      	bx	lr
   d4cdc:	2003e5ac 	.word	0x2003e5ac
   d4ce0:	000d6820 	.word	0x000d6820

000d4ce4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4ce4:	4770      	bx	lr

000d4ce6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ce8:	4606      	mov	r6, r0
   d4cea:	4615      	mov	r5, r2
   d4cec:	460c      	mov	r4, r1
   d4cee:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4cf0:	42bc      	cmp	r4, r7
   d4cf2:	d006      	beq.n	d4d02 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4cf4:	6833      	ldr	r3, [r6, #0]
   d4cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4cfa:	689b      	ldr	r3, [r3, #8]
   d4cfc:	4630      	mov	r0, r6
   d4cfe:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4d00:	e7f6      	b.n	d4cf0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4d02:	4628      	mov	r0, r5
   d4d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d06 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4d06:	7c00      	ldrb	r0, [r0, #16]
   d4d08:	2200      	movs	r2, #0
   d4d0a:	f7ff bdbd 	b.w	d4888 <hal_i2c_write>

000d4d0e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4d0e:	7c00      	ldrb	r0, [r0, #16]
   d4d10:	2100      	movs	r1, #0
   d4d12:	f7ff bdc1 	b.w	d4898 <hal_i2c_available>

000d4d16 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4d16:	7c00      	ldrb	r0, [r0, #16]
   d4d18:	2100      	movs	r1, #0
   d4d1a:	f7ff bdc5 	b.w	d48a8 <hal_i2c_read>

000d4d1e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4d1e:	7c00      	ldrb	r0, [r0, #16]
   d4d20:	2100      	movs	r1, #0
   d4d22:	f7ff bdc9 	b.w	d48b8 <hal_i2c_peek>

000d4d26 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4d26:	7c00      	ldrb	r0, [r0, #16]
   d4d28:	2100      	movs	r1, #0
   d4d2a:	f7ff bdcd 	b.w	d48c8 <hal_i2c_flush>

000d4d2e <_ZN7TwoWireD0Ev>:
   d4d2e:	b510      	push	{r4, lr}
   d4d30:	2114      	movs	r1, #20
   d4d32:	4604      	mov	r4, r0
   d4d34:	f001 f820 	bl	d5d78 <_ZdlPvj>
   d4d38:	4620      	mov	r0, r4
   d4d3a:	bd10      	pop	{r4, pc}

000d4d3c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4d3c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d42:	4604      	mov	r4, r0
   d4d44:	4608      	mov	r0, r1
   d4d46:	2100      	movs	r1, #0
   d4d48:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4d4c:	4b03      	ldr	r3, [pc, #12]	; (d4d5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4d4e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4d50:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4d52:	4611      	mov	r1, r2
   d4d54:	f7ff fdc8 	bl	d48e8 <hal_i2c_init>
}
   d4d58:	4620      	mov	r0, r4
   d4d5a:	bd10      	pop	{r4, pc}
   d4d5c:	000d685c 	.word	0x000d685c

000d4d60 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4d60:	2300      	movs	r3, #0
   d4d62:	7c00      	ldrb	r0, [r0, #16]
   d4d64:	461a      	mov	r2, r3
   d4d66:	4619      	mov	r1, r3
   d4d68:	f7ff bd76 	b.w	d4858 <hal_i2c_begin>

000d4d6c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d4d6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d4d6e:	2200      	movs	r2, #0
   d4d70:	2314      	movs	r3, #20
   d4d72:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d4d76:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d4d7a:	780b      	ldrb	r3, [r1, #0]
   d4d7c:	f88d 3008 	strb.w	r3, [sp, #8]
   d4d80:	684b      	ldr	r3, [r1, #4]
   d4d82:	9303      	str	r3, [sp, #12]
   d4d84:	68cb      	ldr	r3, [r1, #12]
   d4d86:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d4d88:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d4d8a:	7a0b      	ldrb	r3, [r1, #8]
   d4d8c:	9305      	str	r3, [sp, #20]
   d4d8e:	a901      	add	r1, sp, #4
   d4d90:	f7ff fdb2 	bl	d48f8 <hal_i2c_request_ex>
}
   d4d94:	b007      	add	sp, #28
   d4d96:	f85d fb04 	ldr.w	pc, [sp], #4

000d4d9a <_ZN7TwoWire11requestFromEhjh>:
{
   d4d9a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d4d9c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d4d9e:	f88d 1000 	strb.w	r1, [sp]
   d4da2:	f04f 0164 	mov.w	r1, #100	; 0x64
   d4da6:	9103      	str	r1, [sp, #12]
   d4da8:	bf18      	it	ne
   d4daa:	2301      	movne	r3, #1
   d4dac:	4669      	mov	r1, sp
    size_ = size;
   d4dae:	9201      	str	r2, [sp, #4]
   d4db0:	f88d 3008 	strb.w	r3, [sp, #8]
   d4db4:	f7ff ffda 	bl	d4d6c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d4db8:	b005      	add	sp, #20
   d4dba:	f85d fb04 	ldr.w	pc, [sp], #4

000d4dbe <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d4dbe:	2301      	movs	r3, #1
   d4dc0:	f7ff bfeb 	b.w	d4d9a <_ZN7TwoWire11requestFromEhjh>

000d4dc4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d4dc4:	7c00      	ldrb	r0, [r0, #16]
   d4dc6:	2200      	movs	r2, #0
   d4dc8:	f7ff bd4e 	b.w	d4868 <hal_i2c_begin_transmission>

000d4dcc <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d4dcc:	7c00      	ldrb	r0, [r0, #16]
   d4dce:	2200      	movs	r2, #0
   d4dd0:	f7ff bd52 	b.w	d4878 <hal_i2c_end_transmission>

000d4dd4 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d4dd4:	2101      	movs	r1, #1
   d4dd6:	f7ff bff9 	b.w	d4dcc <_ZN7TwoWire15endTransmissionEh>

000d4dda <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4dda:	4770      	bx	lr

000d4ddc <_ZN9IPAddressD0Ev>:
   d4ddc:	b510      	push	{r4, lr}
   d4dde:	2118      	movs	r1, #24
   d4de0:	4604      	mov	r4, r0
   d4de2:	f000 ffc9 	bl	d5d78 <_ZdlPvj>
   d4de6:	4620      	mov	r0, r4
   d4de8:	bd10      	pop	{r4, pc}

000d4dea <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4dea:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4dec:	7d03      	ldrb	r3, [r0, #20]
   d4dee:	2b06      	cmp	r3, #6
{
   d4df0:	b08d      	sub	sp, #52	; 0x34
   d4df2:	460e      	mov	r6, r1
   d4df4:	f100 0704 	add.w	r7, r0, #4
   d4df8:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4dfc:	d012      	beq.n	d4e24 <_ZNK9IPAddress7printToER5Print+0x3a>
   d4dfe:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4e02:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4e06:	220a      	movs	r2, #10
   d4e08:	4630      	mov	r0, r6
   d4e0a:	f000 f978 	bl	d50fe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4e0e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4e10:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4e12:	d019      	beq.n	d4e48 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4e14:	2c00      	cmp	r4, #0
   d4e16:	d0f4      	beq.n	d4e02 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4e18:	212e      	movs	r1, #46	; 0x2e
   d4e1a:	4630      	mov	r0, r6
   d4e1c:	f000 f956 	bl	d50cc <_ZN5Print5printEc>
   d4e20:	4404      	add	r4, r0
   d4e22:	e7ee      	b.n	d4e02 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e24:	232f      	movs	r3, #47	; 0x2f
   d4e26:	466a      	mov	r2, sp
   d4e28:	4639      	mov	r1, r7
   d4e2a:	200a      	movs	r0, #10
		buf[0] = 0;
   d4e2c:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e30:	f7ff fd72 	bl	d4918 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4e34:	4668      	mov	r0, sp
   d4e36:	f001 fc31 	bl	d669c <strlen>
   d4e3a:	6833      	ldr	r3, [r6, #0]
   d4e3c:	4602      	mov	r2, r0
   d4e3e:	68db      	ldr	r3, [r3, #12]
   d4e40:	4669      	mov	r1, sp
   d4e42:	4630      	mov	r0, r6
   d4e44:	4798      	blx	r3
   d4e46:	4604      	mov	r4, r0
    }
    return n;
}
   d4e48:	4620      	mov	r0, r4
   d4e4a:	b00d      	add	sp, #52	; 0x34
   d4e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4e50 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4e50:	b510      	push	{r4, lr}
   d4e52:	4b05      	ldr	r3, [pc, #20]	; (d4e68 <_ZN9IPAddressC1Ev+0x18>)
   d4e54:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4e56:	2211      	movs	r2, #17
   d4e58:	f840 3b04 	str.w	r3, [r0], #4
   d4e5c:	2100      	movs	r1, #0
   d4e5e:	f001 fbe9 	bl	d6634 <memset>
}
   d4e62:	4620      	mov	r0, r4
   d4e64:	bd10      	pop	{r4, pc}
   d4e66:	bf00      	nop
   d4e68:	000d6884 	.word	0x000d6884

000d4e6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4e6c:	4603      	mov	r3, r0
   d4e6e:	4a07      	ldr	r2, [pc, #28]	; (d4e8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4e70:	b510      	push	{r4, lr}
   d4e72:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4e76:	f101 0210 	add.w	r2, r1, #16
   d4e7a:	f851 4b04 	ldr.w	r4, [r1], #4
   d4e7e:	f843 4b04 	str.w	r4, [r3], #4
   d4e82:	4291      	cmp	r1, r2
   d4e84:	d1f9      	bne.n	d4e7a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4e86:	780a      	ldrb	r2, [r1, #0]
   d4e88:	701a      	strb	r2, [r3, #0]
}
   d4e8a:	bd10      	pop	{r4, pc}
   d4e8c:	000d6884 	.word	0x000d6884

000d4e90 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d4e90:	7d03      	ldrb	r3, [r0, #20]
   d4e92:	2b04      	cmp	r3, #4
   d4e94:	d104      	bne.n	d4ea0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d4e96:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4e98:	3800      	subs	r0, #0
   d4e9a:	bf18      	it	ne
   d4e9c:	2001      	movne	r0, #1
   d4e9e:	4770      	bx	lr
    } else if (version() == 6) {
   d4ea0:	2b06      	cmp	r3, #6
   d4ea2:	d107      	bne.n	d4eb4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4ea4:	6843      	ldr	r3, [r0, #4]
   d4ea6:	b93b      	cbnz	r3, d4eb8 <_ZNK9IPAddresscvbEv+0x28>
   d4ea8:	6883      	ldr	r3, [r0, #8]
   d4eaa:	b92b      	cbnz	r3, d4eb8 <_ZNK9IPAddresscvbEv+0x28>
   d4eac:	68c3      	ldr	r3, [r0, #12]
   d4eae:	b91b      	cbnz	r3, d4eb8 <_ZNK9IPAddresscvbEv+0x28>
   d4eb0:	6900      	ldr	r0, [r0, #16]
   d4eb2:	e7f1      	b.n	d4e98 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d4eb4:	2000      	movs	r0, #0
   d4eb6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4eb8:	2001      	movs	r0, #1
}
   d4eba:	4770      	bx	lr

000d4ebc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4ebc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4ebe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4ec2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4ec6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4eca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4ece:	2304      	movs	r3, #4
   d4ed0:	6041      	str	r1, [r0, #4]
   d4ed2:	7503      	strb	r3, [r0, #20]
}
   d4ed4:	bd10      	pop	{r4, pc}
	...

000d4ed8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d4ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4eda:	4d04      	ldr	r5, [pc, #16]	; (d4eec <_ZN9IPAddressC1Ehhhh+0x14>)
   d4edc:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d4ede:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d4ee2:	9500      	str	r5, [sp, #0]
   d4ee4:	f7ff ffea 	bl	d4ebc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4ee8:	b003      	add	sp, #12
   d4eea:	bd30      	pop	{r4, r5, pc}
   d4eec:	000d6884 	.word	0x000d6884

000d4ef0 <_ZN9IPAddressaSEPKh>:
{
   d4ef0:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4ef2:	78cb      	ldrb	r3, [r1, #3]
   d4ef4:	9300      	str	r3, [sp, #0]
   d4ef6:	788b      	ldrb	r3, [r1, #2]
   d4ef8:	784a      	ldrb	r2, [r1, #1]
   d4efa:	7809      	ldrb	r1, [r1, #0]
   d4efc:	f7ff ffde 	bl	d4ebc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4f00:	b002      	add	sp, #8
   d4f02:	bd10      	pop	{r4, pc}

000d4f04 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f04:	4b01      	ldr	r3, [pc, #4]	; (d4f0c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f06:	4a02      	ldr	r2, [pc, #8]	; (d4f10 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f08:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4f0a:	4770      	bx	lr
   d4f0c:	2003e5b4 	.word	0x2003e5b4
   d4f10:	000d6890 	.word	0x000d6890

000d4f14 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4f14:	2300      	movs	r3, #0
   d4f16:	6840      	ldr	r0, [r0, #4]
   d4f18:	461a      	mov	r2, r3
   d4f1a:	f7ff be19 	b.w	d4b50 <network_connect>

000d4f1e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4f1e:	6840      	ldr	r0, [r0, #4]
   d4f20:	2200      	movs	r2, #0
   d4f22:	2102      	movs	r1, #2
   d4f24:	f7ff be24 	b.w	d4b70 <network_disconnect>

000d4f28 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4f28:	2200      	movs	r2, #0
   d4f2a:	6840      	ldr	r0, [r0, #4]
   d4f2c:	4611      	mov	r1, r2
   d4f2e:	f7ff be17 	b.w	d4b60 <network_connecting>

000d4f32 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4f32:	2200      	movs	r2, #0
   d4f34:	6840      	ldr	r0, [r0, #4]
   d4f36:	4611      	mov	r1, r2
   d4f38:	f7ff be22 	b.w	d4b80 <network_ready>

000d4f3c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4f3c:	2300      	movs	r3, #0
   d4f3e:	6840      	ldr	r0, [r0, #4]
   d4f40:	461a      	mov	r2, r3
   d4f42:	4619      	mov	r1, r3
   d4f44:	f7ff be24 	b.w	d4b90 <network_on>

000d4f48 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4f48:	2300      	movs	r3, #0
   d4f4a:	6840      	ldr	r0, [r0, #4]
   d4f4c:	461a      	mov	r2, r3
   d4f4e:	4619      	mov	r1, r3
   d4f50:	f7ff be26 	b.w	d4ba0 <network_off>

000d4f54 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4f54:	6840      	ldr	r0, [r0, #4]
   d4f56:	2100      	movs	r1, #0
   d4f58:	f7ff be4a 	b.w	d4bf0 <network_is_on>

000d4f5c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4f5c:	6840      	ldr	r0, [r0, #4]
   d4f5e:	2100      	movs	r1, #0
   d4f60:	f7ff be4e 	b.w	d4c00 <network_is_off>

000d4f64 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4f64:	6840      	ldr	r0, [r0, #4]
   d4f66:	2200      	movs	r2, #0
   d4f68:	f081 0101 	eor.w	r1, r1, #1
   d4f6c:	f7ff be20 	b.w	d4bb0 <network_listen>

000d4f70 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4f70:	6840      	ldr	r0, [r0, #4]
   d4f72:	2200      	movs	r2, #0
   d4f74:	f7ff be2c 	b.w	d4bd0 <network_set_listen_timeout>

000d4f78 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4f78:	2200      	movs	r2, #0
   d4f7a:	6840      	ldr	r0, [r0, #4]
   d4f7c:	4611      	mov	r1, r2
   d4f7e:	f7ff be2f 	b.w	d4be0 <network_get_listen_timeout>

000d4f82 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4f82:	2200      	movs	r2, #0
   d4f84:	6840      	ldr	r0, [r0, #4]
   d4f86:	4611      	mov	r1, r2
   d4f88:	f7ff be1a 	b.w	d4bc0 <network_listening>

000d4f8c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4f90:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4f92:	b095      	sub	sp, #84	; 0x54
   d4f94:	4616      	mov	r6, r2
   d4f96:	460d      	mov	r5, r1
   d4f98:	4607      	mov	r7, r0
    IPAddress addr;
   d4f9a:	f7ff ff59 	bl	d4e50 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4f9e:	4621      	mov	r1, r4
   d4fa0:	2218      	movs	r2, #24
   d4fa2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4fa4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4fa6:	f001 fb45 	bl	d6634 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4faa:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4fac:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4fb0:	4621      	mov	r1, r4
   d4fb2:	466b      	mov	r3, sp
   d4fb4:	aa0c      	add	r2, sp, #48	; 0x30
   d4fb6:	4630      	mov	r0, r6
   d4fb8:	f7ff fcd6 	bl	d4968 <netdb_getaddrinfo>
    if (!r) {
   d4fbc:	4604      	mov	r4, r0
   d4fbe:	2800      	cmp	r0, #0
   d4fc0:	d146      	bne.n	d5050 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4fc2:	4602      	mov	r2, r0
   d4fc4:	2101      	movs	r1, #1
   d4fc6:	6868      	ldr	r0, [r5, #4]
   d4fc8:	f7ff fdda 	bl	d4b80 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4fcc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4fce:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4fd0:	4622      	mov	r2, r4
   d4fd2:	6868      	ldr	r0, [r5, #4]
   d4fd4:	f7ff fdd4 	bl	d4b80 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4fd8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4fda:	4681      	mov	r9, r0
        bool ok = false;
   d4fdc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4fde:	2e00      	cmp	r6, #0
   d4fe0:	d036      	beq.n	d5050 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4fe2:	2900      	cmp	r1, #0
   d4fe4:	d134      	bne.n	d5050 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4fe6:	6873      	ldr	r3, [r6, #4]
   d4fe8:	2b02      	cmp	r3, #2
   d4fea:	d003      	beq.n	d4ff4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4fec:	2b0a      	cmp	r3, #10
   d4fee:	d00b      	beq.n	d5008 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4ff0:	69f6      	ldr	r6, [r6, #28]
   d4ff2:	e7f4      	b.n	d4fde <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4ff4:	f1b8 0f00 	cmp.w	r8, #0
   d4ff8:	d004      	beq.n	d5004 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4ffa:	6971      	ldr	r1, [r6, #20]
   d4ffc:	4638      	mov	r0, r7
   d4ffe:	3104      	adds	r1, #4
   d5000:	f7ff ff76 	bl	d4ef0 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5004:	4641      	mov	r1, r8
   d5006:	e7f3      	b.n	d4ff0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5008:	f1b9 0f00 	cmp.w	r9, #0
   d500c:	d101      	bne.n	d5012 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d500e:	4649      	mov	r1, r9
   d5010:	e7ee      	b.n	d4ff0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5012:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5014:	2210      	movs	r2, #16
   d5016:	a801      	add	r0, sp, #4
   d5018:	f001 fb0c 	bl	d6634 <memset>
                    a.v = 6;
   d501c:	2306      	movs	r3, #6
   d501e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5022:	ad01      	add	r5, sp, #4
   d5024:	f104 0308 	add.w	r3, r4, #8
   d5028:	3418      	adds	r4, #24
   d502a:	6818      	ldr	r0, [r3, #0]
   d502c:	6859      	ldr	r1, [r3, #4]
   d502e:	462a      	mov	r2, r5
   d5030:	c203      	stmia	r2!, {r0, r1}
   d5032:	3308      	adds	r3, #8
   d5034:	42a3      	cmp	r3, r4
   d5036:	4615      	mov	r5, r2
   d5038:	d1f7      	bne.n	d502a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d503a:	a901      	add	r1, sp, #4
   d503c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d503e:	ad07      	add	r5, sp, #28
   d5040:	f7ff ff14 	bl	d4e6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5046:	1d3c      	adds	r4, r7, #4
   d5048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d504a:	682b      	ldr	r3, [r5, #0]
   d504c:	7023      	strb	r3, [r4, #0]
   d504e:	e7de      	b.n	d500e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5050:	9800      	ldr	r0, [sp, #0]
   d5052:	f7ff fc81 	bl	d4958 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5056:	4638      	mov	r0, r7
   d5058:	b015      	add	sp, #84	; 0x54
   d505a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5060 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5060:	4b02      	ldr	r3, [pc, #8]	; (d506c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5062:	4a03      	ldr	r2, [pc, #12]	; (d5070 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5064:	601a      	str	r2, [r3, #0]
   d5066:	2200      	movs	r2, #0
   d5068:	605a      	str	r2, [r3, #4]

} // spark
   d506a:	4770      	bx	lr
   d506c:	2003e5b8 	.word	0x2003e5b8
   d5070:	000d689c 	.word	0x000d689c

000d5074 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5076:	4606      	mov	r6, r0
   d5078:	460d      	mov	r5, r1
  size_t n = 0;
   d507a:	188f      	adds	r7, r1, r2
   d507c:	2400      	movs	r4, #0
  while (size--) {
   d507e:	42bd      	cmp	r5, r7
   d5080:	d00c      	beq.n	d509c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5082:	6833      	ldr	r3, [r6, #0]
   d5084:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5088:	689b      	ldr	r3, [r3, #8]
   d508a:	4630      	mov	r0, r6
   d508c:	4798      	blx	r3
     if (chunk>=0)
   d508e:	1e03      	subs	r3, r0, #0
   d5090:	db01      	blt.n	d5096 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5092:	441c      	add	r4, r3
  while (size--) {
   d5094:	e7f3      	b.n	d507e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5096:	2c00      	cmp	r4, #0
   d5098:	bf08      	it	eq
   d509a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d509c:	4620      	mov	r0, r4
   d509e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d50a0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d50a0:	b513      	push	{r0, r1, r4, lr}
   d50a2:	4604      	mov	r4, r0
    }
   d50a4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d50a6:	b159      	cbz	r1, d50c0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d50a8:	9101      	str	r1, [sp, #4]
   d50aa:	f001 faf7 	bl	d669c <strlen>
   d50ae:	6823      	ldr	r3, [r4, #0]
   d50b0:	9901      	ldr	r1, [sp, #4]
   d50b2:	68db      	ldr	r3, [r3, #12]
   d50b4:	4602      	mov	r2, r0
   d50b6:	4620      	mov	r0, r4
    }
   d50b8:	b002      	add	sp, #8
   d50ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d50be:	4718      	bx	r3
    }
   d50c0:	b002      	add	sp, #8
   d50c2:	bd10      	pop	{r4, pc}

000d50c4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d50c4:	b508      	push	{r3, lr}
  return write(str);
   d50c6:	f7ff ffeb 	bl	d50a0 <_ZN5Print5writeEPKc>
}
   d50ca:	bd08      	pop	{r3, pc}

000d50cc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d50cc:	6803      	ldr	r3, [r0, #0]
   d50ce:	689b      	ldr	r3, [r3, #8]
   d50d0:	4718      	bx	r3

000d50d2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d50d2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d50d4:	210d      	movs	r1, #13
{
   d50d6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d50d8:	f7ff fff8 	bl	d50cc <_ZN5Print5printEc>
  n += print('\n');
   d50dc:	210a      	movs	r1, #10
  size_t n = print('\r');
   d50de:	4604      	mov	r4, r0
  n += print('\n');
   d50e0:	4628      	mov	r0, r5
   d50e2:	f7ff fff3 	bl	d50cc <_ZN5Print5printEc>
  return n;
}
   d50e6:	4420      	add	r0, r4
   d50e8:	bd38      	pop	{r3, r4, r5, pc}

000d50ea <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d50ea:	b538      	push	{r3, r4, r5, lr}
   d50ec:	4605      	mov	r5, r0
  return write(str);
   d50ee:	f7ff ffd7 	bl	d50a0 <_ZN5Print5writeEPKc>
   d50f2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d50f4:	4628      	mov	r0, r5
   d50f6:	f7ff ffec 	bl	d50d2 <_ZN5Print7printlnEv>
  return n;
}
   d50fa:	4420      	add	r0, r4
   d50fc:	bd38      	pop	{r3, r4, r5, pc}

000d50fe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d50fe:	b530      	push	{r4, r5, lr}
   d5100:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5102:	2300      	movs	r3, #0
   d5104:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5108:	2a01      	cmp	r2, #1
   d510a:	bf98      	it	ls
   d510c:	220a      	movls	r2, #10
   d510e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5110:	460d      	mov	r5, r1
   d5112:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5116:	fb01 5312 	mls	r3, r1, r2, r5
   d511a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d511e:	2b09      	cmp	r3, #9
   d5120:	bf94      	ite	ls
   d5122:	3330      	addls	r3, #48	; 0x30
   d5124:	3337      	addhi	r3, #55	; 0x37
   d5126:	b2db      	uxtb	r3, r3
  } while(n);
   d5128:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d512a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d512e:	d9ef      	bls.n	d5110 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5130:	4621      	mov	r1, r4
   d5132:	f7ff ffb5 	bl	d50a0 <_ZN5Print5writeEPKc>
}
   d5136:	b00b      	add	sp, #44	; 0x2c
   d5138:	bd30      	pop	{r4, r5, pc}
	...

000d513c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d513c:	4b01      	ldr	r3, [pc, #4]	; (d5144 <_GLOBAL__sub_I_RGB+0x8>)
   d513e:	2200      	movs	r2, #0
   d5140:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d5142:	4770      	bx	lr
   d5144:	2003e5c0 	.word	0x2003e5c0

000d5148 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5148:	b510      	push	{r4, lr}
   d514a:	4604      	mov	r4, r0
   d514c:	4608      	mov	r0, r1
{
    _spi = spi;
   d514e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5150:	f7ff fc42 	bl	d49d8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5154:	2300      	movs	r3, #0
   d5156:	6063      	str	r3, [r4, #4]
}
   d5158:	4620      	mov	r0, r4
   d515a:	bd10      	pop	{r4, pc}

000d515c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d515c:	b510      	push	{r4, lr}
   d515e:	4604      	mov	r4, r0
{
	free(buffer);
   d5160:	6800      	ldr	r0, [r0, #0]
   d5162:	f7ff fd5d 	bl	d4c20 <free>
}
   d5166:	4620      	mov	r0, r4
   d5168:	bd10      	pop	{r4, pc}

000d516a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d516a:	b510      	push	{r4, lr}
   d516c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d516e:	6800      	ldr	r0, [r0, #0]
   d5170:	b108      	cbz	r0, d5176 <_ZN6String10invalidateEv+0xc>
   d5172:	f7ff fd55 	bl	d4c20 <free>
	buffer = NULL;
   d5176:	2300      	movs	r3, #0
	capacity = len = 0;
   d5178:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d517c:	6023      	str	r3, [r4, #0]
}
   d517e:	bd10      	pop	{r4, pc}

000d5180 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5180:	b538      	push	{r3, r4, r5, lr}
   d5182:	4604      	mov	r4, r0
   d5184:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5186:	6800      	ldr	r0, [r0, #0]
   d5188:	3101      	adds	r1, #1
   d518a:	f7ff fd51 	bl	d4c30 <realloc>
	if (newbuffer) {
   d518e:	b110      	cbz	r0, d5196 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5190:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5194:	2001      	movs	r0, #1
	}
	return 0;
}
   d5196:	bd38      	pop	{r3, r4, r5, pc}

000d5198 <_ZN6String7reserveEj>:
{
   d5198:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d519a:	6803      	ldr	r3, [r0, #0]
{
   d519c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d519e:	b123      	cbz	r3, d51aa <_ZN6String7reserveEj+0x12>
   d51a0:	6843      	ldr	r3, [r0, #4]
   d51a2:	428b      	cmp	r3, r1
   d51a4:	d301      	bcc.n	d51aa <_ZN6String7reserveEj+0x12>
   d51a6:	2001      	movs	r0, #1
}
   d51a8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d51aa:	4620      	mov	r0, r4
   d51ac:	f7ff ffe8 	bl	d5180 <_ZN6String12changeBufferEj>
   d51b0:	2800      	cmp	r0, #0
   d51b2:	d0f9      	beq.n	d51a8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d51b4:	68a3      	ldr	r3, [r4, #8]
   d51b6:	2b00      	cmp	r3, #0
   d51b8:	d1f5      	bne.n	d51a6 <_ZN6String7reserveEj+0xe>
   d51ba:	6822      	ldr	r2, [r4, #0]
   d51bc:	7013      	strb	r3, [r2, #0]
   d51be:	e7f2      	b.n	d51a6 <_ZN6String7reserveEj+0xe>

000d51c0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d51c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d51c2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d51c4:	4611      	mov	r1, r2
   d51c6:	9201      	str	r2, [sp, #4]
{
   d51c8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d51ca:	f7ff ffe5 	bl	d5198 <_ZN6String7reserveEj>
   d51ce:	9a01      	ldr	r2, [sp, #4]
   d51d0:	b928      	cbnz	r0, d51de <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d51d2:	4620      	mov	r0, r4
   d51d4:	f7ff ffc9 	bl	d516a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d51d8:	4620      	mov	r0, r4
   d51da:	b003      	add	sp, #12
   d51dc:	bd30      	pop	{r4, r5, pc}
	len = length;
   d51de:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d51e0:	4629      	mov	r1, r5
   d51e2:	6820      	ldr	r0, [r4, #0]
   d51e4:	f001 fa18 	bl	d6618 <memcpy>
	buffer[len] = 0;
   d51e8:	6822      	ldr	r2, [r4, #0]
   d51ea:	68a3      	ldr	r3, [r4, #8]
   d51ec:	2100      	movs	r1, #0
   d51ee:	54d1      	strb	r1, [r2, r3]
	return *this;
   d51f0:	e7f2      	b.n	d51d8 <_ZN6String4copyEPKcj+0x18>

000d51f2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d51f2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d51f4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d51f6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d51fa:	4604      	mov	r4, r0
	len = 0;
   d51fc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d51fe:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5200:	b141      	cbz	r1, d5214 <_ZN6StringC1EPKc+0x22>
   d5202:	4608      	mov	r0, r1
   d5204:	9101      	str	r1, [sp, #4]
   d5206:	f001 fa49 	bl	d669c <strlen>
   d520a:	9901      	ldr	r1, [sp, #4]
   d520c:	4602      	mov	r2, r0
   d520e:	4620      	mov	r0, r4
   d5210:	f7ff ffd6 	bl	d51c0 <_ZN6String4copyEPKcj>
}
   d5214:	4620      	mov	r0, r4
   d5216:	b002      	add	sp, #8
   d5218:	bd10      	pop	{r4, pc}

000d521a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d521a:	b513      	push	{r0, r1, r4, lr}
   d521c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d521e:	b159      	cbz	r1, d5238 <_ZN6StringaSEPKc+0x1e>
   d5220:	4608      	mov	r0, r1
   d5222:	9101      	str	r1, [sp, #4]
   d5224:	f001 fa3a 	bl	d669c <strlen>
   d5228:	9901      	ldr	r1, [sp, #4]
   d522a:	4602      	mov	r2, r0
   d522c:	4620      	mov	r0, r4
   d522e:	f7ff ffc7 	bl	d51c0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5232:	4620      	mov	r0, r4
   d5234:	b002      	add	sp, #8
   d5236:	bd10      	pop	{r4, pc}
	else invalidate();
   d5238:	f7ff ff97 	bl	d516a <_ZN6String10invalidateEv>
   d523c:	e7f9      	b.n	d5232 <_ZN6StringaSEPKc+0x18>

000d523e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d523e:	b570      	push	{r4, r5, r6, lr}
   d5240:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5242:	460e      	mov	r6, r1
   d5244:	b909      	cbnz	r1, d524a <_ZN6String6concatEPKcj+0xc>
   d5246:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5248:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d524a:	b16a      	cbz	r2, d5268 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d524c:	6884      	ldr	r4, [r0, #8]
   d524e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d5250:	4621      	mov	r1, r4
   d5252:	f7ff ffa1 	bl	d5198 <_ZN6String7reserveEj>
   d5256:	2800      	cmp	r0, #0
   d5258:	d0f5      	beq.n	d5246 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d525a:	6828      	ldr	r0, [r5, #0]
   d525c:	68ab      	ldr	r3, [r5, #8]
   d525e:	4631      	mov	r1, r6
   d5260:	4418      	add	r0, r3
   d5262:	f001 fa13 	bl	d668c <strcpy>
	len = newlen;
   d5266:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d5268:	2001      	movs	r0, #1
   d526a:	e7ed      	b.n	d5248 <_ZN6String6concatEPKcj+0xa>

000d526c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d526c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d526e:	2300      	movs	r3, #0
	buf[0] = c;
   d5270:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d5274:	2201      	movs	r2, #1
   d5276:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d5278:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d527c:	f7ff ffdf 	bl	d523e <_ZN6String6concatEPKcj>
}
   d5280:	b003      	add	sp, #12
   d5282:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5288 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5288:	4b05      	ldr	r3, [pc, #20]	; (d52a0 <_GLOBAL__sub_I_System+0x18>)
   d528a:	2202      	movs	r2, #2
   d528c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d528e:	4b05      	ldr	r3, [pc, #20]	; (d52a4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d5290:	4a05      	ldr	r2, [pc, #20]	; (d52a8 <_GLOBAL__sub_I_System+0x20>)
   d5292:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5294:	2000      	movs	r0, #0
   d5296:	6018      	str	r0, [r3, #0]
   d5298:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d529a:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d529c:	f7ff bc24 	b.w	d4ae8 <set_system_mode>
   d52a0:	2003e5dc 	.word	0x2003e5dc
   d52a4:	2003e5d0 	.word	0x2003e5d0
   d52a8:	ffff0000 	.word	0xffff0000

000d52ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d52ac:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d52ae:	681a      	ldr	r2, [r3, #0]
   d52b0:	4b02      	ldr	r3, [pc, #8]	; (d52bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d52b2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d52b4:	4770      	bx	lr
   d52b6:	bf00      	nop
   d52b8:	2003e4a0 	.word	0x2003e4a0
   d52bc:	2003e5e0 	.word	0x2003e5e0

000d52c0 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d52c0:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d52c2:	6804      	ldr	r4, [r0, #0]
   d52c4:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d52c6:	46a4      	mov	ip, r4
    }
   d52c8:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d52cc:	4760      	bx	ip

000d52ce <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d52ce:	6803      	ldr	r3, [r0, #0]
   d52d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d52d2:	4718      	bx	r3

000d52d4 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d52d4:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d52d6:	4770      	bx	lr

000d52d8 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d52d8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d52da:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d52dc:	1a10      	subs	r0, r2, r0
   d52de:	4770      	bx	lr

000d52e0 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d52e0:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   d52e2:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   d52e4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   d52e8:	68db      	ldr	r3, [r3, #12]
   d52ea:	2201      	movs	r2, #1
   d52ec:	f10d 0107 	add.w	r1, sp, #7
   d52f0:	4798      	blx	r3
}
   d52f2:	b003      	add	sp, #12
   d52f4:	f85d fb04 	ldr.w	pc, [sp], #4

000d52f8 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d52f8:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d52fa:	6803      	ldr	r3, [r0, #0]
   d52fc:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   d52fe:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d5300:	4798      	blx	r3
   d5302:	b128      	cbz	r0, d5310 <_ZN3UDP4readEv+0x18>
   d5304:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5306:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5308:	1c59      	adds	r1, r3, #1
   d530a:	86e1      	strh	r1, [r4, #54]	; 0x36
   d530c:	5cd0      	ldrb	r0, [r2, r3]
}
   d530e:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   d5310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5314:	e7fb      	b.n	d530e <_ZN3UDP4readEv+0x16>

000d5316 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5316:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d5318:	6803      	ldr	r3, [r0, #0]
   d531a:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   d531c:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d531e:	4798      	blx	r3
   d5320:	b118      	cbz	r0, d532a <_ZN3UDP4peekEv+0x14>
   d5322:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5324:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5326:	5cd0      	ldrb	r0, [r2, r3]
}
   d5328:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   d532a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d532e:	e7fb      	b.n	d5328 <_ZN3UDP4peekEv+0x12>

000d5330 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   d5330:	4770      	bx	lr

000d5332 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d5332:	b410      	push	{r4}
   d5334:	4603      	mov	r3, r0
   d5336:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5338:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   d533a:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   d533c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   d533e:	6803      	ldr	r3, [r0, #0]
   d5340:	1a52      	subs	r2, r2, r1
   d5342:	68db      	ldr	r3, [r3, #12]
   d5344:	4421      	add	r1, r4
}
   d5346:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   d534a:	4718      	bx	r3

000d534c <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d534c:	f1a0 0010 	sub.w	r0, r0, #16
   d5350:	f7ff bfef 	b.w	d5332 <_ZNK3UDP7printToER5Print>

000d5354 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5354:	b570      	push	{r4, r5, r6, lr}
    stop();
   d5356:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5358:	b08c      	sub	sp, #48	; 0x30
    stop();
   d535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d535c:	4604      	mov	r4, r0
   d535e:	460e      	mov	r6, r1
   d5360:	4615      	mov	r5, r2
    stop();
   d5362:	4798      	blx	r3
    const int one = 1;
   d5364:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   d5366:	221c      	movs	r2, #28
   d5368:	2100      	movs	r1, #0
   d536a:	a805      	add	r0, sp, #20
    const int one = 1;
   d536c:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   d536e:	f001 f961 	bl	d6634 <memset>
    saddr.sin6_len = sizeof(saddr);
   d5372:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   d5376:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   d5378:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   d537c:	f7ff fae4 	bl	d4948 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5380:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   d5382:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5386:	2102      	movs	r1, #2
   d5388:	200a      	movs	r0, #10
   d538a:	f7ff fb1d 	bl	d49c8 <sock_socket>
    if (_sock < 0) {
   d538e:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5390:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   d5392:	db25      	blt.n	d53e0 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d5394:	2204      	movs	r2, #4
   d5396:	9200      	str	r2, [sp, #0]
   d5398:	ab02      	add	r3, sp, #8
   d539a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d539e:	f7ff faf3 	bl	d4988 <sock_setsockopt>
   d53a2:	b9e8      	cbnz	r0, d53e0 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   d53a4:	b195      	cbz	r5, d53cc <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   d53a6:	9003      	str	r0, [sp, #12]
   d53a8:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d53ac:	a903      	add	r1, sp, #12
   d53ae:	b2e8      	uxtb	r0, r5
   d53b0:	f7ff faaa 	bl	d4908 <if_index_to_name>
   d53b4:	b9a0      	cbnz	r0, d53e0 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d53b6:	2306      	movs	r3, #6
   d53b8:	9300      	str	r3, [sp, #0]
   d53ba:	6960      	ldr	r0, [r4, #20]
   d53bc:	ab03      	add	r3, sp, #12
   d53be:	f241 020b 	movw	r2, #4107	; 0x100b
   d53c2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d53c6:	f7ff fadf 	bl	d4988 <sock_setsockopt>
   d53ca:	b948      	cbnz	r0, d53e0 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d53cc:	6960      	ldr	r0, [r4, #20]
   d53ce:	221c      	movs	r2, #28
   d53d0:	a905      	add	r1, sp, #20
   d53d2:	f7ff fad1 	bl	d4978 <sock_bind>
   d53d6:	b918      	cbnz	r0, d53e0 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   d53d8:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   d53da:	2001      	movs	r0, #1
}
   d53dc:	b00c      	add	sp, #48	; 0x30
   d53de:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   d53e0:	6823      	ldr	r3, [r4, #0]
   d53e2:	4620      	mov	r0, r4
   d53e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d53e6:	4798      	blx	r3
   d53e8:	2000      	movs	r0, #0
   d53ea:	e7f7      	b.n	d53dc <_ZN3UDP5beginEtm+0x88>

000d53ec <_ZN3UDP4stopEv>:
void UDP::stop() {
   d53ec:	b510      	push	{r4, lr}
   d53ee:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d53f0:	6940      	ldr	r0, [r0, #20]
   d53f2:	2800      	cmp	r0, #0
   d53f4:	db01      	blt.n	d53fa <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d53f6:	f7ff facf 	bl	d4998 <sock_close>
    _sock = -1;
   d53fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d53fe:	6163      	str	r3, [r4, #20]
    _offset = 0;
   d5400:	2300      	movs	r3, #0
   d5402:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5404:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d5406:	bd10      	pop	{r4, pc}

000d5408 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   d5408:	b570      	push	{r4, r5, r6, lr}
   d540a:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d540c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d540e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   d5410:	b168      	cbz	r0, d542e <_ZN3UDP5writeEPKhj+0x26>
   d5412:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d5414:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   d5416:	4294      	cmp	r4, r2
   d5418:	bf28      	it	cs
   d541a:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   d541c:	4622      	mov	r2, r4
   d541e:	4430      	add	r0, r6
   d5420:	f001 f8fa 	bl	d6618 <memcpy>
    _offset += size;
   d5424:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d5426:	4423      	add	r3, r4
   d5428:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   d542a:	4620      	mov	r0, r4
   d542c:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d542e:	4604      	mov	r4, r0
   d5430:	e7f1      	b.n	d5416 <_ZN3UDP5writeEPKhj+0xe>

000d5432 <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   d5432:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   d5434:	6803      	ldr	r3, [r0, #0]
   d5436:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   d5438:	4604      	mov	r4, r0
   d543a:	460f      	mov	r7, r1
   d543c:	4616      	mov	r6, r2
    if (available()) {
   d543e:	4798      	blx	r3
   d5440:	b190      	cbz	r0, d5468 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   d5442:	6823      	ldr	r3, [r4, #0]
   d5444:	4620      	mov	r0, r4
   d5446:	691b      	ldr	r3, [r3, #16]
   d5448:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d544a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d544c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d544e:	4286      	cmp	r6, r0
   d5450:	bfa8      	it	ge
   d5452:	4606      	movge	r6, r0
   d5454:	4419      	add	r1, r3
   d5456:	4632      	mov	r2, r6
   d5458:	4638      	mov	r0, r7
   d545a:	f001 f8dd 	bl	d6618 <memcpy>
        _offset += read;
   d545e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5460:	4433      	add	r3, r6
   d5462:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   d5464:	4630      	mov	r0, r6
   d5466:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   d5468:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   d546c:	e7fa      	b.n	d5464 <_ZN3UDP4readEPhj+0x32>
	...

000d5470 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   d5470:	b570      	push	{r4, r5, r6, lr}
   d5472:	4604      	mov	r4, r0
   d5474:	4b05      	ldr	r3, [pc, #20]	; (d548c <_ZN3UDP8remoteIPEv+0x1c>)
   d5476:	f844 3b04 	str.w	r3, [r4], #4
   d547a:	f101 0520 	add.w	r5, r1, #32
   d547e:	4606      	mov	r6, r0
   d5480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5484:	682b      	ldr	r3, [r5, #0]
   d5486:	7023      	strb	r3, [r4, #0]
   d5488:	4630      	mov	r0, r6
   d548a:	bd70      	pop	{r4, r5, r6, pc}
   d548c:	000d6884 	.word	0x000d6884

000d5490 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5490:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5492:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5494:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5496:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5498:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d549a:	4a0a      	ldr	r2, [pc, #40]	; (d54c4 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d549c:	9202      	str	r2, [sp, #8]
   d549e:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d54a0:	468c      	mov	ip, r1
   d54a2:	4606      	mov	r6, r0
   d54a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d54a6:	ad03      	add	r5, sp, #12
   d54a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d54aa:	6823      	ldr	r3, [r4, #0]
   d54ac:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d54ae:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d54b2:	9300      	str	r3, [sp, #0]
   d54b4:	4672      	mov	r2, lr
   d54b6:	ab02      	add	r3, sp, #8
   d54b8:	4661      	mov	r1, ip
   d54ba:	4630      	mov	r0, r6
   d54bc:	47b8      	blx	r7
    }
   d54be:	b009      	add	sp, #36	; 0x24
   d54c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d54c2:	bf00      	nop
   d54c4:	000d6884 	.word	0x000d6884

000d54c8 <_ZN3UDP9endPacketEv>:
int UDP::endPacket() {
   d54c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d54ca:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   d54cc:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d54ce:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d54d0:	4b0c      	ldr	r3, [pc, #48]	; (d5504 <_ZN3UDP9endPacketEv+0x3c>)
   d54d2:	9302      	str	r3, [sp, #8]
   d54d4:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   d54d8:	4604      	mov	r4, r0
   d54da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d54dc:	ad03      	add	r5, sp, #12
   d54de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d54e0:	6833      	ldr	r3, [r6, #0]
   d54e2:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d54e4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d54e6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   d54e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d54ea:	9300      	str	r3, [sp, #0]
   d54ec:	4620      	mov	r0, r4
   d54ee:	ab02      	add	r3, sp, #8
   d54f0:	47b8      	blx	r7
    flush(); // wait for send to complete
   d54f2:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d54f4:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d54f6:	69db      	ldr	r3, [r3, #28]
   d54f8:	4620      	mov	r0, r4
   d54fa:	4798      	blx	r3
}
   d54fc:	4628      	mov	r0, r5
   d54fe:	b009      	add	sp, #36	; 0x24
   d5500:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5502:	bf00      	nop
   d5504:	000d6884 	.word	0x000d6884

000d5508 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5508:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d550a:	7843      	ldrb	r3, [r0, #1]
   d550c:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d550e:	b08d      	sub	sp, #52	; 0x34
   d5510:	4605      	mov	r5, r0
   d5512:	460c      	mov	r4, r1
   d5514:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d5516:	d104      	bne.n	d5522 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5518:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d551a:	4620      	mov	r0, r4
   d551c:	f7ff fce8 	bl	d4ef0 <_ZN9IPAddressaSEPKh>
   d5520:	e022      	b.n	d5568 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   d5522:	2b0a      	cmp	r3, #10
   d5524:	d125      	bne.n	d5572 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   d5526:	2211      	movs	r2, #17
   d5528:	2100      	movs	r1, #0
   d552a:	a801      	add	r0, sp, #4
   d552c:	f001 f882 	bl	d6634 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5530:	68ab      	ldr	r3, [r5, #8]
   d5532:	b303      	cbz	r3, d5576 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5534:	f105 0308 	add.w	r3, r5, #8
   d5538:	ae01      	add	r6, sp, #4
   d553a:	f105 0c18 	add.w	ip, r5, #24
   d553e:	6818      	ldr	r0, [r3, #0]
   d5540:	6859      	ldr	r1, [r3, #4]
   d5542:	4632      	mov	r2, r6
   d5544:	c203      	stmia	r2!, {r0, r1}
   d5546:	3308      	adds	r3, #8
   d5548:	4563      	cmp	r3, ip
   d554a:	4616      	mov	r6, r2
   d554c:	d1f7      	bne.n	d553e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   d554e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5550:	a901      	add	r1, sp, #4
   d5552:	a806      	add	r0, sp, #24
   d5554:	ae07      	add	r6, sp, #28
            a.v = 6;
   d5556:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d555a:	f7ff fc87 	bl	d4e6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d555e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5560:	3404      	adds	r4, #4
   d5562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5564:	6833      	ldr	r3, [r6, #0]
   d5566:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   d5568:	b11f      	cbz	r7, d5572 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   d556a:	8868      	ldrh	r0, [r5, #2]
   d556c:	f7ff f9e4 	bl	d4938 <inet_ntohs>
   d5570:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d5572:	b00d      	add	sp, #52	; 0x34
   d5574:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5576:	68eb      	ldr	r3, [r5, #12]
   d5578:	2b00      	cmp	r3, #0
   d557a:	d1db      	bne.n	d5534 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   d557c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5580:	692e      	ldr	r6, [r5, #16]
   d5582:	f7ff f9d1 	bl	d4928 <inet_htonl>
   d5586:	4286      	cmp	r6, r0
   d5588:	d1d4      	bne.n	d5534 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   d558a:	f105 0114 	add.w	r1, r5, #20
   d558e:	e7c4      	b.n	d551a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000d5590 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   d5590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5594:	4617      	mov	r7, r2
   d5596:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d5598:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   d559a:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d559c:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   d559e:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d55a0:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   d55a2:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d55a4:	f7ff f9e0 	bl	d4968 <netdb_getaddrinfo>
   d55a8:	1e04      	subs	r4, r0, #0
   d55aa:	db20      	blt.n	d55ee <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   d55ac:	9b01      	ldr	r3, [sp, #4]
   d55ae:	b32b      	cbz	r3, d55fc <_ZN3UDP11beginPacketEPKct+0x6c>
   d55b0:	695b      	ldr	r3, [r3, #20]
   d55b2:	b31b      	cbz	r3, d55fc <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   d55b4:	a802      	add	r0, sp, #8
   d55b6:	f7ff fc4b 	bl	d4e50 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d55ba:	9b01      	ldr	r3, [sp, #4]
   d55bc:	2200      	movs	r2, #0
   d55be:	6958      	ldr	r0, [r3, #20]
   d55c0:	a902      	add	r1, sp, #8
   d55c2:	f7ff ffa1 	bl	d5508 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   d55c6:	a802      	add	r0, sp, #8
   d55c8:	f7ff fc62 	bl	d4e90 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d55cc:	b1b0      	cbz	r0, d55fc <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   d55ce:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d55d0:	ad03      	add	r5, sp, #12
   d55d2:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d55d6:	4b0b      	ldr	r3, [pc, #44]	; (d5604 <_ZN3UDP11beginPacketEPKct+0x74>)
   d55d8:	9308      	str	r3, [sp, #32]
   d55da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d55dc:	ac09      	add	r4, sp, #36	; 0x24
   d55de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d55e0:	682b      	ldr	r3, [r5, #0]
   d55e2:	7023      	strb	r3, [r4, #0]
   d55e4:	463a      	mov	r2, r7
   d55e6:	a908      	add	r1, sp, #32
   d55e8:	4630      	mov	r0, r6
   d55ea:	47c0      	blx	r8
   d55ec:	4604      	mov	r4, r0
    SCOPE_GUARD({
   d55ee:	9801      	ldr	r0, [sp, #4]
   d55f0:	f7ff f9b2 	bl	d4958 <netdb_freeaddrinfo>
}
   d55f4:	4620      	mov	r0, r4
   d55f6:	b00e      	add	sp, #56	; 0x38
   d55f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   d55fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d5600:	e7f5      	b.n	d55ee <_ZN3UDP11beginPacketEPKct+0x5e>
   d5602:	bf00      	nop
   d5604:	000d6884 	.word	0x000d6884

000d5608 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   d560c:	f8d0 9014 	ldr.w	r9, [r0, #20]
   d5610:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5614:	b090      	sub	sp, #64	; 0x40
   d5616:	4605      	mov	r5, r0
   d5618:	460e      	mov	r6, r1
   d561a:	4690      	mov	r8, r2
   d561c:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   d561e:	db3c      	blt.n	d569a <_ZN3UDP13receivePacketEPhjm+0x92>
   d5620:	2900      	cmp	r1, #0
   d5622:	d03a      	beq.n	d569a <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   d5624:	f04f 0a1c 	mov.w	sl, #28
   d5628:	af09      	add	r7, sp, #36	; 0x24
   d562a:	4652      	mov	r2, sl
   d562c:	2100      	movs	r1, #0
   d562e:	4638      	mov	r0, r7
   d5630:	f001 f800 	bl	d6634 <memset>
        socklen_t slen = sizeof(saddr);
   d5634:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   d5638:	b1dc      	cbz	r4, d5672 <_ZN3UDP13receivePacketEPhjm+0x6a>
            struct timeval tv = {};
   d563a:	2200      	movs	r2, #0
            tv.tv_sec = timeout / 1000;
   d563c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5640:	fbb4 f3f0 	udiv	r3, r4, r0
   d5644:	e9cd 3204 	strd	r3, r2, [sp, #16]
            tv.tv_usec = (timeout % 1000) * 1000;
   d5648:	fb00 4313 	mls	r3, r0, r3, r4
   d564c:	4358      	muls	r0, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d564e:	2310      	movs	r3, #16
            struct timeval tv = {};
   d5650:	9207      	str	r2, [sp, #28]
            tv.tv_usec = (timeout % 1000) * 1000;
   d5652:	9006      	str	r0, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5654:	9300      	str	r3, [sp, #0]
   d5656:	f241 0206 	movw	r2, #4102	; 0x1006
   d565a:	446b      	add	r3, sp
   d565c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5660:	4648      	mov	r0, r9
   d5662:	f7ff f991 	bl	d4988 <sock_setsockopt>
            if (ret) {
   d5666:	4604      	mov	r4, r0
   d5668:	b120      	cbz	r0, d5674 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   d566a:	4620      	mov	r0, r4
   d566c:	b010      	add	sp, #64	; 0x40
   d566e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   d5672:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5674:	ab03      	add	r3, sp, #12
   d5676:	e9cd 7300 	strd	r7, r3, [sp]
   d567a:	6968      	ldr	r0, [r5, #20]
   d567c:	4623      	mov	r3, r4
   d567e:	4642      	mov	r2, r8
   d5680:	4631      	mov	r1, r6
   d5682:	f7ff f991 	bl	d49a8 <sock_recvfrom>
        if (ret >= 0) {
   d5686:	1e04      	subs	r4, r0, #0
   d5688:	dbef      	blt.n	d566a <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d568a:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d568e:	f105 011c 	add.w	r1, r5, #28
   d5692:	4638      	mov	r0, r7
   d5694:	f7ff ff38 	bl	d5508 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d5698:	e7e7      	b.n	d566a <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   d569a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d569e:	e7e4      	b.n	d566a <_ZN3UDP13receivePacketEPhjm+0x62>

000d56a0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d56a0:	b538      	push	{r3, r4, r5, lr}
   d56a2:	4605      	mov	r5, r0
   d56a4:	4614      	mov	r4, r2
    if (addr.version() == 6) {
   d56a6:	7d2b      	ldrb	r3, [r5, #20]
   d56a8:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d56aa:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d56ac:	d110      	bne.n	d56d0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d56ae:	f640 231c 	movw	r3, #2588	; 0xa1c
   d56b2:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d56b4:	f7ff f948 	bl	d4948 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d56b8:	3408      	adds	r4, #8
   d56ba:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   d56bc:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d56c0:	3514      	adds	r5, #20
   d56c2:	f853 2b04 	ldr.w	r2, [r3], #4
   d56c6:	f844 2b04 	str.w	r2, [r4], #4
   d56ca:	42ab      	cmp	r3, r5
   d56cc:	d1f9      	bne.n	d56c2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   d56ce:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   d56d0:	2b04      	cmp	r3, #4
   d56d2:	d1fc      	bne.n	d56ce <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   d56d4:	f44f 7304 	mov.w	r3, #528	; 0x210
   d56d8:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   d56da:	f7ff f935 	bl	d4948 <inet_htons>
   d56de:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d56e0:	6868      	ldr	r0, [r5, #4]
   d56e2:	f7ff f921 	bl	d4928 <inet_htonl>
   d56e6:	6060      	str	r0, [r4, #4]
}
   d56e8:	e7f1      	b.n	d56ce <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000d56ea <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d56ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d56ee:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   d56f0:	af03      	add	r7, sp, #12
   d56f2:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d56f6:	4698      	mov	r8, r3
   d56f8:	4604      	mov	r4, r0
   d56fa:	460d      	mov	r5, r1
   d56fc:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   d56fe:	2100      	movs	r1, #0
   d5700:	464a      	mov	r2, r9
   d5702:	4638      	mov	r0, r7
   d5704:	f000 ff96 	bl	d6634 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d5708:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d570c:	463a      	mov	r2, r7
   d570e:	4640      	mov	r0, r8
   d5710:	f7ff ffc6 	bl	d56a0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d5714:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d5718:	b153      	cbz	r3, d5730 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d571a:	e9cd 7900 	strd	r7, r9, [sp]
   d571e:	6960      	ldr	r0, [r4, #20]
   d5720:	2300      	movs	r3, #0
   d5722:	4632      	mov	r2, r6
   d5724:	4629      	mov	r1, r5
   d5726:	f7ff f947 	bl	d49b8 <sock_sendto>
}
   d572a:	b00b      	add	sp, #44	; 0x2c
   d572c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   d5730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5734:	e7f9      	b.n	d572a <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000d5738 <_ZN3UDPC1Ev>:
UDP::UDP()
   d5738:	b538      	push	{r3, r4, r5, lr}
   d573a:	2500      	movs	r5, #0
   d573c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5740:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   d5744:	4b0b      	ldr	r3, [pc, #44]	; (d5774 <_ZN3UDPC1Ev+0x3c>)
   d5746:	f103 0208 	add.w	r2, r3, #8
   d574a:	336c      	adds	r3, #108	; 0x6c
   d574c:	6103      	str	r3, [r0, #16]
   d574e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   d5752:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   d5754:	6002      	str	r2, [r0, #0]
   d5756:	6143      	str	r3, [r0, #20]
   d5758:	301c      	adds	r0, #28
   d575a:	f7ff fb79 	bl	d4e50 <_ZN9IPAddressC1Ev>
   d575e:	f44f 7300 	mov.w	r3, #512	; 0x200
   d5762:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   d5766:	86e5      	strh	r5, [r4, #54]	; 0x36
   d5768:	8725      	strh	r5, [r4, #56]	; 0x38
   d576a:	63e5      	str	r5, [r4, #60]	; 0x3c
   d576c:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   d5770:	4620      	mov	r0, r4
   d5772:	bd38      	pop	{r3, r4, r5, pc}
   d5774:	000d68ec 	.word	0x000d68ec

000d5778 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   d5778:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d577a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   d577e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d5780:	b123      	cbz	r3, d578c <_ZN3UDP13releaseBufferEv+0x14>
   d5782:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5784:	b110      	cbz	r0, d578c <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d5786:	2101      	movs	r1, #1
   d5788:	f000 faf6 	bl	d5d78 <_ZdlPvj>
    _buffer = NULL;
   d578c:	2300      	movs	r3, #0
   d578e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d5790:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d5794:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   d5796:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5798:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d579a:	bd10      	pop	{r4, pc}

000d579c <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d579c:	b570      	push	{r4, r5, r6, lr}
   d579e:	4604      	mov	r4, r0
   d57a0:	4616      	mov	r6, r2
   d57a2:	460d      	mov	r5, r1
    releaseBuffer();
   d57a4:	f7ff ffe8 	bl	d5778 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   d57a8:	2300      	movs	r3, #0
    _buffer = buffer;
   d57aa:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d57ac:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d57ae:	b12e      	cbz	r6, d57bc <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   d57b0:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   d57b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d57b4:	3800      	subs	r0, #0
   d57b6:	bf18      	it	ne
   d57b8:	2001      	movne	r0, #1
   d57ba:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   d57bc:	2d00      	cmp	r5, #0
   d57be:	d0f8      	beq.n	d57b2 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   d57c0:	4628      	mov	r0, r5
   d57c2:	f7fe fc66 	bl	d4092 <_Znaj>
        _buffer_allocated = true;
   d57c6:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   d57c8:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d57ca:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   d57ce:	2800      	cmp	r0, #0
   d57d0:	d0ef      	beq.n	d57b2 <_ZN3UDP9setBufferEjPh+0x16>
   d57d2:	e7ed      	b.n	d57b0 <_ZN3UDP9setBufferEjPh+0x14>

000d57d4 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d57d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57d6:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   d57d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d57da:	4605      	mov	r5, r0
   d57dc:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   d57de:	b91a      	cbnz	r2, d57e8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d57e0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d57e2:	b109      	cbz	r1, d57e8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d57e4:	f7ff ffda 	bl	d579c <_ZN3UDP9setBufferEjPh>
   d57e8:	3404      	adds	r4, #4
   d57ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d57ec:	f105 0620 	add.w	r6, r5, #32
   d57f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d57f2:	6823      	ldr	r3, [r4, #0]
   d57f4:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   d57f6:	2300      	movs	r3, #0
}
   d57f8:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   d57fa:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   d57fc:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d57fe:	872b      	strh	r3, [r5, #56]	; 0x38
}
   d5800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5802 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   d5802:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   d5804:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   d5806:	4604      	mov	r4, r0
   d5808:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   d580a:	b92a      	cbnz	r2, d5818 <_ZN3UDP11parsePacketEm+0x16>
   d580c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d580e:	b119      	cbz	r1, d5818 <_ZN3UDP11parsePacketEm+0x16>
   d5810:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   d5812:	f7ff ffc3 	bl	d579c <_ZN3UDP9setBufferEjPh>
   d5816:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   d5818:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   d581a:	2200      	movs	r2, #0
   d581c:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d581e:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   d5820:	b141      	cbz	r1, d5834 <_ZN3UDP11parsePacketEm+0x32>
   d5822:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d5824:	b132      	cbz	r2, d5834 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d5826:	6820      	ldr	r0, [r4, #0]
   d5828:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d582a:	4620      	mov	r0, r4
   d582c:	47a8      	blx	r5
        if (result > 0) {
   d582e:	2800      	cmp	r0, #0
            _total = result;
   d5830:	bfc8      	it	gt
   d5832:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   d5834:	6823      	ldr	r3, [r4, #0]
   d5836:	691b      	ldr	r3, [r3, #16]
   d5838:	4620      	mov	r0, r4
}
   d583a:	b003      	add	sp, #12
   d583c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   d5840:	4718      	bx	r3
	...

000d5844 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   d5844:	b510      	push	{r4, lr}
   d5846:	4b07      	ldr	r3, [pc, #28]	; (d5864 <_ZN3UDPD1Ev+0x20>)
   d5848:	f103 0208 	add.w	r2, r3, #8
   d584c:	336c      	adds	r3, #108	; 0x6c
   d584e:	4604      	mov	r4, r0
   d5850:	6002      	str	r2, [r0, #0]
   d5852:	6103      	str	r3, [r0, #16]
   d5854:	f7ff fdca 	bl	d53ec <_ZN3UDP4stopEv>
   d5858:	4620      	mov	r0, r4
   d585a:	f7ff ff8d 	bl	d5778 <_ZN3UDP13releaseBufferEv>
   d585e:	4620      	mov	r0, r4
   d5860:	bd10      	pop	{r4, pc}
   d5862:	bf00      	nop
   d5864:	000d68ec 	.word	0x000d68ec

000d5868 <_ZN3UDPD0Ev>:
   d5868:	b510      	push	{r4, lr}
   d586a:	4604      	mov	r4, r0
   d586c:	f7ff ffea 	bl	d5844 <_ZN3UDPD1Ev>
   d5870:	4620      	mov	r0, r4
   d5872:	214c      	movs	r1, #76	; 0x4c
   d5874:	f000 fa80 	bl	d5d78 <_ZdlPvj>
   d5878:	4620      	mov	r0, r4
   d587a:	bd10      	pop	{r4, pc}

000d587c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d587c:	4770      	bx	lr

000d587e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d587e:	7441      	strb	r1, [r0, #17]
}
   d5880:	4770      	bx	lr

000d5882 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5882:	4770      	bx	lr

000d5884 <_ZN11USARTSerial17availableForWriteEv>:
{
   d5884:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5886:	7c00      	ldrb	r0, [r0, #16]
   d5888:	f7ff f8ee 	bl	d4a68 <hal_usart_available_data_for_write>
}
   d588c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5890:	bd08      	pop	{r3, pc}

000d5892 <_ZN11USARTSerial9availableEv>:
{
   d5892:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5894:	7c00      	ldrb	r0, [r0, #16]
   d5896:	f7ff f8bf 	bl	d4a18 <hal_usart_available>
}
   d589a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d589e:	bd08      	pop	{r3, pc}

000d58a0 <_ZN11USARTSerial4peekEv>:
{
   d58a0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d58a2:	7c00      	ldrb	r0, [r0, #16]
   d58a4:	f7ff f8c8 	bl	d4a38 <hal_usart_peek>
}
   d58a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d58ac:	bd08      	pop	{r3, pc}

000d58ae <_ZN11USARTSerial4readEv>:
{
   d58ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d58b0:	7c00      	ldrb	r0, [r0, #16]
   d58b2:	f7ff f8b9 	bl	d4a28 <hal_usart_read>
}
   d58b6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d58ba:	bd08      	pop	{r3, pc}

000d58bc <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d58bc:	7c00      	ldrb	r0, [r0, #16]
   d58be:	f7ff b8c3 	b.w	d4a48 <hal_usart_flush>

000d58c2 <_ZN11USARTSerial5writeEh>:
{
   d58c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d58c4:	7c45      	ldrb	r5, [r0, #17]
{
   d58c6:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d58c8:	b12d      	cbz	r5, d58d6 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d58ca:	7c20      	ldrb	r0, [r4, #16]
}
   d58cc:	b003      	add	sp, #12
   d58ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d58d2:	f7ff b899 	b.w	d4a08 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d58d6:	7c00      	ldrb	r0, [r0, #16]
   d58d8:	9101      	str	r1, [sp, #4]
   d58da:	f7ff f8c5 	bl	d4a68 <hal_usart_available_data_for_write>
   d58de:	2800      	cmp	r0, #0
   d58e0:	9901      	ldr	r1, [sp, #4]
   d58e2:	dcf2      	bgt.n	d58ca <_ZN11USARTSerial5writeEh+0x8>
}
   d58e4:	4628      	mov	r0, r5
   d58e6:	b003      	add	sp, #12
   d58e8:	bd30      	pop	{r4, r5, pc}

000d58ea <_ZN11USARTSerialD0Ev>:
   d58ea:	b510      	push	{r4, lr}
   d58ec:	2114      	movs	r1, #20
   d58ee:	4604      	mov	r4, r0
   d58f0:	f000 fa42 	bl	d5d78 <_ZdlPvj>
   d58f4:	4620      	mov	r0, r4
   d58f6:	bd10      	pop	{r4, pc}

000d58f8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d58f8:	b510      	push	{r4, lr}
   d58fa:	f04f 0c00 	mov.w	ip, #0
   d58fe:	4604      	mov	r4, r0
   d5900:	4608      	mov	r0, r1
   d5902:	4611      	mov	r1, r2
   d5904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5908:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d590c:	4a04      	ldr	r2, [pc, #16]	; (d5920 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d590e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5910:	2201      	movs	r2, #1
  _serial = serial;
   d5912:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5914:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5916:	461a      	mov	r2, r3
   d5918:	f7ff f86e 	bl	d49f8 <hal_usart_init>
}
   d591c:	4620      	mov	r0, r4
   d591e:	bd10      	pop	{r4, pc}
   d5920:	000d6964 	.word	0x000d6964

000d5924 <_Z22__fetch_global_Serial1v>:
{
   d5924:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5926:	4c0d      	ldr	r4, [pc, #52]	; (d595c <_Z22__fetch_global_Serial1v+0x38>)
   d5928:	7821      	ldrb	r1, [r4, #0]
   d592a:	f3bf 8f5b 	dmb	ish
   d592e:	f011 0101 	ands.w	r1, r1, #1
   d5932:	d110      	bne.n	d5956 <_Z22__fetch_global_Serial1v+0x32>
   d5934:	4620      	mov	r0, r4
   d5936:	9101      	str	r1, [sp, #4]
   d5938:	f7fe fbaf 	bl	d409a <__cxa_guard_acquire>
   d593c:	9901      	ldr	r1, [sp, #4]
   d593e:	b150      	cbz	r0, d5956 <_Z22__fetch_global_Serial1v+0x32>
   d5940:	4b07      	ldr	r3, [pc, #28]	; (d5960 <_Z22__fetch_global_Serial1v+0x3c>)
   d5942:	4a08      	ldr	r2, [pc, #32]	; (d5964 <_Z22__fetch_global_Serial1v+0x40>)
   d5944:	4808      	ldr	r0, [pc, #32]	; (d5968 <_Z22__fetch_global_Serial1v+0x44>)
   d5946:	f7ff ffd7 	bl	d58f8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d594a:	4620      	mov	r0, r4
   d594c:	f7fe fbaa 	bl	d40a4 <__cxa_guard_release>
   d5950:	4806      	ldr	r0, [pc, #24]	; (d596c <_Z22__fetch_global_Serial1v+0x48>)
   d5952:	f000 fe5b 	bl	d660c <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5956:	4804      	ldr	r0, [pc, #16]	; (d5968 <_Z22__fetch_global_Serial1v+0x44>)
   d5958:	b002      	add	sp, #8
   d595a:	bd10      	pop	{r4, pc}
   d595c:	2003e5e4 	.word	0x2003e5e4
   d5960:	2003e66c 	.word	0x2003e66c
   d5964:	2003e5e8 	.word	0x2003e5e8
   d5968:	2003e6f0 	.word	0x2003e6f0
   d596c:	000d5883 	.word	0x000d5883

000d5970 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5970:	7441      	strb	r1, [r0, #17]
}
   d5972:	4770      	bx	lr

000d5974 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5974:	4770      	bx	lr

000d5976 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5976:	4770      	bx	lr

000d5978 <_ZN9USBSerial4readEv>:
{
   d5978:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d597a:	2100      	movs	r1, #0
   d597c:	7c00      	ldrb	r0, [r0, #16]
   d597e:	f7ff f89b 	bl	d4ab8 <HAL_USB_USART_Receive_Data>
}
   d5982:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5986:	bd08      	pop	{r3, pc}

000d5988 <_ZN9USBSerial4peekEv>:
{
   d5988:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d598a:	2101      	movs	r1, #1
   d598c:	7c00      	ldrb	r0, [r0, #16]
   d598e:	f7ff f893 	bl	d4ab8 <HAL_USB_USART_Receive_Data>
}
   d5992:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5996:	bd08      	pop	{r3, pc}

000d5998 <_ZN9USBSerial17availableForWriteEv>:
{
   d5998:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d599a:	7c00      	ldrb	r0, [r0, #16]
   d599c:	f7ff f884 	bl	d4aa8 <HAL_USB_USART_Available_Data_For_Write>
}
   d59a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d59a4:	bd08      	pop	{r3, pc}

000d59a6 <_ZN9USBSerial9availableEv>:
{
   d59a6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d59a8:	7c00      	ldrb	r0, [r0, #16]
   d59aa:	f7ff f875 	bl	d4a98 <HAL_USB_USART_Available_Data>
}
   d59ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d59b2:	bd08      	pop	{r3, pc}

000d59b4 <_ZN9USBSerial5writeEh>:
{
   d59b4:	b513      	push	{r0, r1, r4, lr}
   d59b6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d59b8:	7c00      	ldrb	r0, [r0, #16]
{
   d59ba:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d59bc:	f7ff f874 	bl	d4aa8 <HAL_USB_USART_Available_Data_For_Write>
   d59c0:	2800      	cmp	r0, #0
   d59c2:	9901      	ldr	r1, [sp, #4]
   d59c4:	dc01      	bgt.n	d59ca <_ZN9USBSerial5writeEh+0x16>
   d59c6:	7c60      	ldrb	r0, [r4, #17]
   d59c8:	b120      	cbz	r0, d59d4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d59ca:	7c20      	ldrb	r0, [r4, #16]
   d59cc:	f7ff f87c 	bl	d4ac8 <HAL_USB_USART_Send_Data>
   d59d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d59d4:	b002      	add	sp, #8
   d59d6:	bd10      	pop	{r4, pc}

000d59d8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d59d8:	7c00      	ldrb	r0, [r0, #16]
   d59da:	f7ff b87d 	b.w	d4ad8 <HAL_USB_USART_Flush_Data>

000d59de <_ZN9USBSerialD0Ev>:
   d59de:	b510      	push	{r4, lr}
   d59e0:	2114      	movs	r1, #20
   d59e2:	4604      	mov	r4, r0
   d59e4:	f000 f9c8 	bl	d5d78 <_ZdlPvj>
   d59e8:	4620      	mov	r0, r4
   d59ea:	bd10      	pop	{r4, pc}

000d59ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d59ec:	b510      	push	{r4, lr}
   d59ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d59f2:	4604      	mov	r4, r0
   d59f4:	4608      	mov	r0, r1
   d59f6:	2100      	movs	r1, #0
   d59f8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d59fc:	4b04      	ldr	r3, [pc, #16]	; (d5a10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d59fe:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5a00:	2301      	movs	r3, #1
  _serial = serial;
   d5a02:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5a04:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5a06:	4611      	mov	r1, r2
   d5a08:	f7ff f836 	bl	d4a78 <HAL_USB_USART_Init>
}
   d5a0c:	4620      	mov	r0, r4
   d5a0e:	bd10      	pop	{r4, pc}
   d5a10:	000d6994 	.word	0x000d6994

000d5a14 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5a14:	7c00      	ldrb	r0, [r0, #16]
   d5a16:	2200      	movs	r2, #0
   d5a18:	f7ff b836 	b.w	d4a88 <HAL_USB_USART_Begin>

000d5a1c <_Z19acquireSerialBufferv>:
{
   d5a1c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5a1e:	2214      	movs	r2, #20
{
   d5a20:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5a22:	2100      	movs	r1, #0
   d5a24:	f000 fe06 	bl	d6634 <memset>
}
   d5a28:	4620      	mov	r0, r4
   d5a2a:	bd10      	pop	{r4, pc}

000d5a2c <_Z16_fetch_usbserialv>:
{
   d5a2c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5a2e:	4c0f      	ldr	r4, [pc, #60]	; (d5a6c <_Z16_fetch_usbserialv+0x40>)
{
   d5a30:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5a32:	a803      	add	r0, sp, #12
   d5a34:	f7ff fff2 	bl	d5a1c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5a38:	7821      	ldrb	r1, [r4, #0]
   d5a3a:	f3bf 8f5b 	dmb	ish
   d5a3e:	f011 0101 	ands.w	r1, r1, #1
   d5a42:	d10f      	bne.n	d5a64 <_Z16_fetch_usbserialv+0x38>
   d5a44:	4620      	mov	r0, r4
   d5a46:	9101      	str	r1, [sp, #4]
   d5a48:	f7fe fb27 	bl	d409a <__cxa_guard_acquire>
   d5a4c:	9901      	ldr	r1, [sp, #4]
   d5a4e:	b148      	cbz	r0, d5a64 <_Z16_fetch_usbserialv+0x38>
   d5a50:	aa03      	add	r2, sp, #12
   d5a52:	4807      	ldr	r0, [pc, #28]	; (d5a70 <_Z16_fetch_usbserialv+0x44>)
   d5a54:	f7ff ffca 	bl	d59ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5a58:	4620      	mov	r0, r4
   d5a5a:	f7fe fb23 	bl	d40a4 <__cxa_guard_release>
   d5a5e:	4805      	ldr	r0, [pc, #20]	; (d5a74 <_Z16_fetch_usbserialv+0x48>)
   d5a60:	f000 fdd4 	bl	d660c <atexit>
	return _usbserial;
}
   d5a64:	4802      	ldr	r0, [pc, #8]	; (d5a70 <_Z16_fetch_usbserialv+0x44>)
   d5a66:	b008      	add	sp, #32
   d5a68:	bd10      	pop	{r4, pc}
   d5a6a:	bf00      	nop
   d5a6c:	2003e704 	.word	0x2003e704
   d5a70:	2003e708 	.word	0x2003e708
   d5a74:	000d5975 	.word	0x000d5975

000d5a78 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5a78:	2200      	movs	r2, #0
   d5a7a:	6840      	ldr	r0, [r0, #4]
   d5a7c:	4611      	mov	r1, r2
   d5a7e:	f7ff b87f 	b.w	d4b80 <network_ready>

000d5a82 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a82:	2200      	movs	r2, #0
   d5a84:	6840      	ldr	r0, [r0, #4]
   d5a86:	4611      	mov	r1, r2
   d5a88:	f7ff b89a 	b.w	d4bc0 <network_listening>

000d5a8c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5a8c:	2200      	movs	r2, #0
   d5a8e:	6840      	ldr	r0, [r0, #4]
   d5a90:	4611      	mov	r1, r2
   d5a92:	f7ff b8a5 	b.w	d4be0 <network_get_listen_timeout>

000d5a96 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5a96:	6840      	ldr	r0, [r0, #4]
   d5a98:	2200      	movs	r2, #0
   d5a9a:	f7ff b899 	b.w	d4bd0 <network_set_listen_timeout>

000d5a9e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a9e:	6840      	ldr	r0, [r0, #4]
   d5aa0:	2200      	movs	r2, #0
   d5aa2:	f081 0101 	eor.w	r1, r1, #1
   d5aa6:	f7ff b883 	b.w	d4bb0 <network_listen>

000d5aaa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5aaa:	2300      	movs	r3, #0
   d5aac:	6840      	ldr	r0, [r0, #4]
   d5aae:	461a      	mov	r2, r3
   d5ab0:	4619      	mov	r1, r3
   d5ab2:	f7ff b875 	b.w	d4ba0 <network_off>

000d5ab6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5ab6:	2300      	movs	r3, #0
   d5ab8:	6840      	ldr	r0, [r0, #4]
   d5aba:	461a      	mov	r2, r3
   d5abc:	4619      	mov	r1, r3
   d5abe:	f7ff b867 	b.w	d4b90 <network_on>

000d5ac2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5ac2:	2200      	movs	r2, #0
   d5ac4:	6840      	ldr	r0, [r0, #4]
   d5ac6:	4611      	mov	r1, r2
   d5ac8:	f7ff b84a 	b.w	d4b60 <network_connecting>

000d5acc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5acc:	6840      	ldr	r0, [r0, #4]
   d5ace:	2200      	movs	r2, #0
   d5ad0:	2102      	movs	r1, #2
   d5ad2:	f7ff b84d 	b.w	d4b70 <network_disconnect>

000d5ad6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5ad6:	2300      	movs	r3, #0
   d5ad8:	6840      	ldr	r0, [r0, #4]
   d5ada:	461a      	mov	r2, r3
   d5adc:	f7ff b838 	b.w	d4b50 <network_connect>

000d5ae0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5ae0:	4b02      	ldr	r3, [pc, #8]	; (d5aec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5ae2:	2204      	movs	r2, #4
   d5ae4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5ae6:	4a02      	ldr	r2, [pc, #8]	; (d5af0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5ae8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5aea:	4770      	bx	lr
   d5aec:	2003e71c 	.word	0x2003e71c
   d5af0:	000d69c4 	.word	0x000d69c4

000d5af4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5af4:	4b01      	ldr	r3, [pc, #4]	; (d5afc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5af6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5af8:	4770      	bx	lr
   d5afa:	bf00      	nop
   d5afc:	2003e4a4 	.word	0x2003e4a4

000d5b00 <serialEventRun>:
{
   d5b00:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5b02:	4b0b      	ldr	r3, [pc, #44]	; (d5b30 <serialEventRun+0x30>)
   d5b04:	b143      	cbz	r3, d5b18 <serialEventRun+0x18>
   d5b06:	f7ff ff91 	bl	d5a2c <_Z16_fetch_usbserialv>
   d5b0a:	6803      	ldr	r3, [r0, #0]
   d5b0c:	691b      	ldr	r3, [r3, #16]
   d5b0e:	4798      	blx	r3
   d5b10:	2800      	cmp	r0, #0
   d5b12:	dd01      	ble.n	d5b18 <serialEventRun+0x18>
        serialEvent();
   d5b14:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5b18:	4b06      	ldr	r3, [pc, #24]	; (d5b34 <serialEventRun+0x34>)
   d5b1a:	b143      	cbz	r3, d5b2e <serialEventRun+0x2e>
   d5b1c:	f7ff ff02 	bl	d5924 <_Z22__fetch_global_Serial1v>
   d5b20:	6803      	ldr	r3, [r0, #0]
   d5b22:	691b      	ldr	r3, [r3, #16]
   d5b24:	4798      	blx	r3
   d5b26:	2800      	cmp	r0, #0
   d5b28:	dd01      	ble.n	d5b2e <serialEventRun+0x2e>
        serialEvent1();
   d5b2a:	f3af 8000 	nop.w
}
   d5b2e:	bd08      	pop	{r3, pc}
	...

000d5b38 <_post_loop>:
{
   d5b38:	b508      	push	{r3, lr}
	serialEventRun();
   d5b3a:	f7ff ffe1 	bl	d5b00 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5b3e:	f7fe fe6b 	bl	d4818 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5b42:	4b01      	ldr	r3, [pc, #4]	; (d5b48 <_post_loop+0x10>)
   d5b44:	6018      	str	r0, [r3, #0]
}
   d5b46:	bd08      	pop	{r3, pc}
   d5b48:	2003e738 	.word	0x2003e738

000d5b4c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5b4c:	4805      	ldr	r0, [pc, #20]	; (d5b64 <_Z33system_initialize_user_backup_ramv+0x18>)
   d5b4e:	4a06      	ldr	r2, [pc, #24]	; (d5b68 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d5b50:	4906      	ldr	r1, [pc, #24]	; (d5b6c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d5b52:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5b54:	1a12      	subs	r2, r2, r0
   d5b56:	f000 fd5f 	bl	d6618 <memcpy>
    __backup_sram_signature = signature;
   d5b5a:	4b05      	ldr	r3, [pc, #20]	; (d5b70 <_Z33system_initialize_user_backup_ramv+0x24>)
   d5b5c:	4a05      	ldr	r2, [pc, #20]	; (d5b74 <_Z33system_initialize_user_backup_ramv+0x28>)
   d5b5e:	601a      	str	r2, [r3, #0]
}
   d5b60:	bd08      	pop	{r3, pc}
   d5b62:	bf00      	nop
   d5b64:	2003f400 	.word	0x2003f400
   d5b68:	2003f404 	.word	0x2003f404
   d5b6c:	000d6a20 	.word	0x000d6a20
   d5b70:	2003f400 	.word	0x2003f400
   d5b74:	9a271c1e 	.word	0x9a271c1e

000d5b78 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5b78:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5b7a:	2300      	movs	r3, #0
   d5b7c:	9300      	str	r3, [sp, #0]
   d5b7e:	461a      	mov	r2, r3
   d5b80:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5b84:	f7fe ffd2 	bl	d4b2c <system_ctrl_set_result>
}
   d5b88:	b003      	add	sp, #12
   d5b8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5b90 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5b90:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5b92:	8843      	ldrh	r3, [r0, #2]
   d5b94:	2b0a      	cmp	r3, #10
   d5b96:	d008      	beq.n	d5baa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5b98:	2b50      	cmp	r3, #80	; 0x50
   d5b9a:	d10b      	bne.n	d5bb4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5b9c:	4b09      	ldr	r3, [pc, #36]	; (d5bc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5b9e:	681b      	ldr	r3, [r3, #0]
   d5ba0:	b14b      	cbz	r3, d5bb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5ba2:	b003      	add	sp, #12
   d5ba4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5ba8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5baa:	f7ff ffe5 	bl	d5b78 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5bae:	b003      	add	sp, #12
   d5bb0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5bb4:	2300      	movs	r3, #0
   d5bb6:	9300      	str	r3, [sp, #0]
   d5bb8:	461a      	mov	r2, r3
   d5bba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5bbe:	f7fe ffb5 	bl	d4b2c <system_ctrl_set_result>
}
   d5bc2:	e7f4      	b.n	d5bae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5bc4:	2003e728 	.word	0x2003e728

000d5bc8 <module_user_init_hook>:
{
   d5bc8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5bca:	4812      	ldr	r0, [pc, #72]	; (d5c14 <module_user_init_hook+0x4c>)
   d5bcc:	2100      	movs	r1, #0
   d5bce:	f7ff f837 	bl	d4c40 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d5bd2:	4b11      	ldr	r3, [pc, #68]	; (d5c18 <module_user_init_hook+0x50>)
   d5bd4:	681a      	ldr	r2, [r3, #0]
   d5bd6:	4b11      	ldr	r3, [pc, #68]	; (d5c1c <module_user_init_hook+0x54>)
   d5bd8:	429a      	cmp	r2, r3
   d5bda:	4b11      	ldr	r3, [pc, #68]	; (d5c20 <module_user_init_hook+0x58>)
   d5bdc:	bf0c      	ite	eq
   d5bde:	2201      	moveq	r2, #1
   d5be0:	2200      	movne	r2, #0
   d5be2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5be4:	d001      	beq.n	d5bea <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d5be6:	f7ff ffb1 	bl	d5b4c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5bea:	f7fe fe0d 	bl	d4808 <HAL_RNG_GetRandomNumber>
   d5bee:	4604      	mov	r4, r0
    srand(seed);
   d5bf0:	f000 fd28 	bl	d6644 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5bf4:	4b0b      	ldr	r3, [pc, #44]	; (d5c24 <module_user_init_hook+0x5c>)
   d5bf6:	b113      	cbz	r3, d5bfe <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d5bf8:	4620      	mov	r0, r4
   d5bfa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5bfe:	2100      	movs	r1, #0
   d5c00:	4808      	ldr	r0, [pc, #32]	; (d5c24 <module_user_init_hook+0x5c>)
   d5c02:	f7fe ff9d 	bl	d4b40 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5c0a:	4807      	ldr	r0, [pc, #28]	; (d5c28 <module_user_init_hook+0x60>)
   d5c0c:	2100      	movs	r1, #0
   d5c0e:	f7fe bf83 	b.w	d4b18 <system_ctrl_set_app_request_handler>
   d5c12:	bf00      	nop
   d5c14:	000d5af5 	.word	0x000d5af5
   d5c18:	2003f400 	.word	0x2003f400
   d5c1c:	9a271c1e 	.word	0x9a271c1e
   d5c20:	2003e724 	.word	0x2003e724
   d5c24:	00000000 	.word	0x00000000
   d5c28:	000d5b91 	.word	0x000d5b91

000d5c2c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5c2c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5c2e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5c30:	d902      	bls.n	d5c38 <pinAvailable+0xc>
    return false;
   d5c32:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5c34:	b002      	add	sp, #8
   d5c36:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5c38:	f1a0 030b 	sub.w	r3, r0, #11
   d5c3c:	2b02      	cmp	r3, #2
   d5c3e:	d81a      	bhi.n	d5c76 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5c40:	4c17      	ldr	r4, [pc, #92]	; (d5ca0 <pinAvailable+0x74>)
   d5c42:	7821      	ldrb	r1, [r4, #0]
   d5c44:	f3bf 8f5b 	dmb	ish
   d5c48:	f011 0101 	ands.w	r1, r1, #1
   d5c4c:	d10b      	bne.n	d5c66 <pinAvailable+0x3a>
   d5c4e:	4620      	mov	r0, r4
   d5c50:	9101      	str	r1, [sp, #4]
   d5c52:	f7fe fa22 	bl	d409a <__cxa_guard_acquire>
   d5c56:	9901      	ldr	r1, [sp, #4]
   d5c58:	b128      	cbz	r0, d5c66 <pinAvailable+0x3a>
   d5c5a:	4812      	ldr	r0, [pc, #72]	; (d5ca4 <pinAvailable+0x78>)
   d5c5c:	f7ff fa74 	bl	d5148 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5c60:	4620      	mov	r0, r4
   d5c62:	f7fe fa1f 	bl	d40a4 <__cxa_guard_release>
   d5c66:	4b0f      	ldr	r3, [pc, #60]	; (d5ca4 <pinAvailable+0x78>)
   d5c68:	7818      	ldrb	r0, [r3, #0]
   d5c6a:	f7fe febd 	bl	d49e8 <hal_spi_is_enabled>
   d5c6e:	2800      	cmp	r0, #0
   d5c70:	d1df      	bne.n	d5c32 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5c72:	2001      	movs	r0, #1
   d5c74:	e7de      	b.n	d5c34 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5c76:	2801      	cmp	r0, #1
   d5c78:	d809      	bhi.n	d5c8e <pinAvailable+0x62>
   d5c7a:	f000 f859 	bl	d5d30 <_Z19__fetch_global_Wirev>
   d5c7e:	2100      	movs	r1, #0
   d5c80:	7c00      	ldrb	r0, [r0, #16]
   d5c82:	f7fe fe29 	bl	d48d8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5c86:	f080 0001 	eor.w	r0, r0, #1
   d5c8a:	b2c0      	uxtb	r0, r0
   d5c8c:	e7d2      	b.n	d5c34 <pinAvailable+0x8>
   d5c8e:	3809      	subs	r0, #9
   d5c90:	2801      	cmp	r0, #1
   d5c92:	d8ee      	bhi.n	d5c72 <pinAvailable+0x46>
   d5c94:	f7ff fe46 	bl	d5924 <_Z22__fetch_global_Serial1v>
   d5c98:	7c00      	ldrb	r0, [r0, #16]
   d5c9a:	f7fe fedd 	bl	d4a58 <hal_usart_is_enabled>
   d5c9e:	e7f2      	b.n	d5c86 <pinAvailable+0x5a>
   d5ca0:	2003e72c 	.word	0x2003e72c
   d5ca4:	2003e730 	.word	0x2003e730

000d5ca8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5ca8:	2823      	cmp	r0, #35	; 0x23
{
   d5caa:	b538      	push	{r3, r4, r5, lr}
   d5cac:	4604      	mov	r4, r0
   d5cae:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5cb0:	d80a      	bhi.n	d5cc8 <pinMode+0x20>
   d5cb2:	29ff      	cmp	r1, #255	; 0xff
   d5cb4:	d008      	beq.n	d5cc8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5cb6:	f7ff ffb9 	bl	d5c2c <pinAvailable>
   d5cba:	b128      	cbz	r0, d5cc8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5cbc:	4629      	mov	r1, r5
   d5cbe:	4620      	mov	r0, r4
}
   d5cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5cc4:	f7fe bdb0 	b.w	d4828 <HAL_Pin_Mode>
}
   d5cc8:	bd38      	pop	{r3, r4, r5, pc}

000d5cca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5cca:	b538      	push	{r3, r4, r5, lr}
   d5ccc:	4604      	mov	r4, r0
   d5cce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5cd0:	f7fe fdb2 	bl	d4838 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5cd4:	28ff      	cmp	r0, #255	; 0xff
   d5cd6:	d010      	beq.n	d5cfa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5cd8:	2806      	cmp	r0, #6
   d5cda:	d804      	bhi.n	d5ce6 <digitalWrite+0x1c>
   d5cdc:	234d      	movs	r3, #77	; 0x4d
   d5cde:	fa23 f000 	lsr.w	r0, r3, r0
   d5ce2:	07c3      	lsls	r3, r0, #31
   d5ce4:	d409      	bmi.n	d5cfa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5ce6:	4620      	mov	r0, r4
   d5ce8:	f7ff ffa0 	bl	d5c2c <pinAvailable>
   d5cec:	b128      	cbz	r0, d5cfa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5cee:	4629      	mov	r1, r5
   d5cf0:	4620      	mov	r0, r4
}
   d5cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5cf6:	f7fe bda7 	b.w	d4848 <HAL_GPIO_Write>
}
   d5cfa:	bd38      	pop	{r3, r4, r5, pc}

000d5cfc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5cfc:	4770      	bx	lr
	...

000d5d00 <_Z17acquireWireBufferv>:
{
   d5d00:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5d02:	2300      	movs	r3, #0
   d5d04:	2520      	movs	r5, #32
   d5d06:	8043      	strh	r3, [r0, #2]
   d5d08:	2314      	movs	r3, #20
{
   d5d0a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5d0c:	8003      	strh	r3, [r0, #0]
   d5d0e:	6085      	str	r5, [r0, #8]
   d5d10:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5d12:	4906      	ldr	r1, [pc, #24]	; (d5d2c <_Z17acquireWireBufferv+0x2c>)
   d5d14:	4628      	mov	r0, r5
   d5d16:	f000 f831 	bl	d5d7c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5d1a:	4904      	ldr	r1, [pc, #16]	; (d5d2c <_Z17acquireWireBufferv+0x2c>)
	};
   d5d1c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5d1e:	4628      	mov	r0, r5
   d5d20:	f000 f82c 	bl	d5d7c <_ZnajRKSt9nothrow_t>
	};
   d5d24:	60e0      	str	r0, [r4, #12]
}
   d5d26:	4620      	mov	r0, r4
   d5d28:	bd38      	pop	{r3, r4, r5, pc}
   d5d2a:	bf00      	nop
   d5d2c:	000d69f8 	.word	0x000d69f8

000d5d30 <_Z19__fetch_global_Wirev>:
{
   d5d30:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5d32:	4d0e      	ldr	r5, [pc, #56]	; (d5d6c <_Z19__fetch_global_Wirev+0x3c>)
   d5d34:	7829      	ldrb	r1, [r5, #0]
   d5d36:	f3bf 8f5b 	dmb	ish
   d5d3a:	f011 0401 	ands.w	r4, r1, #1
{
   d5d3e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5d40:	d111      	bne.n	d5d66 <_Z19__fetch_global_Wirev+0x36>
   d5d42:	4628      	mov	r0, r5
   d5d44:	f7fe f9a9 	bl	d409a <__cxa_guard_acquire>
   d5d48:	b168      	cbz	r0, d5d66 <_Z19__fetch_global_Wirev+0x36>
   d5d4a:	a801      	add	r0, sp, #4
   d5d4c:	f7ff ffd8 	bl	d5d00 <_Z17acquireWireBufferv>
   d5d50:	aa01      	add	r2, sp, #4
   d5d52:	4621      	mov	r1, r4
   d5d54:	4806      	ldr	r0, [pc, #24]	; (d5d70 <_Z19__fetch_global_Wirev+0x40>)
   d5d56:	f7fe fff1 	bl	d4d3c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5d5a:	4628      	mov	r0, r5
   d5d5c:	f7fe f9a2 	bl	d40a4 <__cxa_guard_release>
   d5d60:	4804      	ldr	r0, [pc, #16]	; (d5d74 <_Z19__fetch_global_Wirev+0x44>)
   d5d62:	f000 fc53 	bl	d660c <atexit>
	return wire;
}
   d5d66:	4802      	ldr	r0, [pc, #8]	; (d5d70 <_Z19__fetch_global_Wirev+0x40>)
   d5d68:	b007      	add	sp, #28
   d5d6a:	bd30      	pop	{r4, r5, pc}
   d5d6c:	2003e73c 	.word	0x2003e73c
   d5d70:	2003e740 	.word	0x2003e740
   d5d74:	000d5cfd 	.word	0x000d5cfd

000d5d78 <_ZdlPvj>:
   d5d78:	f7fe b98d 	b.w	d4096 <_ZdlPv>

000d5d7c <_ZnajRKSt9nothrow_t>:
   d5d7c:	f7fe b989 	b.w	d4092 <_Znaj>

000d5d80 <__aeabi_drsub>:
   d5d80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5d84:	e002      	b.n	d5d8c <__adddf3>
   d5d86:	bf00      	nop

000d5d88 <__aeabi_dsub>:
   d5d88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5d8c <__adddf3>:
   d5d8c:	b530      	push	{r4, r5, lr}
   d5d8e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5d92:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5d96:	ea94 0f05 	teq	r4, r5
   d5d9a:	bf08      	it	eq
   d5d9c:	ea90 0f02 	teqeq	r0, r2
   d5da0:	bf1f      	itttt	ne
   d5da2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5da6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5daa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5dae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5db2:	f000 80e2 	beq.w	d5f7a <__adddf3+0x1ee>
   d5db6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5dba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5dbe:	bfb8      	it	lt
   d5dc0:	426d      	neglt	r5, r5
   d5dc2:	dd0c      	ble.n	d5dde <__adddf3+0x52>
   d5dc4:	442c      	add	r4, r5
   d5dc6:	ea80 0202 	eor.w	r2, r0, r2
   d5dca:	ea81 0303 	eor.w	r3, r1, r3
   d5dce:	ea82 0000 	eor.w	r0, r2, r0
   d5dd2:	ea83 0101 	eor.w	r1, r3, r1
   d5dd6:	ea80 0202 	eor.w	r2, r0, r2
   d5dda:	ea81 0303 	eor.w	r3, r1, r3
   d5dde:	2d36      	cmp	r5, #54	; 0x36
   d5de0:	bf88      	it	hi
   d5de2:	bd30      	pophi	{r4, r5, pc}
   d5de4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5de8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5dec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5df0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5df4:	d002      	beq.n	d5dfc <__adddf3+0x70>
   d5df6:	4240      	negs	r0, r0
   d5df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5dfc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5e00:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5e04:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5e08:	d002      	beq.n	d5e10 <__adddf3+0x84>
   d5e0a:	4252      	negs	r2, r2
   d5e0c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5e10:	ea94 0f05 	teq	r4, r5
   d5e14:	f000 80a7 	beq.w	d5f66 <__adddf3+0x1da>
   d5e18:	f1a4 0401 	sub.w	r4, r4, #1
   d5e1c:	f1d5 0e20 	rsbs	lr, r5, #32
   d5e20:	db0d      	blt.n	d5e3e <__adddf3+0xb2>
   d5e22:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5e26:	fa22 f205 	lsr.w	r2, r2, r5
   d5e2a:	1880      	adds	r0, r0, r2
   d5e2c:	f141 0100 	adc.w	r1, r1, #0
   d5e30:	fa03 f20e 	lsl.w	r2, r3, lr
   d5e34:	1880      	adds	r0, r0, r2
   d5e36:	fa43 f305 	asr.w	r3, r3, r5
   d5e3a:	4159      	adcs	r1, r3
   d5e3c:	e00e      	b.n	d5e5c <__adddf3+0xd0>
   d5e3e:	f1a5 0520 	sub.w	r5, r5, #32
   d5e42:	f10e 0e20 	add.w	lr, lr, #32
   d5e46:	2a01      	cmp	r2, #1
   d5e48:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5e4c:	bf28      	it	cs
   d5e4e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5e52:	fa43 f305 	asr.w	r3, r3, r5
   d5e56:	18c0      	adds	r0, r0, r3
   d5e58:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5e5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e60:	d507      	bpl.n	d5e72 <__adddf3+0xe6>
   d5e62:	f04f 0e00 	mov.w	lr, #0
   d5e66:	f1dc 0c00 	rsbs	ip, ip, #0
   d5e6a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5e6e:	eb6e 0101 	sbc.w	r1, lr, r1
   d5e72:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5e76:	d31b      	bcc.n	d5eb0 <__adddf3+0x124>
   d5e78:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5e7c:	d30c      	bcc.n	d5e98 <__adddf3+0x10c>
   d5e7e:	0849      	lsrs	r1, r1, #1
   d5e80:	ea5f 0030 	movs.w	r0, r0, rrx
   d5e84:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5e88:	f104 0401 	add.w	r4, r4, #1
   d5e8c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5e90:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5e94:	f080 809a 	bcs.w	d5fcc <__adddf3+0x240>
   d5e98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5e9c:	bf08      	it	eq
   d5e9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5ea2:	f150 0000 	adcs.w	r0, r0, #0
   d5ea6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5eaa:	ea41 0105 	orr.w	r1, r1, r5
   d5eae:	bd30      	pop	{r4, r5, pc}
   d5eb0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5eb4:	4140      	adcs	r0, r0
   d5eb6:	eb41 0101 	adc.w	r1, r1, r1
   d5eba:	3c01      	subs	r4, #1
   d5ebc:	bf28      	it	cs
   d5ebe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d5ec2:	d2e9      	bcs.n	d5e98 <__adddf3+0x10c>
   d5ec4:	f091 0f00 	teq	r1, #0
   d5ec8:	bf04      	itt	eq
   d5eca:	4601      	moveq	r1, r0
   d5ecc:	2000      	moveq	r0, #0
   d5ece:	fab1 f381 	clz	r3, r1
   d5ed2:	bf08      	it	eq
   d5ed4:	3320      	addeq	r3, #32
   d5ed6:	f1a3 030b 	sub.w	r3, r3, #11
   d5eda:	f1b3 0220 	subs.w	r2, r3, #32
   d5ede:	da0c      	bge.n	d5efa <__adddf3+0x16e>
   d5ee0:	320c      	adds	r2, #12
   d5ee2:	dd08      	ble.n	d5ef6 <__adddf3+0x16a>
   d5ee4:	f102 0c14 	add.w	ip, r2, #20
   d5ee8:	f1c2 020c 	rsb	r2, r2, #12
   d5eec:	fa01 f00c 	lsl.w	r0, r1, ip
   d5ef0:	fa21 f102 	lsr.w	r1, r1, r2
   d5ef4:	e00c      	b.n	d5f10 <__adddf3+0x184>
   d5ef6:	f102 0214 	add.w	r2, r2, #20
   d5efa:	bfd8      	it	le
   d5efc:	f1c2 0c20 	rsble	ip, r2, #32
   d5f00:	fa01 f102 	lsl.w	r1, r1, r2
   d5f04:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5f08:	bfdc      	itt	le
   d5f0a:	ea41 010c 	orrle.w	r1, r1, ip
   d5f0e:	4090      	lslle	r0, r2
   d5f10:	1ae4      	subs	r4, r4, r3
   d5f12:	bfa2      	ittt	ge
   d5f14:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5f18:	4329      	orrge	r1, r5
   d5f1a:	bd30      	popge	{r4, r5, pc}
   d5f1c:	ea6f 0404 	mvn.w	r4, r4
   d5f20:	3c1f      	subs	r4, #31
   d5f22:	da1c      	bge.n	d5f5e <__adddf3+0x1d2>
   d5f24:	340c      	adds	r4, #12
   d5f26:	dc0e      	bgt.n	d5f46 <__adddf3+0x1ba>
   d5f28:	f104 0414 	add.w	r4, r4, #20
   d5f2c:	f1c4 0220 	rsb	r2, r4, #32
   d5f30:	fa20 f004 	lsr.w	r0, r0, r4
   d5f34:	fa01 f302 	lsl.w	r3, r1, r2
   d5f38:	ea40 0003 	orr.w	r0, r0, r3
   d5f3c:	fa21 f304 	lsr.w	r3, r1, r4
   d5f40:	ea45 0103 	orr.w	r1, r5, r3
   d5f44:	bd30      	pop	{r4, r5, pc}
   d5f46:	f1c4 040c 	rsb	r4, r4, #12
   d5f4a:	f1c4 0220 	rsb	r2, r4, #32
   d5f4e:	fa20 f002 	lsr.w	r0, r0, r2
   d5f52:	fa01 f304 	lsl.w	r3, r1, r4
   d5f56:	ea40 0003 	orr.w	r0, r0, r3
   d5f5a:	4629      	mov	r1, r5
   d5f5c:	bd30      	pop	{r4, r5, pc}
   d5f5e:	fa21 f004 	lsr.w	r0, r1, r4
   d5f62:	4629      	mov	r1, r5
   d5f64:	bd30      	pop	{r4, r5, pc}
   d5f66:	f094 0f00 	teq	r4, #0
   d5f6a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5f6e:	bf06      	itte	eq
   d5f70:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5f74:	3401      	addeq	r4, #1
   d5f76:	3d01      	subne	r5, #1
   d5f78:	e74e      	b.n	d5e18 <__adddf3+0x8c>
   d5f7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5f7e:	bf18      	it	ne
   d5f80:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5f84:	d029      	beq.n	d5fda <__adddf3+0x24e>
   d5f86:	ea94 0f05 	teq	r4, r5
   d5f8a:	bf08      	it	eq
   d5f8c:	ea90 0f02 	teqeq	r0, r2
   d5f90:	d005      	beq.n	d5f9e <__adddf3+0x212>
   d5f92:	ea54 0c00 	orrs.w	ip, r4, r0
   d5f96:	bf04      	itt	eq
   d5f98:	4619      	moveq	r1, r3
   d5f9a:	4610      	moveq	r0, r2
   d5f9c:	bd30      	pop	{r4, r5, pc}
   d5f9e:	ea91 0f03 	teq	r1, r3
   d5fa2:	bf1e      	ittt	ne
   d5fa4:	2100      	movne	r1, #0
   d5fa6:	2000      	movne	r0, #0
   d5fa8:	bd30      	popne	{r4, r5, pc}
   d5faa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5fae:	d105      	bne.n	d5fbc <__adddf3+0x230>
   d5fb0:	0040      	lsls	r0, r0, #1
   d5fb2:	4149      	adcs	r1, r1
   d5fb4:	bf28      	it	cs
   d5fb6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5fba:	bd30      	pop	{r4, r5, pc}
   d5fbc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5fc0:	bf3c      	itt	cc
   d5fc2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5fc6:	bd30      	popcc	{r4, r5, pc}
   d5fc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5fcc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5fd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5fd4:	f04f 0000 	mov.w	r0, #0
   d5fd8:	bd30      	pop	{r4, r5, pc}
   d5fda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5fde:	bf1a      	itte	ne
   d5fe0:	4619      	movne	r1, r3
   d5fe2:	4610      	movne	r0, r2
   d5fe4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5fe8:	bf1c      	itt	ne
   d5fea:	460b      	movne	r3, r1
   d5fec:	4602      	movne	r2, r0
   d5fee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5ff2:	bf06      	itte	eq
   d5ff4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5ff8:	ea91 0f03 	teqeq	r1, r3
   d5ffc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6000:	bd30      	pop	{r4, r5, pc}
   d6002:	bf00      	nop

000d6004 <__aeabi_ui2d>:
   d6004:	f090 0f00 	teq	r0, #0
   d6008:	bf04      	itt	eq
   d600a:	2100      	moveq	r1, #0
   d600c:	4770      	bxeq	lr
   d600e:	b530      	push	{r4, r5, lr}
   d6010:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6014:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6018:	f04f 0500 	mov.w	r5, #0
   d601c:	f04f 0100 	mov.w	r1, #0
   d6020:	e750      	b.n	d5ec4 <__adddf3+0x138>
   d6022:	bf00      	nop

000d6024 <__aeabi_i2d>:
   d6024:	f090 0f00 	teq	r0, #0
   d6028:	bf04      	itt	eq
   d602a:	2100      	moveq	r1, #0
   d602c:	4770      	bxeq	lr
   d602e:	b530      	push	{r4, r5, lr}
   d6030:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6034:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6038:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d603c:	bf48      	it	mi
   d603e:	4240      	negmi	r0, r0
   d6040:	f04f 0100 	mov.w	r1, #0
   d6044:	e73e      	b.n	d5ec4 <__adddf3+0x138>
   d6046:	bf00      	nop

000d6048 <__aeabi_f2d>:
   d6048:	0042      	lsls	r2, r0, #1
   d604a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d604e:	ea4f 0131 	mov.w	r1, r1, rrx
   d6052:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6056:	bf1f      	itttt	ne
   d6058:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d605c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6060:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6064:	4770      	bxne	lr
   d6066:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d606a:	bf08      	it	eq
   d606c:	4770      	bxeq	lr
   d606e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6072:	bf04      	itt	eq
   d6074:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6078:	4770      	bxeq	lr
   d607a:	b530      	push	{r4, r5, lr}
   d607c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6080:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6084:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6088:	e71c      	b.n	d5ec4 <__adddf3+0x138>
   d608a:	bf00      	nop

000d608c <__aeabi_ul2d>:
   d608c:	ea50 0201 	orrs.w	r2, r0, r1
   d6090:	bf08      	it	eq
   d6092:	4770      	bxeq	lr
   d6094:	b530      	push	{r4, r5, lr}
   d6096:	f04f 0500 	mov.w	r5, #0
   d609a:	e00a      	b.n	d60b2 <__aeabi_l2d+0x16>

000d609c <__aeabi_l2d>:
   d609c:	ea50 0201 	orrs.w	r2, r0, r1
   d60a0:	bf08      	it	eq
   d60a2:	4770      	bxeq	lr
   d60a4:	b530      	push	{r4, r5, lr}
   d60a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d60aa:	d502      	bpl.n	d60b2 <__aeabi_l2d+0x16>
   d60ac:	4240      	negs	r0, r0
   d60ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d60b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d60b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d60ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d60be:	f43f aed8 	beq.w	d5e72 <__adddf3+0xe6>
   d60c2:	f04f 0203 	mov.w	r2, #3
   d60c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d60ca:	bf18      	it	ne
   d60cc:	3203      	addne	r2, #3
   d60ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d60d2:	bf18      	it	ne
   d60d4:	3203      	addne	r2, #3
   d60d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d60da:	f1c2 0320 	rsb	r3, r2, #32
   d60de:	fa00 fc03 	lsl.w	ip, r0, r3
   d60e2:	fa20 f002 	lsr.w	r0, r0, r2
   d60e6:	fa01 fe03 	lsl.w	lr, r1, r3
   d60ea:	ea40 000e 	orr.w	r0, r0, lr
   d60ee:	fa21 f102 	lsr.w	r1, r1, r2
   d60f2:	4414      	add	r4, r2
   d60f4:	e6bd      	b.n	d5e72 <__adddf3+0xe6>
   d60f6:	bf00      	nop

000d60f8 <__aeabi_dmul>:
   d60f8:	b570      	push	{r4, r5, r6, lr}
   d60fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d60fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6102:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6106:	bf1d      	ittte	ne
   d6108:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d610c:	ea94 0f0c 	teqne	r4, ip
   d6110:	ea95 0f0c 	teqne	r5, ip
   d6114:	f000 f8de 	bleq	d62d4 <__aeabi_dmul+0x1dc>
   d6118:	442c      	add	r4, r5
   d611a:	ea81 0603 	eor.w	r6, r1, r3
   d611e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6122:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6126:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d612a:	bf18      	it	ne
   d612c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6130:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6138:	d038      	beq.n	d61ac <__aeabi_dmul+0xb4>
   d613a:	fba0 ce02 	umull	ip, lr, r0, r2
   d613e:	f04f 0500 	mov.w	r5, #0
   d6142:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6146:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d614a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d614e:	f04f 0600 	mov.w	r6, #0
   d6152:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6156:	f09c 0f00 	teq	ip, #0
   d615a:	bf18      	it	ne
   d615c:	f04e 0e01 	orrne.w	lr, lr, #1
   d6160:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6164:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6168:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d616c:	d204      	bcs.n	d6178 <__aeabi_dmul+0x80>
   d616e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6172:	416d      	adcs	r5, r5
   d6174:	eb46 0606 	adc.w	r6, r6, r6
   d6178:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d617c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6180:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6184:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6188:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d618c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6190:	bf88      	it	hi
   d6192:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6196:	d81e      	bhi.n	d61d6 <__aeabi_dmul+0xde>
   d6198:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d619c:	bf08      	it	eq
   d619e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d61a2:	f150 0000 	adcs.w	r0, r0, #0
   d61a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d61aa:	bd70      	pop	{r4, r5, r6, pc}
   d61ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d61b0:	ea46 0101 	orr.w	r1, r6, r1
   d61b4:	ea40 0002 	orr.w	r0, r0, r2
   d61b8:	ea81 0103 	eor.w	r1, r1, r3
   d61bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d61c0:	bfc2      	ittt	gt
   d61c2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d61c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d61ca:	bd70      	popgt	{r4, r5, r6, pc}
   d61cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d61d0:	f04f 0e00 	mov.w	lr, #0
   d61d4:	3c01      	subs	r4, #1
   d61d6:	f300 80ab 	bgt.w	d6330 <__aeabi_dmul+0x238>
   d61da:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d61de:	bfde      	ittt	le
   d61e0:	2000      	movle	r0, #0
   d61e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d61e6:	bd70      	pople	{r4, r5, r6, pc}
   d61e8:	f1c4 0400 	rsb	r4, r4, #0
   d61ec:	3c20      	subs	r4, #32
   d61ee:	da35      	bge.n	d625c <__aeabi_dmul+0x164>
   d61f0:	340c      	adds	r4, #12
   d61f2:	dc1b      	bgt.n	d622c <__aeabi_dmul+0x134>
   d61f4:	f104 0414 	add.w	r4, r4, #20
   d61f8:	f1c4 0520 	rsb	r5, r4, #32
   d61fc:	fa00 f305 	lsl.w	r3, r0, r5
   d6200:	fa20 f004 	lsr.w	r0, r0, r4
   d6204:	fa01 f205 	lsl.w	r2, r1, r5
   d6208:	ea40 0002 	orr.w	r0, r0, r2
   d620c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6210:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6214:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6218:	fa21 f604 	lsr.w	r6, r1, r4
   d621c:	eb42 0106 	adc.w	r1, r2, r6
   d6220:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6224:	bf08      	it	eq
   d6226:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d622a:	bd70      	pop	{r4, r5, r6, pc}
   d622c:	f1c4 040c 	rsb	r4, r4, #12
   d6230:	f1c4 0520 	rsb	r5, r4, #32
   d6234:	fa00 f304 	lsl.w	r3, r0, r4
   d6238:	fa20 f005 	lsr.w	r0, r0, r5
   d623c:	fa01 f204 	lsl.w	r2, r1, r4
   d6240:	ea40 0002 	orr.w	r0, r0, r2
   d6244:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6248:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d624c:	f141 0100 	adc.w	r1, r1, #0
   d6250:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6254:	bf08      	it	eq
   d6256:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d625a:	bd70      	pop	{r4, r5, r6, pc}
   d625c:	f1c4 0520 	rsb	r5, r4, #32
   d6260:	fa00 f205 	lsl.w	r2, r0, r5
   d6264:	ea4e 0e02 	orr.w	lr, lr, r2
   d6268:	fa20 f304 	lsr.w	r3, r0, r4
   d626c:	fa01 f205 	lsl.w	r2, r1, r5
   d6270:	ea43 0302 	orr.w	r3, r3, r2
   d6274:	fa21 f004 	lsr.w	r0, r1, r4
   d6278:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d627c:	fa21 f204 	lsr.w	r2, r1, r4
   d6280:	ea20 0002 	bic.w	r0, r0, r2
   d6284:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d628c:	bf08      	it	eq
   d628e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6292:	bd70      	pop	{r4, r5, r6, pc}
   d6294:	f094 0f00 	teq	r4, #0
   d6298:	d10f      	bne.n	d62ba <__aeabi_dmul+0x1c2>
   d629a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d629e:	0040      	lsls	r0, r0, #1
   d62a0:	eb41 0101 	adc.w	r1, r1, r1
   d62a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d62a8:	bf08      	it	eq
   d62aa:	3c01      	subeq	r4, #1
   d62ac:	d0f7      	beq.n	d629e <__aeabi_dmul+0x1a6>
   d62ae:	ea41 0106 	orr.w	r1, r1, r6
   d62b2:	f095 0f00 	teq	r5, #0
   d62b6:	bf18      	it	ne
   d62b8:	4770      	bxne	lr
   d62ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d62be:	0052      	lsls	r2, r2, #1
   d62c0:	eb43 0303 	adc.w	r3, r3, r3
   d62c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d62c8:	bf08      	it	eq
   d62ca:	3d01      	subeq	r5, #1
   d62cc:	d0f7      	beq.n	d62be <__aeabi_dmul+0x1c6>
   d62ce:	ea43 0306 	orr.w	r3, r3, r6
   d62d2:	4770      	bx	lr
   d62d4:	ea94 0f0c 	teq	r4, ip
   d62d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d62dc:	bf18      	it	ne
   d62de:	ea95 0f0c 	teqne	r5, ip
   d62e2:	d00c      	beq.n	d62fe <__aeabi_dmul+0x206>
   d62e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d62e8:	bf18      	it	ne
   d62ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d62ee:	d1d1      	bne.n	d6294 <__aeabi_dmul+0x19c>
   d62f0:	ea81 0103 	eor.w	r1, r1, r3
   d62f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d62f8:	f04f 0000 	mov.w	r0, #0
   d62fc:	bd70      	pop	{r4, r5, r6, pc}
   d62fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6302:	bf06      	itte	eq
   d6304:	4610      	moveq	r0, r2
   d6306:	4619      	moveq	r1, r3
   d6308:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d630c:	d019      	beq.n	d6342 <__aeabi_dmul+0x24a>
   d630e:	ea94 0f0c 	teq	r4, ip
   d6312:	d102      	bne.n	d631a <__aeabi_dmul+0x222>
   d6314:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6318:	d113      	bne.n	d6342 <__aeabi_dmul+0x24a>
   d631a:	ea95 0f0c 	teq	r5, ip
   d631e:	d105      	bne.n	d632c <__aeabi_dmul+0x234>
   d6320:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6324:	bf1c      	itt	ne
   d6326:	4610      	movne	r0, r2
   d6328:	4619      	movne	r1, r3
   d632a:	d10a      	bne.n	d6342 <__aeabi_dmul+0x24a>
   d632c:	ea81 0103 	eor.w	r1, r1, r3
   d6330:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6334:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6338:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d633c:	f04f 0000 	mov.w	r0, #0
   d6340:	bd70      	pop	{r4, r5, r6, pc}
   d6342:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6346:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d634a:	bd70      	pop	{r4, r5, r6, pc}

000d634c <__aeabi_ddiv>:
   d634c:	b570      	push	{r4, r5, r6, lr}
   d634e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6352:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6356:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d635a:	bf1d      	ittte	ne
   d635c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6360:	ea94 0f0c 	teqne	r4, ip
   d6364:	ea95 0f0c 	teqne	r5, ip
   d6368:	f000 f8a7 	bleq	d64ba <__aeabi_ddiv+0x16e>
   d636c:	eba4 0405 	sub.w	r4, r4, r5
   d6370:	ea81 0e03 	eor.w	lr, r1, r3
   d6374:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6378:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d637c:	f000 8088 	beq.w	d6490 <__aeabi_ddiv+0x144>
   d6380:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6384:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6388:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d638c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6390:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6394:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6398:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d639c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d63a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d63a4:	429d      	cmp	r5, r3
   d63a6:	bf08      	it	eq
   d63a8:	4296      	cmpeq	r6, r2
   d63aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d63ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d63b2:	d202      	bcs.n	d63ba <__aeabi_ddiv+0x6e>
   d63b4:	085b      	lsrs	r3, r3, #1
   d63b6:	ea4f 0232 	mov.w	r2, r2, rrx
   d63ba:	1ab6      	subs	r6, r6, r2
   d63bc:	eb65 0503 	sbc.w	r5, r5, r3
   d63c0:	085b      	lsrs	r3, r3, #1
   d63c2:	ea4f 0232 	mov.w	r2, r2, rrx
   d63c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d63ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d63ce:	ebb6 0e02 	subs.w	lr, r6, r2
   d63d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d63d6:	bf22      	ittt	cs
   d63d8:	1ab6      	subcs	r6, r6, r2
   d63da:	4675      	movcs	r5, lr
   d63dc:	ea40 000c 	orrcs.w	r0, r0, ip
   d63e0:	085b      	lsrs	r3, r3, #1
   d63e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d63e6:	ebb6 0e02 	subs.w	lr, r6, r2
   d63ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d63ee:	bf22      	ittt	cs
   d63f0:	1ab6      	subcs	r6, r6, r2
   d63f2:	4675      	movcs	r5, lr
   d63f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d63f8:	085b      	lsrs	r3, r3, #1
   d63fa:	ea4f 0232 	mov.w	r2, r2, rrx
   d63fe:	ebb6 0e02 	subs.w	lr, r6, r2
   d6402:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6406:	bf22      	ittt	cs
   d6408:	1ab6      	subcs	r6, r6, r2
   d640a:	4675      	movcs	r5, lr
   d640c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6410:	085b      	lsrs	r3, r3, #1
   d6412:	ea4f 0232 	mov.w	r2, r2, rrx
   d6416:	ebb6 0e02 	subs.w	lr, r6, r2
   d641a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d641e:	bf22      	ittt	cs
   d6420:	1ab6      	subcs	r6, r6, r2
   d6422:	4675      	movcs	r5, lr
   d6424:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6428:	ea55 0e06 	orrs.w	lr, r5, r6
   d642c:	d018      	beq.n	d6460 <__aeabi_ddiv+0x114>
   d642e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6432:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6436:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d643a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d643e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6442:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6446:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d644a:	d1c0      	bne.n	d63ce <__aeabi_ddiv+0x82>
   d644c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6450:	d10b      	bne.n	d646a <__aeabi_ddiv+0x11e>
   d6452:	ea41 0100 	orr.w	r1, r1, r0
   d6456:	f04f 0000 	mov.w	r0, #0
   d645a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d645e:	e7b6      	b.n	d63ce <__aeabi_ddiv+0x82>
   d6460:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6464:	bf04      	itt	eq
   d6466:	4301      	orreq	r1, r0
   d6468:	2000      	moveq	r0, #0
   d646a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d646e:	bf88      	it	hi
   d6470:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6474:	f63f aeaf 	bhi.w	d61d6 <__aeabi_dmul+0xde>
   d6478:	ebb5 0c03 	subs.w	ip, r5, r3
   d647c:	bf04      	itt	eq
   d647e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6482:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6486:	f150 0000 	adcs.w	r0, r0, #0
   d648a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d648e:	bd70      	pop	{r4, r5, r6, pc}
   d6490:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6494:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6498:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d649c:	bfc2      	ittt	gt
   d649e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d64a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d64a6:	bd70      	popgt	{r4, r5, r6, pc}
   d64a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d64ac:	f04f 0e00 	mov.w	lr, #0
   d64b0:	3c01      	subs	r4, #1
   d64b2:	e690      	b.n	d61d6 <__aeabi_dmul+0xde>
   d64b4:	ea45 0e06 	orr.w	lr, r5, r6
   d64b8:	e68d      	b.n	d61d6 <__aeabi_dmul+0xde>
   d64ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d64be:	ea94 0f0c 	teq	r4, ip
   d64c2:	bf08      	it	eq
   d64c4:	ea95 0f0c 	teqeq	r5, ip
   d64c8:	f43f af3b 	beq.w	d6342 <__aeabi_dmul+0x24a>
   d64cc:	ea94 0f0c 	teq	r4, ip
   d64d0:	d10a      	bne.n	d64e8 <__aeabi_ddiv+0x19c>
   d64d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d64d6:	f47f af34 	bne.w	d6342 <__aeabi_dmul+0x24a>
   d64da:	ea95 0f0c 	teq	r5, ip
   d64de:	f47f af25 	bne.w	d632c <__aeabi_dmul+0x234>
   d64e2:	4610      	mov	r0, r2
   d64e4:	4619      	mov	r1, r3
   d64e6:	e72c      	b.n	d6342 <__aeabi_dmul+0x24a>
   d64e8:	ea95 0f0c 	teq	r5, ip
   d64ec:	d106      	bne.n	d64fc <__aeabi_ddiv+0x1b0>
   d64ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d64f2:	f43f aefd 	beq.w	d62f0 <__aeabi_dmul+0x1f8>
   d64f6:	4610      	mov	r0, r2
   d64f8:	4619      	mov	r1, r3
   d64fa:	e722      	b.n	d6342 <__aeabi_dmul+0x24a>
   d64fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6500:	bf18      	it	ne
   d6502:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6506:	f47f aec5 	bne.w	d6294 <__aeabi_dmul+0x19c>
   d650a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d650e:	f47f af0d 	bne.w	d632c <__aeabi_dmul+0x234>
   d6512:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6516:	f47f aeeb 	bne.w	d62f0 <__aeabi_dmul+0x1f8>
   d651a:	e712      	b.n	d6342 <__aeabi_dmul+0x24a>

000d651c <__aeabi_d2iz>:
   d651c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6520:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6524:	d215      	bcs.n	d6552 <__aeabi_d2iz+0x36>
   d6526:	d511      	bpl.n	d654c <__aeabi_d2iz+0x30>
   d6528:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d652c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6530:	d912      	bls.n	d6558 <__aeabi_d2iz+0x3c>
   d6532:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d653a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d653e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6542:	fa23 f002 	lsr.w	r0, r3, r2
   d6546:	bf18      	it	ne
   d6548:	4240      	negne	r0, r0
   d654a:	4770      	bx	lr
   d654c:	f04f 0000 	mov.w	r0, #0
   d6550:	4770      	bx	lr
   d6552:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6556:	d105      	bne.n	d6564 <__aeabi_d2iz+0x48>
   d6558:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d655c:	bf08      	it	eq
   d655e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6562:	4770      	bx	lr
   d6564:	f04f 0000 	mov.w	r0, #0
   d6568:	4770      	bx	lr
   d656a:	bf00      	nop

000d656c <__aeabi_d2f>:
   d656c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6570:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6574:	bf24      	itt	cs
   d6576:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d657a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d657e:	d90d      	bls.n	d659c <__aeabi_d2f+0x30>
   d6580:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6584:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6588:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d658c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6590:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6594:	bf08      	it	eq
   d6596:	f020 0001 	biceq.w	r0, r0, #1
   d659a:	4770      	bx	lr
   d659c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d65a0:	d121      	bne.n	d65e6 <__aeabi_d2f+0x7a>
   d65a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d65a6:	bfbc      	itt	lt
   d65a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d65ac:	4770      	bxlt	lr
   d65ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d65b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d65b6:	f1c2 0218 	rsb	r2, r2, #24
   d65ba:	f1c2 0c20 	rsb	ip, r2, #32
   d65be:	fa10 f30c 	lsls.w	r3, r0, ip
   d65c2:	fa20 f002 	lsr.w	r0, r0, r2
   d65c6:	bf18      	it	ne
   d65c8:	f040 0001 	orrne.w	r0, r0, #1
   d65cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d65d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d65d4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d65d8:	ea40 000c 	orr.w	r0, r0, ip
   d65dc:	fa23 f302 	lsr.w	r3, r3, r2
   d65e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d65e4:	e7cc      	b.n	d6580 <__aeabi_d2f+0x14>
   d65e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d65ea:	d107      	bne.n	d65fc <__aeabi_d2f+0x90>
   d65ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d65f0:	bf1e      	ittt	ne
   d65f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d65f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d65fa:	4770      	bxne	lr
   d65fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6600:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6604:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6608:	4770      	bx	lr
   d660a:	bf00      	nop

000d660c <atexit>:
   d660c:	2300      	movs	r3, #0
   d660e:	4601      	mov	r1, r0
   d6610:	461a      	mov	r2, r3
   d6612:	4618      	mov	r0, r3
   d6614:	f000 b84a 	b.w	d66ac <__register_exitproc>

000d6618 <memcpy>:
   d6618:	440a      	add	r2, r1
   d661a:	4291      	cmp	r1, r2
   d661c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6620:	d100      	bne.n	d6624 <memcpy+0xc>
   d6622:	4770      	bx	lr
   d6624:	b510      	push	{r4, lr}
   d6626:	f811 4b01 	ldrb.w	r4, [r1], #1
   d662a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d662e:	4291      	cmp	r1, r2
   d6630:	d1f9      	bne.n	d6626 <memcpy+0xe>
   d6632:	bd10      	pop	{r4, pc}

000d6634 <memset>:
   d6634:	4402      	add	r2, r0
   d6636:	4603      	mov	r3, r0
   d6638:	4293      	cmp	r3, r2
   d663a:	d100      	bne.n	d663e <memset+0xa>
   d663c:	4770      	bx	lr
   d663e:	f803 1b01 	strb.w	r1, [r3], #1
   d6642:	e7f9      	b.n	d6638 <memset+0x4>

000d6644 <srand>:
   d6644:	b538      	push	{r3, r4, r5, lr}
   d6646:	4b0d      	ldr	r3, [pc, #52]	; (d667c <srand+0x38>)
   d6648:	681d      	ldr	r5, [r3, #0]
   d664a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d664c:	4604      	mov	r4, r0
   d664e:	b97b      	cbnz	r3, d6670 <srand+0x2c>
   d6650:	2018      	movs	r0, #24
   d6652:	f7fe fadd 	bl	d4c10 <malloc>
   d6656:	4a0a      	ldr	r2, [pc, #40]	; (d6680 <srand+0x3c>)
   d6658:	4b0a      	ldr	r3, [pc, #40]	; (d6684 <srand+0x40>)
   d665a:	63a8      	str	r0, [r5, #56]	; 0x38
   d665c:	e9c0 2300 	strd	r2, r3, [r0]
   d6660:	4b09      	ldr	r3, [pc, #36]	; (d6688 <srand+0x44>)
   d6662:	6083      	str	r3, [r0, #8]
   d6664:	230b      	movs	r3, #11
   d6666:	8183      	strh	r3, [r0, #12]
   d6668:	2201      	movs	r2, #1
   d666a:	2300      	movs	r3, #0
   d666c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6670:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6672:	2200      	movs	r2, #0
   d6674:	611c      	str	r4, [r3, #16]
   d6676:	615a      	str	r2, [r3, #20]
   d6678:	bd38      	pop	{r3, r4, r5, pc}
   d667a:	bf00      	nop
   d667c:	2003e4a4 	.word	0x2003e4a4
   d6680:	abcd330e 	.word	0xabcd330e
   d6684:	e66d1234 	.word	0xe66d1234
   d6688:	0005deec 	.word	0x0005deec

000d668c <strcpy>:
   d668c:	4603      	mov	r3, r0
   d668e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6692:	f803 2b01 	strb.w	r2, [r3], #1
   d6696:	2a00      	cmp	r2, #0
   d6698:	d1f9      	bne.n	d668e <strcpy+0x2>
   d669a:	4770      	bx	lr

000d669c <strlen>:
   d669c:	4603      	mov	r3, r0
   d669e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d66a2:	2a00      	cmp	r2, #0
   d66a4:	d1fb      	bne.n	d669e <strlen+0x2>
   d66a6:	1a18      	subs	r0, r3, r0
   d66a8:	3801      	subs	r0, #1
   d66aa:	4770      	bx	lr

000d66ac <__register_exitproc>:
   d66ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d66b0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d676c <__register_exitproc+0xc0>
   d66b4:	4606      	mov	r6, r0
   d66b6:	f8d8 0000 	ldr.w	r0, [r8]
   d66ba:	461f      	mov	r7, r3
   d66bc:	460d      	mov	r5, r1
   d66be:	4691      	mov	r9, r2
   d66c0:	f000 f856 	bl	d6770 <__retarget_lock_acquire_recursive>
   d66c4:	4b25      	ldr	r3, [pc, #148]	; (d675c <__register_exitproc+0xb0>)
   d66c6:	681c      	ldr	r4, [r3, #0]
   d66c8:	b934      	cbnz	r4, d66d8 <__register_exitproc+0x2c>
   d66ca:	4c25      	ldr	r4, [pc, #148]	; (d6760 <__register_exitproc+0xb4>)
   d66cc:	601c      	str	r4, [r3, #0]
   d66ce:	4b25      	ldr	r3, [pc, #148]	; (d6764 <__register_exitproc+0xb8>)
   d66d0:	b113      	cbz	r3, d66d8 <__register_exitproc+0x2c>
   d66d2:	681b      	ldr	r3, [r3, #0]
   d66d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d66d8:	6863      	ldr	r3, [r4, #4]
   d66da:	2b1f      	cmp	r3, #31
   d66dc:	dd07      	ble.n	d66ee <__register_exitproc+0x42>
   d66de:	f8d8 0000 	ldr.w	r0, [r8]
   d66e2:	f000 f847 	bl	d6774 <__retarget_lock_release_recursive>
   d66e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d66ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d66ee:	b34e      	cbz	r6, d6744 <__register_exitproc+0x98>
   d66f0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d66f4:	b988      	cbnz	r0, d671a <__register_exitproc+0x6e>
   d66f6:	4b1c      	ldr	r3, [pc, #112]	; (d6768 <__register_exitproc+0xbc>)
   d66f8:	b923      	cbnz	r3, d6704 <__register_exitproc+0x58>
   d66fa:	f8d8 0000 	ldr.w	r0, [r8]
   d66fe:	f000 f838 	bl	d6772 <__retarget_lock_release>
   d6702:	e7f0      	b.n	d66e6 <__register_exitproc+0x3a>
   d6704:	f44f 7084 	mov.w	r0, #264	; 0x108
   d6708:	f7fe fa82 	bl	d4c10 <malloc>
   d670c:	2800      	cmp	r0, #0
   d670e:	d0f4      	beq.n	d66fa <__register_exitproc+0x4e>
   d6710:	2300      	movs	r3, #0
   d6712:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d6716:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d671a:	6863      	ldr	r3, [r4, #4]
   d671c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d6720:	2201      	movs	r2, #1
   d6722:	409a      	lsls	r2, r3
   d6724:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d6728:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d672c:	4313      	orrs	r3, r2
   d672e:	2e02      	cmp	r6, #2
   d6730:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d6734:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d6738:	bf02      	ittt	eq
   d673a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d673e:	431a      	orreq	r2, r3
   d6740:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d6744:	6863      	ldr	r3, [r4, #4]
   d6746:	f8d8 0000 	ldr.w	r0, [r8]
   d674a:	1c5a      	adds	r2, r3, #1
   d674c:	3302      	adds	r3, #2
   d674e:	6062      	str	r2, [r4, #4]
   d6750:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d6754:	f000 f80e 	bl	d6774 <__retarget_lock_release_recursive>
   d6758:	2000      	movs	r0, #0
   d675a:	e7c6      	b.n	d66ea <__register_exitproc+0x3e>
   d675c:	2003e7e0 	.word	0x2003e7e0
   d6760:	2003e754 	.word	0x2003e754
   d6764:	00000000 	.word	0x00000000
   d6768:	000d4c11 	.word	0x000d4c11
   d676c:	2003e508 	.word	0x2003e508

000d6770 <__retarget_lock_acquire_recursive>:
   d6770:	4770      	bx	lr

000d6772 <__retarget_lock_release>:
   d6772:	4770      	bx	lr

000d6774 <__retarget_lock_release_recursive>:
   d6774:	4770      	bx	lr

000d6776 <link_code_end>:
	...

000d6778 <dynalib_user>:
   d6778:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6788:	0000 0000 504d 3655 3530 2030 6f63 6e6e     ....MPU6050 conn
   d6798:	6365 6974 6e6f 7320 6375 6563 7373 7566     ection successfu
   d67a8:	006c 504d 3655 3530 2030 6f63 6e6e 6365     l.MPU6050 connec
   d67b8:	6974 6e6f 6620 6961 656c 0064 6e49 7469     tion failed.Init
   d67c8:	6169 696c 697a 676e 4920 4332 6420 7665     ializing I2C dev
   d67d8:	6369 7365 2e2e 002e 6554 7473 6e69 2067     ices....Testing 
   d67e8:	6564 6976 6563 6320 6e6f 656e 7463 6f69     device connectio
   d67f8:	736e 2e2e 002e 6957 6946 6320 6e6f 656e     ns....WiFi conne
   d6808:	7463 6465 2f00 616d 6978 656d 0000 0000     cted./maxime....

000d6818 <_ZTVN5spark13EthernetClassE>:
	...
   d6820:	4cc7 000d 4cbd 000d 4cb3 000d 4ca9 000d     .L...L...L...L..
   d6830:	4c9d 000d 4c91 000d 4f55 000d 4f5d 000d     .L...L..UO..]O..
   d6840:	4c85 000d 4c7d 000d 4c73 000d 4c69 000d     .L..}L..sL..iL..
   d6850:	4f8d 000d                                   .O..

000d6854 <_ZTV7TwoWire>:
	...
   d685c:	4ce5 000d 4d2f 000d 4d07 000d 4ce7 000d     .L../M...M...L..
   d686c:	4d0f 000d 4d17 000d 4d1f 000d 4d27 000d     .M...M...M..'M..

000d687c <_ZTV9IPAddress>:
	...
   d6884:	4deb 000d 4ddb 000d 4ddd 000d 7061 0070     .M...M...M..app.

000d6894 <_ZTVN5spark12NetworkClassE>:
	...
   d689c:	4f15 000d 4f1f 000d 4f29 000d 4f33 000d     .O...O..)O..3O..
   d68ac:	4f3d 000d 4f49 000d 4f55 000d 4f5d 000d     =O..IO..UO..]O..
   d68bc:	4f65 000d 4f71 000d 4f79 000d 4f83 000d     eO..qO..yO...O..
   d68cc:	4f8d 000d 5925 252d 2d6d 6425 2554 3a48     .O..%Y-%m-%dT%H:
   d68dc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d68ec <_ZTV3UDP>:
	...
   d68f4:	5845 000d 5869 000d 52e1 000d 5409 000d     EX..iX...R...T..
   d6904:	52d9 000d 52f9 000d 5317 000d 5331 000d     .R...R...S..1S..
   d6914:	5355 000d 53ed 000d 56eb 000d 5491 000d     US...S...V...T..
   d6924:	5609 000d 52c1 000d 57d5 000d 5591 000d     .V...R...W...U..
   d6934:	54c9 000d 5803 000d 5433 000d 52cf 000d     .T...X..3T...R..
   d6944:	5471 000d 52d5 000d 5333 000d fff0 ffff     qT...R..3S......
   d6954:	0000 0000 534d 000d                         ....MS..

000d695c <_ZTV11USARTSerial>:
	...
   d6964:	587d 000d 58eb 000d 58c3 000d 5075 000d     }X...X...X..uP..
   d6974:	5893 000d 58af 000d 58a1 000d 58bd 000d     .X...X...X...X..
   d6984:	587f 000d 5885 000d                         .X...X..

000d698c <_ZTV9USBSerial>:
	...
   d6994:	5977 000d 59df 000d 59b5 000d 5075 000d     wY...Y...Y..uP..
   d69a4:	59a7 000d 5979 000d 5989 000d 59d9 000d     .Y..yY...Y...Y..
   d69b4:	5999 000d 5971 000d                         .Y..qY..

000d69bc <_ZTVN5spark9WiFiClassE>:
	...
   d69c4:	5ad7 000d 5acd 000d 5ac3 000d 5a79 000d     .Z...Z...Z..yZ..
   d69d4:	5ab7 000d 5aab 000d 4f55 000d 4f5d 000d     .Z...Z..UO..]O..
   d69e4:	5a9f 000d 5a97 000d 5a8d 000d 5a83 000d     .Z...Z...Z...Z..
   d69f4:	4f8d 000d                                   .O..

000d69f8 <_ZSt7nothrow>:
	...

000d69f9 <link_const_variable_data_end>:
   d69f9:	00          	.byte	0x00
	...

000d69fc <link_constructors_location>:
   d69fc:	000d427d 	.word	0x000d427d
   d6a00:	000d4c59 	.word	0x000d4c59
   d6a04:	000d4cd1 	.word	0x000d4cd1
   d6a08:	000d4f05 	.word	0x000d4f05
   d6a0c:	000d5061 	.word	0x000d5061
   d6a10:	000d513d 	.word	0x000d513d
   d6a14:	000d5289 	.word	0x000d5289
   d6a18:	000d52ad 	.word	0x000d52ad
   d6a1c:	000d5ae1 	.word	0x000d5ae1
